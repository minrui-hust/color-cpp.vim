Log file created at: 2019/04/03 13:13:17
Running on machine: mr-pc
Log line format: [IWEF]mmdd hh:mm:ss.uuuuuu threadid file:line] msg
I0403 13:13:17.901376 29662 json_parser.cpp:18] 
[
	1,
	{
		"bufnr" : 4,
		"filename" : "/home/mr/.vim/bundle/color-cpp/server/server.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-I/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/clang_includes",
			"-I/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/llvm/include",
			"-I/usr/local/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "#include <fcntl.h>\n#include <fstream>\n#include <iostream>\n#include <memory>\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <unistd.h>\n\n#include \"json/json.h\"\n#include \"glog/logging.h\"\n\n#include \"json_parser.h\"\n#include \"syntax_analyzer.h\"\n\nconstexpr int kStdinBufferSize = 1024 * 10; // 10K\n\nvoid setupGlog(char** argv){\n  google::InitGoogleLogging(argv[0]);  \n  google::SetLogDestination(google::GLOG_INFO, \"/home/mr/.vim/bundle/color-cpp/server/log/\");\n}\n\nint main(int argc, char**argv) {\n  setupGlog(argv);\n\n  char *stdin_buf = new char[kStdinBufferSize+1];\n  size_t stdin_read_size;\n  JsonParser parser;\n  SyntaxAnalyzer analyzer;\n  std::shared_ptr<std::string> response;\n\n  while (true) {\n    stdin_read_size = read(STDIN_FILENO, stdin_buf, kStdinBufferSize);\n    if (stdin_read_size > 0) {\n      auto json_value = parser.parse(stdin_buf, stdin_read_size);\n      if(json_value){\n        analyzer.processRequest(*json_value);\n      }\n    }\n  }\n\n  return 0;\n}\n",
			"filename" : "/home/mr/.vim/bundle/color-cpp/server/server.cpp"
		}
	}
]
I0403 13:13:24.551795 29662 json_parser.cpp:18] 
[
	2,
	{
		"bufnr" : 4,
		"filename" : "/home/mr/.vim/bundle/color-cpp/server/server.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-I/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/clang_includes",
			"-I/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/llvm/include",
			"-I/usr/local/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "#include <fcntl.h>\n#include <fstream>\n#include <iostream>\n#include <memory>\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <unistd.h>\n\n#include \"json/json.h\"\n#include \"glog/logging.h\"\n\n#include \"json_parser.h\"\n#include \"syntax_analyzer.h\"\n\nconstexpr int kStdinBufferSize = 1024 * 10; // 10K\n\nvoid setupGlog(char** argv){\n  google::InitGoogleLogging(argv[0]);  \n  google::SetLogDestination(google::GLOG_INFO, \"/home/mr/.vim/bundle/color-cpp/server/log/\");\n}\n\nint main(int argc, char**argv) {\n  setupGlog(argv);\n\n  char *stdin_buf = new char[kStdinBufferSize+1];\n  size_t stdin_read_size;\n  JsonParser parser;\n  SyntaxAnalyzer analyzer;\n  std::shared_ptr<std::string> response;\n\n  while (true) {\n    stdin_read_size = read(STDIN_FILENO, stdin_buf, kStdinBufferSize);\n    if (stdin_read_size > 0) {\n      auto json_value = parser.parse(stdin_buf, stdin_read_size);\n      if(json_value){\n        analyzer.processRequest(*json_value);\n      }\n    }\n  }\n\n  return 0;\n}\n",
			"filename" : "/home/mr/.vim/bundle/color-cpp/server/server.cpp"
		}
	}
]
I0403 13:13:24.677985 29662 json_parser.cpp:18] 
[
	3,
	{
		"bufnr" : 5,
		"filename" : "/home/mr/.vim/bundle/color-cpp/server/json_parser.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-I/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/clang_includes",
			"-I/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/llvm/include",
			"-I/usr/local/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "#include \"json_parser.h\"\n#include <sstream>\n#include \"glog/logging.h\"\n\nJsonParser::JsonParser(){\n  Json::CharReaderBuilder reader_builder;\n  Json::StreamWriterBuilder writer_builder;\n  reader_ = std::unique_ptr<Json::CharReader>(reader_builder.newCharReader());\n  writer_ = std::unique_ptr<Json::StreamWriter>(writer_builder.newStreamWriter());\n}\n\nstd::shared_ptr<Json::Value> JsonParser::parse(const char* data, int size){\n  std::shared_ptr<Json::Value> value = std::make_shared<Json::Value>();\n\n  if(reader_->parse(data, data+size-1, value.get(), nullptr)){\n    std::ostringstream ss;\n    writer_->write(*value, &ss);\n    LOG(INFO)<<\"\\n\"<<ss.str();\n\n    return value;\n  }else{\n    return nullptr;\n  }\n}\n",
			"filename" : "/home/mr/.vim/bundle/color-cpp/server/json_parser.cpp"
		}
	}
]
I0403 13:13:37.152158 29662 json_parser.cpp:18] 
[
	4,
	{
		"bufnr" : 5,
		"filename" : "/home/mr/.vim/bundle/color-cpp/server/json_parser.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-I/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/clang_includes",
			"-I/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/llvm/include",
			"-I/usr/local/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "#include \"json_parser.h\"\n#include <sstream>\n#include \"glog/logging.h\"\n\nJsonParser::JsonParser(){\n  Json::CharReaderBuilder reader_builder;\n  Json::StreamWriterBuilder writer_builder;\n  reader_ = std::unique_ptr<Json::CharReader>(reader_builder.newCharReader());\n  writer_ = std::unique_ptr<Json::StreamWriter>(writer_builder.newStreamWriter());\n}\