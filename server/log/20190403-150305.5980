Log file created at: 2019/04/03 15:03:05
Running on machine: mr-pc
Log line format: [IWEF]mmdd hh:mm:ss.uuuuuu threadid file:line] msg
I0403 15:03:05.473637  5980 json_parser.cpp:18] 
[
	1,
	{
		"bufnr" : 3,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/ndt3tile.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#include \"ndt3tile.h\"\n\nnamespace allride {\nnamespace mapping {\n\n// clang-format off\nconst std::vector<TileDataStorage::NameSizePair> Ndt3Tile::kChannelNameAndSize = {\n  TileDataStorage::NameSizePair(\"mean\", 3),\n  TileDataStorage::NameSizePair(\"covariance\", 6),\n  TileDataStorage::NameSizePair(\"normal\", 3),\n  TileDataStorage::NameSizePair(\"eigenvalue\", 3),\n  TileDataStorage::NameSizePair(\"count\", 1),\n  TileDataStorage::NameSizePair(\"scale\", 1),\n  TileDataStorage::NameSizePair(\"intensity\", 1),\n};\n// clang-format on\n\nconst int Ndt3Tile::kTotalNumberOfRows = 18;\n\nNdt3Tile::Ndt3Tile(float grid_size) {\n  storage_ = std::shared_ptr<TileDataStorage>(new TileDataStorage(kChannelNameAndSize));\n  grid_size_ = grid_size;\n}\n\nNdt3Tile::Ndt3Tile(float grid_size, std::shared_ptr<TileDataStorage> storage) {\n  storage_ = storage;\n  grid_size_ = grid_size;\n}\n\nstd::shared_ptr<Ndt3Interface::MapMatrixArray> Ndt3Tile::getMeans() const {\n  std::shared_ptr<MapMatrixArray> map_matrix_array(new MapMatrixArray());\n\n  map_matrix_array->emplace_back(getMeansInner());\n  return map_matrix_array;\n}\n\nstd::shared_ptr<Ndt3Interface::MapMatrixArray> Ndt3Tile::getCovariances() const {\n  std::shared_ptr<MapMatrixArray> map_matrix_array(new MapMatrixArray());\n\n  map_matrix_array->emplace_back(getCovariancesInner());\n  return map_matrix_array;\n}\n\nstd::shared_ptr<Ndt3Interface::MapMatrixArray> Ndt3Tile::getNormals() const {\n  std::shared_ptr<MapMatrixArray> map_matrix_array(new MapMatrixArray());\n\n  map_matrix_array->emplace_back(getNormalsInner());\n  return map_matrix_array;\n}\n\nstd::shared_ptr<Ndt3Interface::MapMatrixArray> Ndt3Tile::getEigenvalues() const {\n  std::shared_ptr<MapMatrixArray> map_matrix_array(new MapMatrixArray());\n\n  map_matrix_array->emplace_back(getEigenvaluesInner());\n  return map_matrix_array;\n}\n\nstd::shared_ptr<Ndt3Interface::MapMatrixArray> Ndt3Tile::getCounts() const {\n  std::shared_ptr<MapMatrixArray> map_matrix_array(new MapMatrixArray());\n\n  map_matrix_array->emplace_back(getCountsInner());\n  return map_matrix_array;\n}\n\nstd::shared_ptr<Ndt3Interface::MapMatrixArray> Ndt3Tile::getScales() const {\n  std::shared_ptr<MapMatrixArray> map_matrix_array(new MapMatrixArray());\n\n  map_matrix_array->emplace_back(getScalesInner());\n  return map_matrix_array;\n}\n\nstd::shared_ptr<Ndt3Interface::MapMatrixArray> Ndt3Tile::getIntensities() const {\n  std::shared_ptr<MapMatrixArray> map_matrix_array(new MapMatrixArray());\n\n  map_matrix_array->emplace_back(getIntensitiesInner());\n  return map_matrix_array;\n}\n\nbool Ndt3Tile::getMean(const Eigen::Vector3f& pos, Eigen::Vector3f* mean) const {\n  int index = -1;\n  if (!getIndex(pos, &index)) {\n    return false;\n  }\n\n  if (nullptr != mean) {\n    *mean = getMeansInner().block<3, 1>(0, index);\n  }\n\n  return true;\n}\n\nbool Ndt3Tile::getCovariance(const Eigen::Vector3f& pos, Eigen::Matrix3f* cov) const {\n  int index = -1;\n  if (!getIndex(pos, &index)) {\n    return false;\n  }\n\n  TileDataStorage::MapMatrix covariances = getCovariancesInner();\n\n  // clang-format off\n  if (nullptr != cov) {\n    (*cov) <<covariances(0, index), covariances(1, index), covariances(2, index),\n             covariances(1, index), covariances(3, index), covariances(4, index),\n             covariances(2, index), covariances(4, index), covariances(5, index);\n  }\n  // clang-format on\n\n  return true;\n}\n\nbool Ndt3Tile::getCount(const Eigen::Vector3f& pos, float* count) const {\n  int index = -1;\n  if (!getIndex(pos, &index)) {\n    return false;\n  }\n\n  if (nullptr != count) {\n    *count = getCountsInner()(0, index);\n  }\n\n  return true;\n}\n\nbool Ndt3Tile::getScale(const Eigen::Vector3f& pos, float* scale) const {\n  int index = -1;\n  if (!getIndex(pos, &index)) {\n    return false;\n  }\n\n  if (nullptr != scale) {\n    *scale = getScalesInner()(0, index);\n  }\n\n  return true;\n}\n\nbool Ndt3Tile::getNormal(const Eigen::Vector3f& pos, Eigen::Vector3f* normal) const {\n  int index = -1;\n  if (!getIndex(pos, &index)) {\n    return false;\n  }\n\n  if (nullptr != normal) {\n    *normal = getNormalsInner().block<3, 1>(0, index);\n  }\n\n  return true;\n}\n\nbool Ndt3Tile::getEigenvalue(const Eigen::Vector3f& pos, Eigen::Vector3f* eigen) const {\n  int index = -1;\n  if (!getIndex(pos, &index)) {\n    return false;\n  }\n\n  if (nullptr != eigen) {\n    *eigen = getEigenvaluesInner().block<3, 1>(0, index);\n  }\n\n  return true;\n}\n\nbool Ndt3Tile::getIntensity(const Eigen::Vector3f& pos, float* intensity) const {\n  int index = -1;\n  if (!getIndex(pos, &index)) {\n    return false;\n  }\n\n  if (nullptr != intensity) {\n    *intensity = getIntensitiesInner()(0, index);\n  }\n\n  return true;\n}\n\nvoid Ndt3Tile::addSample(const common::PointXYZI& sample) {\n  Eigen::Vector3f pos(sample.x, sample.y, sample.z);\n  float intensity_new = sample.intensity;\n\n  int index = -1;\n  if (!getIndex(pos, &index)) {\n    index = storage_->getColumnSize();\n    initializeGaussian(pos, Eigen::Matrix3f::Zero(), 1, grid_size_);\n    storage_->gridToIndexMapping()[getGridID(pos)] = index;\n    indices_to_compute_normal_.insert(index);\n    return;\n  }\n\n  float count = getCount(index);\n  float intensity = getIntensity(index);\n  Eigen::Vector3f mean = getMean(index);\n  Eigen::Matrix3f cov = getCovariance(index);\n\n  ++count;\n\n  float w = 1.0 / count;\n\n  intensity += w * (intensity_new - intensity);\n\n  Eigen::Vector3f r = pos - mean;\n  mean += w * r;\n  cov = (1.0 - w) * (cov + w * (r * r.transpose()));\n\n  setCount(index, count);\n  setIntensity(index, intensity);\n  setMean(index, mean);\n  setCovariance(index, cov);\n\n  indices_to_compute_normal_.insert(index);\n}\n\nvoid Ndt3Tile::addGaussian(const Eigen::Vector3f& mean, const Eigen::Matrix3f& covariance,\n                           int count, float intensity) {\n  int index = -1;\n  if (!getIndex(mean, &index)) {\n    index = storage_->getColumnSize();\n    initializeGaussian(mean, covariance, count, grid_size_);\n    storage_->gridToIndexMapping()[getGridID(mean)] = index;\n    indices_to_compute_normal_.insert(index);\n    return;\n  }\n\n  float count_old = getCount(index);\n  float intensity_old = getIntensity(index);\n  Eigen::Vector3f mean_old = getMean(index);\n  Eigen::Matrix3f cov_old = getCovariance(index);\n\n  float count_new = count_old + count;\n\n  float w0 = count_old / count_new;\n  float w1 = 1.0 - w0;\n\n  float intensity_new = w0 * intensity_old + w1 * intensity;\n  Eigen::Vector3f mean_new = w0 * mean_old + w1 * mean;\n  Eigen::Matrix3f cov_new = w0 * cov_old + w1 * covariance +\n                            w0 * (mean_old - mean_new) * (mean_old - mean_new).transpose() +\n                            w1 * (mean - mean_new) * (mean - mean_new).transpose();\n\n  setCount(index, count_new);\n  setIntensity(index, intensity_new);\n  setMean(index, mean_new);\n  setCovariance(index, cov_new);\n\n  indices_to_compute_normal_.insert(index);\n}\n\nbool Ndt3Tile::unpackFromString(const std::string& packed_string) {\n  return storage_->unpackFromString(packed_string);\n}\n\nbool Ndt3Tile::packToString(std::string* packed_string) const {\n  if (nullptr == packed_string) {\n    return false;\n  }\n\n  return storage_->packToString(packed_string);\n}\n\n/*\nbool Ndt3Tile::buildGridIndexMapping() {\n  storage_->gridToIndexMapping().clear();\n\n  TileDataStorage::MapMatrix means = getMeansInner();\n  TileDataStorage::MapMatrix scales = getScalesInner();\n\n  for (auto i = 0; i < means.cols(); ++i) {\n    // if the grid size in database and memory are\n    // much too different(0.01mm), assume something is wrong\n    if (fabs(scales(0, i) - grid_size_) > 1e-5) {\n      return false;\n    }\n\n    storage_->gridToIndexMapping()[getGridID(means.block<3, 1>(0, i))] = i;\n  }\n\n  return true;\n}\n*/\n\nvoid Ndt3Tile::computeAllNormalsAndEigenvalues(double sensor_noise_var) {\n  for (const auto& index : indices_to_compute_normal_) {\n    computeNormalAndEigenvalues(index, sensor_noise_var, Plane);\n  }\n\n  indices_to_compute_normal_.clear();\n}\n\nvoid Ndt3Tile::computeAllPrincipalAxisAndEigenvalues(double sensor_noise_var) {\n  for (const auto& index : indices_to_compute_normal_) {\n    computeNormalAndEigenvalues(index, sensor_noise_var, Line);\n  }\n\n  indices_to_compute_normal_.clear();\n}\n\nvoid Ndt3Tile::resetRegion(const common::geometry::SE3& Tx_MP_V, double radius) {\n  int index = 0;\n  Eigen::Vector3d pos;\n  TileDataStorage::MapMatrix means = getMeansInner();\n\n  auto it = storage_->gridToIndexMapping().begin();\n  while (it != storage_->gridToIndexMapping().end()) {\n    index = it->second;\n    pos = means.block<3, 1>(0, index).cast<double>();\n    pos = Tx_MP_V.inverseTransform(pos);  // TODO: move this inverse out of while loop\n    if (pos.norm() > radius) {\n      it = storage_->gridToIndexMapping().erase(it);\n    } else {\n      ++it;\n    }\n  }\n}\n\nvoid Ndt3Tile::copy(Ndt3Tile* copy_data) const {\n  storage_->resize(storage_->gridToIndexMapping().size(), 0);\n\n  int index = 0;\n  int index_new = 0;\n\n  auto it = storage_->gridToIndexMapping().begin();\n  while (it != storage_->gridToIndexMapping().end()) {\n    index = it->second;\n    copy_data->setMean(index_new, getMean(index));\n    copy_data->setCovariance(index_new, getCovariance(index));\n    copy_data->setNormal(index_new, getNormal(index));\n    copy_data->setEigenvalue(index_new, getEigenvalue(index));\n    copy_data->setCount(index_new, getCount(index));\n    copy_data->setScale(index_new, getScale(index));\n    copy_data->setIntensity(index_new, getIntensity(index));\n    copy_data->storage_->gridToIndexMapping()[it->first] = index_new;\n    ++index_new;\n    ++it;\n  }\n}\n\nvoid Ndt3Tile::copyAndTransform(const common::geometry::SE3& Tx, double radius,\n                                Ndt3Tile* copy_data) const {\n  storage_->resize(storage_->gridToIndexMapping().size(), 0);\n\n  float scale = 0;\n  int index = 0;\n  int index_new = 0;\n  TileDataStorage::GridID grid_id_new;\n\n  Eigen::Vector3f mean;\n  Eigen::Vector3f normal;\n  Eigen::Matrix3f cov;\n  Eigen::Matrix3f rot = Tx.getSO3().getRotationMatrix().transpose().cast<float>();\n\n  auto it = storage_->gridToIndexMapping().begin();\n  while (it != storage_->gridToIndexMapping().end()) {\n    index = it->second;\n    // TODO: move this inverse out of while loop\n    mean = Tx.inverseTransform(getMean(index).cast<double>()).cast<float>();\n    if (mean.norm() < radius) {\n      cov = rot * getCovariance(index) * rot.transpose();\n      normal = rot * getNormal(index);\n      scale = getScale(index);\n      grid_id_new = getGridID(mean, scale);\n\n      copy_data->setMean(index_new, mean);\n      copy_data->setCovariance(index_new, cov);\n      copy_data->setNormal(index_new, normal);\n      copy_data->setEigenvalue(index_new, getEigenvalue(index));\n      copy_data->setCount(index_new, getCount(index));\n      copy_data->setScale(index_new, scale);\n      copy_data->setIntensity(index_new, getIntensity(index));\n      copy_data->storage_->gridToIndexMapping()[grid_id_new] = index_new;\n      ++index_new;\n    }\n    ++it;\n  }\n}\n\n/* comment out for temporary compilation\nbool Ndt3Tile::toRosMsgPointCloud2(const std::string& frame, const Time& time,\n                                   sensor_msgs::PointCloud2* point_cloud,\n                                   const geometry::SE3& Tx = geometry::SE3()) const {}\n                                   */\n\n// ---------------------------------\n// private & protected methods below\n// ---------------------------------\n\nTileDataStorage::MapMatrix Ndt3Tile::getMeansInner() const {\n  TileDataStorage::MapMatrix data(nullptr, 0, 0, Eigen::OuterStride<>(0));\n  storage_->getChannel(0, 3, &data);\n  return data;\n}\n\nTileDataStorage::MapMatrix Ndt3Tile::getCovariancesInner() const {\n  TileDataStorage::MapMatrix data(nullptr, 0, 0, Eigen::OuterStride<>(0));\n  storage_->getChannel(3, 6, &data);\n  return data;\n}\n\nTileDataStorage::MapMatrix Ndt3Tile::getCountsInner() const {\n  TileDataStorage::MapMatrix data(nullptr, 0, 0, Eigen::OuterStride<>(0));\n  storage_->getChannel(15, 1, &data);\n  return data;\n}\n\nTileDataStorage::MapMatrix Ndt3Tile::getScalesInner() const {\n  TileDataStorage::MapMatrix data(nullptr, 0, 0, Eigen::OuterStride<>(0));\n  storage_->getChannel(16, 1, &data);\n  return data;\n}\n\nTileDataStorage::MapMatrix Ndt3Tile::getNormalsInner() const {\n  TileDataStorage::MapMatrix data(nullptr, 0, 0, Eigen::OuterStride<>(0));\n  storage_->getChannel(9, 3, &data);\n  return data;\n}\n\nTileDataStorage::MapMatrix Ndt3Tile::getEigenvaluesInner() const {\n  TileDataStorage::MapMatrix data(nullptr, 0, 0, Eigen::OuterStride<>(0));\n  storage_->getChannel(12, 3, &data);\n  return data;\n}\n\nTileDataStorage::MapMatrix Ndt3Tile::getIntensitiesInner() const {\n  TileDataStorage::MapMatrix data(nullptr, 0, 0, Eigen::OuterStride<>(0));\n  storage_->getChannel(17, 1, &data);\n  return data;\n}\n\nTileDataStorage::GridID Ndt3Tile::getGridID(const Eigen::Vector3f& pos) const {\n  return getGridID(pos, grid_size_);\n}\n\nTileDataStorage::GridID Ndt3Tile::getGridID(const Eigen::Vector3f& pos, float grid_size) const {\n  int grid_size_log2;\n  frexp(grid_size, &grid_size_log2);\n  const TileDataStorage::GridID id_x = static_cast<int16_t>(floor(pos.x() / grid_size));\n  const TileDataStorage::GridID id_y = static_cast<int16_t>(floor(pos.y() / grid_size));\n  const TileDataStorage::GridID id_z = static_cast<int16_t>(floor(pos.z() / grid_size));\n  const TileDataStorage::GridID id_s = static_cast<int16_t>(grid_size_log2);\n\n  return (id_x << 48) + (id_y << 32) + (id_z << 16) + (id_s << 0);\n}\n\nbool Ndt3Tile::getIndex(const Eigen::Vector3f& pos, int* index) const {\n  if (nullptr == index) {\n    return false;\n  }\n\n  const auto& i = storage_->gridToIndexMapping().find(getGridID(pos));\n  if (i != storage_->gridToIndexMapping().end()) {\n    *index = i->second;\n    return true;\n  } else {\n    *index = -1;\n    return false;\n  }\n}\n\nvoid Ndt3Tile::computeNormalAndEigenvalues(int index, double sensor_noise_var,\n                                           NormalType normal_type) {\n  Eigen::Matrix3d cov = getCovariance(index).cast<double>();\n  cov += Eigen::Matrix3d::Identity() * sensor_noise_var;\n\n  setNormal(index, Eigen::Vector3f::Zero());\n  setEigenvalue(index, Eigen::Vector3f::Zero());\n\n  Eigen::SelfAdjointEigenSolver<Eigen::Matrix3d> solver(cov);\n  if (solver.info() != Eigen::Success) {\n    // VERROR(\"Falied to do eigen  decomposition.\");\n    return;\n  }\n\n  Eigen::Vector3d eigen_value = solver.eigenvalues();\n  Eigen::Matrix3d eigen_vectors = solver.eigenvectors();\n\n  double fitness = 0;\n  Eigen::Vector3d normal = Eigen::Vector3d::Zero();\n\n  switch (normal_type) {\n    case Plane:\n      normal = eigen_vectors.col(2);\n      // Planarity\n      fitness = 2.0f * (eigen_value(1) - eigen_value(0)) / eigen_value.sum();\n      break;\n    case Line:\n      normal = eigen_vectors.col(2);\n      // Lineariry\n      fitness = 1.0f - fabs(eigen_value(1) / eigen_value(2));\n      break;\n    default:\n      return;\n  }\n\n  setNormal(index, (normal * fitness).cast<float>());\n  setEigenvalue(index, eigen_value.cast<float>());\n}\n\nEigen::Vector3f Ndt3Tile::getMean(int index) const {}\nEigen::Matrix3f Ndt3Tile::getCovariance(int index) const {}\nfloat Ndt3Tile::getCount(int index) const {}\nfloat Ndt3Tile::getScale(int index) const {}\nEigen::Vector3f Ndt3Tile::getNormal(int index) const {}\nEigen::Vector3f Ndt3Tile::getEigenvalue(int index) const {}\nfloat Ndt3Tile::getIntensity(int index) const {}\nbool Ndt3Tile::setMean(int index, const Eigen::Vector3f& mean) {}\nbool Ndt3Tile::setCovariance(int index, const Eigen::Matrix3f& covariance) {}\nbool Ndt3Tile::setCount(int index, float count) {}\nbool Ndt3Tile::setScale(int index, float scale) {}\nbool Ndt3Tile::setNormal(int index, const Eigen::Vector3f& normal) {}\nbool Ndt3Tile::setEigenvalue(int index, const Eigen::Vector3f& eigenvalue) {}\nbool Ndt3Tile::setIntensity(int index, float intensity) {}\nvoid Ndt3Tile::initializeGaussian(const Eigen::Vector3f& mean, const Eigen::Matrix3f& covariance,\n                                  int count, float scale) {}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/ndt3tile.cpp"
		}
	}
]
I0403 15:03:44.421519  5980 json_parser.cpp:18] 
[
	2,
	{
		"bufnr" : 3,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/ndt3tile.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#include \"ndt3tile.h\"\n\nnamespace allride {\nnamespace mapping {\n\n// clang-format off\nconst std::vector<TileDataStorage::NameSizePair> Ndt3Tile::kChannelNameAndSize = {\n  TileDataStorage::NameSizePair(\"mean\", 3),\n  TileDataStorage::NameSizePair(\"covariance\", 6),\n  TileDataStorage::NameSizePair(\"normal\", 3),\n  TileDataStorage::NameSizePair(\"eigenvalue\", 3),\n  TileDataStorage::NameSizePair(\"count\", 1),\n  TileDataStorage::NameSizePair(\"scale\", 1),\n  TileDataStorage::NameSizePair(\"intensity\", 1),\n};\n// clang-format on\n\nconst int Ndt3Tile::kTotalNumberOfRows = 18;\n\nNdt3Tile::Ndt3Tile(float grid_size) {\n  storage_ = std::shared_ptr<TileDataStorage>(new TileDataStorage(kChannelNameAndSize));\n  grid_size_ = grid_size;\n}\n\nNdt3Tile::Ndt3Tile(float grid_size, std::shared_ptr<TileDataStorage> storage) {\n  storage_ = storage;\n  grid_size_ = grid_size;\n}\n\nstd::shared_ptr<Ndt3Interface::MapMatrixArray> Ndt3Tile::getMeans() const {\n  std::shared_ptr<MapMatrixArray> map_matrix_array(new MapMatrixArray());\n\n  map_matrix_array->emplace_back(getMeansInner());\n  return map_matrix_array;\n}\n\nstd::shared_ptr<Ndt3Interface::MapMatrixArray> Ndt3Tile::getCovariances() const {\n  std::shared_ptr<MapMatrixArray> map_matrix_array(new MapMatrixArray());\n\n  map_matrix_array->emplace_back(getCovariancesInner());\n  return map_matrix_array;\n}\n\nstd::shared_ptr<Ndt3Interface::MapMatrixArray> Ndt3Tile::getNormals() const {\n  std::shared_ptr<MapMatrixArray> map_matrix_array(new MapMatrixArray());\n\n  map_matrix_array->emplace_back(getNormalsInner());\n  return map_matrix_array;\n}\n\nstd::shared_ptr<Ndt3Interface::MapMatrixArray> Ndt3Tile::getEigenvalues() const {\n  std::shared_ptr<MapMatrixArray> map_matrix_array(new MapMatrixArray());\n\n  map_matrix_array->emplace_back(getEigenvaluesInner());\n  return map_matrix_array;\n}\n\nstd::shared_ptr<Ndt3Interface::MapMatrixArray> Ndt3Tile::getCounts() const {\n  std::shared_ptr<MapMatrixArray> map_matrix_array(new MapMatrixArray());\n\n  map_matrix_array->emplace_back(getCountsInner());\n  return map_matrix_array;\n}\n\nstd::shared_ptr<Ndt3Interface::MapMatrixArray> Ndt3Tile::getScales() const {\n  std::shared_ptr<MapMatrixArray> map_matrix_array(new MapMatrixArray());\n\n  map_matrix_array->emplace_back(getScalesInner());\n  return map_matrix_array;\n}\n\nstd::shared_ptr<Ndt3Interface::MapMatrixArray> Ndt3Tile::getIntensities() const {\n  std::shared_ptr<MapMatrixArray> map_matrix_array(new MapMatrixArray());\n\n  map_matrix_array->emplace_back(getIntensitiesInner());\n  return map_matrix_array;\n}\n\nbool Ndt3Tile::getMean(const Eigen::Vector3f& pos, Eigen::Vector3f* mean) const {\n  int index = -1;\n  if (!getIndex(pos, &index)) {\n    return false;\n  }\n\n  if (nullptr != mean) {\n    *mean = getMeansInner().block<3, 1>(0, index);\n  }\n\n  return true;\n}\n\nbool Ndt3Tile::getCovariance(const Eigen::Vector3f& pos, Eigen::Matrix3f* cov) const {\n  int index = -1;\n  if (!getIndex(pos, &index)) {\n    return false;\n  }\n\n  TileDataStorage::MapMatrix covariances = getCovariancesInner();\n\n  // clang-format off\n  if (nullptr != cov) {\n    (*cov) <<covariances(0, index), covariances(1, index), covariances(2, index),\n             covariances(1, index), covariances(3, index), covariances(4, index),\n             covariances(2, index), covariances(4, index), covariances(5, index);\n  }\n  // clang-format on\n\n  return true;\n}\n\nbool Ndt3Tile::getCount(const Eigen::Vector3f& pos, float* count) const {\n  int index = -1;\n  if (!getIndex(pos, &index)) {\n    return false;\n  }\n\n  if (nullptr != count) {\n    *count = getCountsInner()(0, index);\n  }\n\n  return true;\n}\n\nbool Ndt3Tile::getScale(const Eigen::Vector3f& pos, float* scale) const {\n  int index = -1;\n  if (!getIndex(pos, &index)) {\n    return false;\n  }\n\n  if (nullptr != scale) {\n    *scale = getScalesInner()(0, index);\n  }\n\n  return true;\n}\n\nbool Ndt3Tile::getNormal(const Eigen::Vector3f& pos, Eigen::Vector3f* normal) const {\n  int index = -1;\n  if (!getIndex(pos, &index)) {\n    return false;\n  }\n\n  if (nullptr != normal) {\n    *normal = getNormalsInner().block<3, 1>(0, index);\n  }\n\n  return true;\n}\n\nbool Ndt3Tile::getEigenvalue(const Eigen::Vector3f& pos, Eigen::Vector3f* eigen) const {\n  int index = -1;\n  if (!getIndex(pos, &index)) {\n    return false;\n  }\n\n  if (nullptr != eigen) {\n    *eigen = getEigenvaluesInner().block<3, 1>(0, index);\n  }\n\n  return true;\n}\n\nbool Ndt3Tile::getIntensity(const Eigen::Vector3f& pos, float* intensity) const {\n  int index = -1;\n  if (!getIndex(pos, &index)) {\n    return false;\n  }\n\n  if (nullptr != intensity) {\n    *intensity = getIntensitiesInner()(0, index);\n  }\n\n  return true;\n}\n\nvoid Ndt3Tile::addSample(const common::PointXYZI& sample) {\n  Eigen::Vector3f pos(sample.x, sample.y, sample.z);\n  float intensity_new = sample.intensity;\n\n  int index = -1;\n  if (!getIndex(pos, &index)) {\n    index = storage_->getColumnSize();\n    initializeGaussian(pos, Eigen::Matrix3f::Zero(), 1, grid_size_);\n    storage_->gridToIndexMapping()[getGridID(pos)] = index;\n    indices_to_compute_normal_.insert(index);\n    return;\n  }\n\n  float count = getCount(index);\n  float intensity = getIntensity(index);\n  Eigen::Vector3f mean = getMean(index);\n  Eigen::Matrix3f cov = getCovariance(index);\n\n  ++count;\n\n  float w = 1.0 / count;\n\n  intensity += w * (intensity_new - intensity);\n\n  Eigen::Vector3f r = pos - mean;\n  mean += w * r;\n  cov = (1.0 - w) * (cov + w * (r * r.transpose()));\n\n  setCount(index, count);\n  setIntensity(index, intensity);\n  setMean(index, mean);\n  setCovariance(index, cov);\n\n  indices_to_compute_normal_.insert(index);\n}\n\nvoid Ndt3Tile::addGaussian(const Eigen::Vector3f& mean, const Eigen::Matrix3f& covariance,\n                           int count, float intensity) {\n  int index = -1;\n  if (!getIndex(mean, &index)) {\n    index = storage_->getColumnSize();\n    initializeGaussian(mean, covariance, count, grid_size_);\n    storage_->gridToIndexMapping()[getGridID(mean)] = index;\n    indices_to_compute_normal_.insert(index);\n    return;\n  }\n\n  float count_old = getCount(index);\n  float intensity_old = getIntensity(index);\n  Eigen::Vector3f mean_old = getMean(index);\n  Eigen::Matrix3f cov_old = getCovariance(index);\n\n  float count_new = count_old + count;\n\n  float w0 = count_old / count_new;\n  float w1 = 1.0 - w0;\n\n  float intensity_new = w0 * intensity_old + w1 * intensity;\n  Eigen::Vector3f mean_new = w0 * mean_old + w1 * mean;\n  Eigen::Matrix3f cov_new = w0 * cov_old + w1 * covariance +\n                            w0 * (mean_old - mean_new) * (mean_old - mean_new).transpose() +\n                            w1 * (mean - mean_new) * (mean - mean_new).transpose();\n\n  setCount(index, count_new);\n  setIntensity(index, intensity_new);\n  setMean(index, mean_new);\n  setCovariance(index, cov_new);\n\n  indices_to_compute_normal_.insert(index);\n}\n\nbool Ndt3Tile::unpackFromString(const std::string& packed_string) {\n  return storage_->unpackFromString(packed_string);\n}\n\nbool Ndt3Tile::packToString(std::string* packed_string) const {\n  if (nullptr == packed_string) {\n    return false;\n  }\n\n  return storage_->packToString(packed_string);\n}\n\n/*\nbool Ndt3Tile::buildGridIndexMapping() {\n  storage_->gridToIndexMapping().clear();\n\n  TileDataStorage::MapMatrix means = getMeansInner();\n  TileDataStorage::MapMatrix scales = getScalesInner();\n\n  for (auto i = 0; i < means.cols(); ++i) {\n    // if the grid size in database and memory are\n    // much too different(0.01mm), assume something is wrong\n    if (fabs(scales(0, i) - grid_size_) > 1e-5) {\n      return false;\n    }\n\n    storage_->gridToIndexMapping()[getGridID(means.block<3, 1>(0, i))] = i;\n  }\n\n  return true;\n}\n*/\n\nvoid Ndt3Tile::computeAllNormalsAndEigenvalues(double sensor_noise_var) {\n  for (const auto& index : indices_to_compute_normal_) {\n    computeNormalAndEigenvalues(index, sensor_noise_var, Plane);\n  }\n\n  indices_to_compute_normal_.clear();\n}\n\nvoid Ndt3Tile::computeAllPrincipalAxisAndEigenvalues(double sensor_noise_var) {\n  for (const auto& index : indices_to_compute_normal_) {\n    computeNormalAndEigenvalues(index, sensor_noise_var, Line);\n  }\n\n  indices_to_compute_normal_.clear();\n}\n\nvoid Ndt3Tile::resetRegion(const common::geometry::SE3& Tx_MP_V, double radius) {\n  int index = 0;\n  Eigen::Vector3d pos;\n  TileDataStorage::MapMatrix means = getMeansInner();\n\n  auto it = storage_->gridToIndexMapping().begin();\n  while (it != storage_->gridToIndexMapping().end()) {\n    index = it->second;\n    pos = means.block<3, 1>(0, index).cast<double>();\n    pos = Tx_MP_V.inverseTransform(pos);  // TODO: move this inverse out of while loop\n    if (pos.norm() > radius) {\n      it = storage_->gridToIndexMapping().erase(it);\n    } else {\n      ++it;\n    }\n  }\n}\n\nvoid Ndt3Tile::copy(Ndt3Tile* copy_data) const {\n  storage_->resize(storage_->gridToIndexMapping().size(), 0);\n\n  int index = 0;\n  int index_new = 0;\n\n  auto it = storage_->gridToIndexMapping().begin();\n  while (it != storage_->gridToIndexMapping().end()) {\n    index = it->second;\n    copy_data->setMean(index_new, getMean(index));\n    copy_data->setCovariance(index_new, getCovariance(index));\n    copy_data->setNormal(index_new, getNormal(index));\n    copy_data->setEigenvalue(index_new, getEigenvalue(index));\n    copy_data->setCount(index_new, getCount(index));\n    copy_data->setScale(index_new, getScale(index));\n    copy_data->setIntensity(index_new, getIntensity(index));\n    copy_data->storage_->gridToIndexMapping()[it->first] = index_new;\n    ++index_new;\n    ++it;\n  }\n}\n\nvoid Ndt3Tile::copyAndTransform(const common::geometry::SE3& Tx, double radius,\n                                Ndt3Tile* copy_data) const {\n  storage_->resize(storage_->gridToIndexMapping().size(), 0);\n\n  float scale = 0;\n  int index = 0;\n  int index_new = 0;\n  TileDataStorage::GridID grid_id_new;\n\n  Eigen::Vector3f mean;\n  Eigen::Vector3f normal;\n  Eigen::Matrix3f cov;\n  Eigen::Matrix3f rot = Tx.getSO3().getRotationMatrix().transpose().cast<float>();\n\n  auto it = storage_->gridToIndexMapping().begin();\n  while (it != storage_->gridToIndexMapping().end()) {\n    index = it->second;\n    // TODO: move this inverse out of while loop\n    mean = Tx.inverseTransform(getMean(index).cast<double>()).cast<float>();\n    if (mean.norm() < radius) {\n      cov = rot * getCovariance(index) * rot.transpose();\n      normal = rot * getNormal(index);\n      scale = getScale(index);\n      grid_id_new = getGridID(mean, scale);\n\n      copy_data->setMean(index_new, mean);\n      copy_data->setCovariance(index_new, cov);\n      copy_data->setNormal(index_new, normal);\n      copy_data->setEigenvalue(index_new, getEigenvalue(index));\n      copy_data->setCount(index_new, getCount(index));\n      copy_data->setScale(index_new, scale);\n      copy_data->setIntensity(index_new, getIntensity(index));\n      copy_data->storage_->gridToIndexMapping()[grid_id_new] = index_new;\n      ++index_new;\n    }\n    ++it;\n  }\n}\n\n/* comment out for temporary compilation\nbool Ndt3Tile::toRosMsgPointCloud2(const std::string& frame, const Time& time,\n                                   sensor_msgs::PointCloud2* point_cloud,\n                                   const geometry::SE3& Tx = geometry::SE3()) const {}\n                                   */\n\n// ---------------------------------\n// private & protected methods below\n// ---------------------------------\n\nTileDataStorage::MapMatrix Ndt3Tile::getMeansInner() const {\n  TileDataStorage::MapMatrix data(nullptr, 0, 0, Eigen::OuterStride<>(0));\n  storage_->getChannel(0, 3, &data);\n  return data;\n}\n\nTileDataStorage::MapMatrix Ndt3Tile::getCovariancesInner() const {\n  TileDataStorage::MapMatrix data(nullptr, 0, 0, Eigen::OuterStride<>(0));\n  storage_->getChannel(3, 6, &data);\n  return data;\n}\n\nTileDataStorage::MapMatrix Ndt3Tile::getCountsInner() const {\n  TileDataStorage::MapMatrix data(nullptr, 0, 0, Eigen::OuterStride<>(0));\n  storage_->getChannel(15, 1, &data);\n  return data;\n}\n\nTileDataStorage::MapMatrix Ndt3Tile::getScalesInner() const {\n  TileDataStorage::MapMatrix data(nullptr, 0, 0, Eigen::OuterStride<>(0));\n  storage_->getChannel(16, 1, &data);\n  return data;\n}\n\nTileDataStorage::MapMatrix Ndt3Tile::getNormalsInner() const {\n  TileDataStorage::MapMatrix data(nullptr, 0, 0, Eigen::OuterStride<>(0));\n  storage_->getChannel(9, 3, &data);\n  return data;\n}\n\nTileDataStorage::MapMatrix Ndt3Tile::getEigenvaluesInner() const {\n  TileDataStorage::MapMatrix data(nullptr, 0, 0, Eigen::OuterStride<>(0));\n  storage_->getChannel(12, 3, &data);\n  return data;\n}\n\nTileDataStorage::MapMatrix Ndt3Tile::getIntensitiesInner() const {\n  TileDataStorage::MapMatrix data(nullptr, 0, 0, Eigen::OuterStride<>(0));\n  storage_->getChannel(17, 1, &data);\n  return data;\n}\n\nTileDataStorage::GridID Ndt3Tile::getGridID(const Eigen::Vector3f& pos) const {\n  return getGridID(pos, grid_size_);\n}\n\nTileDataStorage::GridID Ndt3Tile::getGridID(const Eigen::Vector3f& pos, float grid_size) const {\n  int grid_size_log2;\n  frexp(grid_size, &grid_size_log2);\n  const TileDataStorage::GridID id_x = static_cast<int16_t>(floor(pos.x() / grid_size));\n  const TileDataStorage::GridID id_y = static_cast<int16_t>(floor(pos.y() / grid_size));\n  const TileDataStorage::GridID id_z = static_cast<int16_t>(floor(pos.z() / grid_size));\n  const TileDataStorage::GridID id_s = static_cast<int16_t>(grid_size_log2);\n\n  return (id_x << 48) + (id_y << 32) + (id_z << 16) + (id_s << 0);\n}\n\nbool Ndt3Tile::getIndex(const Eigen::Vector3f& pos, int* index) const {\n  if (nullptr == index) {\n    return false;\n  }\n\n  const auto& i = storage_->gridToIndexMapping().find(getGridID(pos));\n  if (i != storage_->gridToIndexMapping().end()) {\n    *index = i->second;\n    return true;\n  } else {\n    *index = -1;\n    return false;\n  }\n}\n\nvoid Ndt3Tile::computeNormalAndEigenvalues(int index, double sensor_noise_var,\n                                           NormalType normal_type) {\n  Eigen::Matrix3d cov = getCovariance(index).cast<double>();\n  cov += Eigen::Matrix3d::Identity() * sensor_noise_var;\n\n  setNormal(index, Eigen::Vector3f::Zero());\n  setEigenvalue(index, Eigen::Vector3f::Zero());\n\n  Eigen::SelfAdjointEigenSolver<Eigen::Matrix3d> solver(cov);\n  if (solver.info() != Eigen::Success) {\n    // VERROR(\"Falied to do eigen  decomposition.\");\n    return;\n  }\n\n  Eigen::Vector3d eigen_value = solver.eigenvalues();\n  Eigen::Matrix3d eigen_vectors = solver.eigenvectors();\n\n  double fitness = 0;\n  Eigen::Vector3d normal = Eigen::Vector3d::Zero();\n\n  switch (normal_type) {\n    case Plane:\n      normal = eigen_vectors.col(2);\n      // Planarity\n      fitness = 2.0f * (eigen_value(1) - eigen_value(0)) / eigen_value.sum();\n      break;\n    case Line:\n      normal = eigen_vectors.col(2);\n      // Lineariry\n      fitness = 1.0f - fabs(eigen_value(1) / eigen_value(2));\n      break;\n    default:\n      return;\n  }\n\n  setNormal(index, (normal * fitness).cast<float>());\n  setEigenvalue(index, eigen_value.cast<float>());\n}\n\nEigen::Vector3f Ndt3Tile::getMean(int index) const {}\nEigen::Matrix3f Ndt3Tile::getCovariance(int index) const {}\nfloat Ndt3Tile::getCount(int index) const {}\nfloat Ndt3Tile::getScale(int index) const {}\nEigen::Vector3f Ndt3Tile::getNormal(int index) const {}\nEigen::Vector3f Ndt3Tile::getEigenvalue(int index) const {}\nfloat Ndt3Tile::getIntensity(int index) const {}\nbool Ndt3Tile::setMean(int index, const Eigen::Vector3f& mean) {}\nbool Ndt3Tile::setCovariance(int index, const Eigen::Matrix3f& covariance) {}\nbool Ndt3Tile::setCount(int index, float count) {}\nbool Ndt3Tile::setScale(int index, float scale) {}\nbool Ndt3Tile::setNormal(int index, const Eigen::Vector3f& normal) {}\nbool Ndt3Tile::setEigenvalue(int index, const Eigen::Vector3f& eigenvalue) {}\nbool Ndt3Tile::setIntensity(int index, float intensity) {}\nvoid Ndt3Tile::initializeGaussian(const Eigen::Vector3f& mean, const Eigen::Matrix3f& covariance,\n                                  int count, float scale) {}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/ndt3tile.cpp"
		}
	}
]
I0403 15:03:47.389693  5980 json_parser.cpp:18] 
[
	3,
	{
		"bufnr" : 3,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/ndt3tile.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#include \"ndt3tile.h\"\n\nnamespace allride {\nnamespace mapping {\n\n// clang-format off\nconst std::vector<TileDataStorage::NameSizePair> Ndt3Tile::kChannelNameAndSize = {\n  TileDataStorage::NameSizePair(\"mean\", 3),\n  TileDataStorage::NameSizePair(\"covariance\", 6),\n  TileDataStorage::NameSizePair(\"normal\", 3),\n  TileDataStorage::NameSizePair(\"eigenvalue\", 3),\n  TileDataStorage::NameSizePair(\"count\", 1),\n  TileDataStorage::NameSizePair(\"scale\", 1),\n  TileDataStorage::NameSizePair(\"intensity\", 1),\n};\n// clang-format on\n\nconst int Ndt3Tile::kTotalNumberOfRows = 18;\n\nNdt3Tile::Ndt3Tile(float grid_size) {\n  storage_ = std::shared_ptr<TileDataStorage>(new TileDataStorage(kChannelNameAndSize));\n  grid_size_ = grid_size;\n}\n\nNdt3Tile::Ndt3Tile(float grid_size, std::shared_ptr<TileDataStorage> storage) {\n  storage_ = storage;\n  grid_size_ = grid_size;\n}\n\nstd::shared_ptr<Ndt3Interface::MapMatrixArray> Ndt3Tile::getMeans() const {\n  std::shared_ptr<MapMatrixArray> map_matrix_array(new MapMatrixArray());\n\n  map_matrix_array->emplace_back(getMeansInner());\n  return map_matrix_array;\n}\n\nstd::shared_ptr<Ndt3Interface::MapMatrixArray> Ndt3Tile::getCovariances() const {\n  std::shared_ptr<MapMatrixArray> map_matrix_array(new MapMatrixArray());\n\n  map_matrix_array->emplace_back(getCovariancesInner());\n  return map_matrix_array;\n}\n\nstd::shared_ptr<Ndt3Interface::MapMatrixArray> Ndt3Tile::getNormals() const {\n  std::shared_ptr<MapMatrixArray> map_matrix_array(new MapMatrixArray());\n\n  map_matrix_array->emplace_back(getNormalsInner());\n  return map_matrix_array;\n}\n\nstd::shared_ptr<Ndt3Interface::MapMatrixArray> Ndt3Tile::getEigenvalues() const {\n  std::shared_ptr<MapMatrixArray> map_matrix_array(new MapMatrixArray());\n\n  map_matrix_array->emplace_back(getEigenvaluesInner());\n  return map_matrix_array;\n}\n\nstd::shared_ptr<Ndt3Interface::MapMatrixArray> Ndt3Tile::getCounts() const {\n  std::shared_ptr<MapMatrixArray> map_matrix_array(new MapMatrixArray());\n\n  map_matrix_array->emplace_back(getCountsInner());\n  return map_matrix_array;\n}\n\nstd::shared_ptr<Ndt3Interface::MapMatrixArray> Ndt3Tile::getScales() const {\n  std::shared_ptr<MapMatrixArray> map_matrix_array(new MapMatrixArray());\n\n  map_matrix_array->emplace_back(getScalesInner());\n  return map_matrix_array;\n}\n\nstd::shared_ptr<Ndt3Interface::MapMatrixArray> Ndt3Tile::getIntensities() const {\n  std::shared_ptr<MapMatrixArray> map_matrix_array(new MapMatrixArray());\n\n  map_matrix_array->emplace_back(getIntensitiesInner());\n  return map_matrix_array;\n}\n\nbool Ndt3Tile::getMean(const Eigen::Vector3f& pos, Eigen::Vector3f* mean) const {\n  int index = -1;\n  if (!getIndex(pos, &index)) {\n    return false;\n  }\n\n  if (nullptr != mean) {\n    *mean = getMeansInner().block<3, 1>(0, index);\n  }\n\n  return true;\n}\n\nbool Ndt3Tile::getCovariance(const Eigen::Vector3f& pos, Eigen::Matrix3f* cov) const {\n  int index = -1;\n  if (!getIndex(pos, &index)) {\n    return false;\n  }\n\n  TileDataStorage::MapMatrix covariances = getCovariancesInner();\n\n  // clang-format off\n  if (nullptr != cov) {\n    (*cov) <<covariances(0, index), covariances(1, index), covariances(2, index),\n             covariances(1, index), covariances(3, index), covariances(4, index),\n             covariances(2, index), covariances(4, index), covariances(5, index);\n  }\n  // clang-format on\n\n  return true;\n}\n\nbool Ndt3Tile::getCount(const Eigen::Vector3f& pos, float* count) const {\n  int index = -1;\n  if (!getIndex(pos, &index)) {\n    return false;\n  }\n\n  if (nullptr != count) {\n    *count = getCountsInner()(0, index);\n  }\n\n  return true;\n}\n\nbool Ndt3Tile::getScale(const Eigen::Vector3f& pos, float* scale) const {\n  int index = -1;\n  if (!getIndex(pos, &index)) {\n    return false;\n  }\n\n  if (nullptr != scale) {\n    *scale = getScalesInner()(0, index);\n  }\n\n  return true;\n}\n\nbool Ndt3Tile::getNormal(const Eigen::Vector3f& pos, Eigen::Vector3f* normal) const {\n  int index = -1;\n  if (!getIndex(pos, &index)) {\n    return false;\n  }\n\n  if (nullptr != normal) {\n    *normal = getNormalsInner().block<3, 1>(0, index);\n  }\n\n  return true;\n}\n\nbool Ndt3Tile::getEigenvalue(const Eigen::Vector3f& pos, Eigen::Vector3f* eigen) const {\n  int index = -1;\n  if (!getIndex(pos, &index)) {\n    return false;\n  }\n\n  if (nullptr != eigen) {\n    *eigen = getEigenvaluesInner().block<3, 1>(0, index);\n  }\n\n  return true;\n}\n\nbool Ndt3Tile::getIntensity(const Eigen::Vector3f& pos, float* intensity) const {\n  int index = -1;\n  if (!getIndex(pos, &index)) {\n    return false;\n  }\n\n  if (nullptr != intensity) {\n    *intensity = getIntensitiesInner()(0, index);\n  }\n\n  return true;\n}\n\nvoid Ndt3Tile::addSample(const common::PointXYZI& sample) {\n  Eigen::Vector3f pos(sample.x, sample.y, sample.z);\n  float intensity_new = sample.intensity;\n\n  int index = -1;\n  if (!getIndex(pos, &index)) {\n    index = storage_->getColumnSize();\n    initializeGaussian(pos, Eigen::Matrix3f::Zero(), 1, grid_size_);\n    storage_->gridToIndexMapping()[getGridID(pos)] = index;\n    indices_to_compute_normal_.insert(index);\n    return;\n  }\n\n  float count = getCount(index);\n  float intensity = getIntensity(index);\n  Eigen::Vector3f mean = getMean(index);\n  Eigen::Matrix3f cov = getCovariance(index);\n\n  ++count;\n\n  float w = 1.0 / count;\n\n  intensity += w * (intensity_new - intensity);\n\n  Eigen::Vector3f r = pos - mean;\n  mean += w * r;\n  cov = (1.0 - w) * (cov + w * (r * r.transpose()));\n\n  setCount(index, count);\n  setIntensity(index, intensity);\n  setMean(index, mean);\n  setCovariance(index, cov);\n\n  indices_to_compute_normal_.insert(index);\n}\n\nvoid Ndt3Tile::addGaussian(const Eigen::Vector3f& mean, const Eigen::Matrix3f& covariance,\n                           int count, float intensity) {\n  int index = -1;\n  if (!getIndex(mean, &index)) {\n    index = storage_->getColumnSize();\n    initializeGaussian(mean, covariance, count, grid_size_);\n    storage_->gridToIndexMapping()[getGridID(mean)] = index;\n    indices_to_compute_normal_.insert(index);\n    return;\n  }\n\n  float count_old = getCount(index);\n  float intensity_old = getIntensity(index);\n  Eigen::Vector3f mean_old = getMean(index);\n  Eigen::Matrix3f cov_old = getCovariance(index);\n\n  float count_new = count_old + count;\n\n  float w0 = count_old / count_new;\n  float w1 = 1.0 - w0;\n\n  float intensity_new = w0 * intensity_old + w1 * intensity;\n  Eigen::Vector3f mean_new = w0 * mean_old + w1 * mean;\n  Eigen::Matrix3f cov_new = w0 * cov_old + w1 * covariance +\n                            w0 * (mean_old - mean_new) * (mean_old - mean_new).transpose() +\n                            w1 * (mean - mean_new) * (mean - mean_new).transpose();\n\n  setCount(index, count_new);\n  setIntensity(index, intensity_new);\n  setMean(index, mean_new);\n  setCovariance(index, cov_new);\n\n  indices_to_compute_normal_.insert(index);\n}\n\nbool Ndt3Tile::unpackFromString(const std::string& packed_string) {\n  return storage_->unpackFromString(packed_string);\n}\n\nbool Ndt3Tile::packToString(std::string* packed_string) const {\n  if (nullptr == packed_string) {\n    return false;\n  }\n\n  return storage_->packToString(packed_string);\n}\n\n/*\nbool Ndt3Tile::buildGridIndexMapping() {\n  storage_->gridToIndexMapping().clear();\n\n  TileDataStorage::MapMatrix means = getMeansInner();\n  TileDataStorage::MapMatrix scales = getScalesInner();\n\n  for (auto i = 0; i < means.cols(); ++i) {\n    // if the grid size in database and memory are\n    // much too different(0.01mm), assume something is wrong\n    if (fabs(scales(0, i) - grid_size_) > 1e-5) {\n      return false;\n    }\n\n    storage_->gridToIndexMapping()[getGridID(means.block<3, 1>(0, i))] = i;\n  }\n\n  return true;\n}\n*/\n\nvoid Ndt3Tile::computeAllNormalsAndEigenvalues(double sensor_noise_var) {\n  for (const auto& index : indices_to_compute_normal_) {\n    computeNormalAndEigenvalues(index, sensor_noise_var, Plane);\n  }\n\n  indices_to_compute_normal_.clear();\n}\n\nvoid Ndt3Tile::computeAllPrincipalAxisAndEigenvalues(double sensor_noise_var) {\n  for (const auto& index : indices_to_compute_normal_) {\n    computeNormalAndEigenvalues(index, sensor_noise_var, Line);\n  }\n\n  indices_to_compute_normal_.clear();\n}\n\nvoid Ndt3Tile::resetRegion(const common::geometry::SE3& Tx_MP_V, double radius) {\n  int index = 0;\n  Eigen::Vector3d pos;\n  TileDataStorage::MapMatrix means = getMeansInner();\n\n  auto it = storage_->gridToIndexMapping().begin();\n  while (it != storage_->gridToIndexMapping().end()) {\n    index = it->second;\n    pos = means.block<3, 1>(0, index).cast<double>();\n    pos = Tx_MP_V.inverseTransform(pos);  // TODO: move this inverse out of while loop\n    if (pos.norm() > radius) {\n      it = storage_->gridToIndexMapping().erase(it);\n    } else {\n      ++it;\n    }\n  }\n}\n\nvoid Ndt3Tile::copy(Ndt3Tile* copy_data) const {\n  storage_->resize(storage_->gridToIndexMapping().size(), 0);\n\n  int index = 0;\n  int index_new = 0;\n\n  auto it = storage_->gridToIndexMapping().begin();\n  while (it != storage_->gridToIndexMapping().end()) {\n    index = it->second;\n    copy_data->setMean(index_new, getMean(index));\n    copy_data->setCovariance(index_new, getCovariance(index));\n    copy_data->setNormal(index_new, getNormal(index));\n    copy_data->setEigenvalue(index_new, getEigenvalue(index));\n    copy_data->setCount(index_new, getCount(index));\n    copy_data->setScale(index_new, getScale(index));\n    copy_data->setIntensity(index_new, getIntensity(index));\n    copy_data->storage_->gridToIndexMapping()[it->first] = index_new;\n    ++index_new;\n    ++it;\n  }\n}\n\nvoid Ndt3Tile::copyAndTransform(const common::geometry::SE3& Tx, double radius,\n                                Ndt3Tile* copy_data) const {\n  storage_->resize(storage_->gridToIndexMapping().size(), 0);\n\n  float scale = 0;\n  int index = 0;\n  int index_new = 0;\n  TileDataStorage::GridID grid_id_new;\n\n  Eigen::Vector3f mean;\n  Eigen::Vector3f normal;\n  Eigen::Matrix3f cov;\n  Eigen::Matrix3f rot = Tx.getSO3().getRotationMatrix().transpose().cast<float>();\n\n  auto it = storage_->gridToIndexMapping().begin();\n  while (it != storage_->gridToIndexMapping().end()) {\n    index = it->second;\n    // TODO: move this inverse out of while loop\n    mean = Tx.inverseTransform(getMean(index).cast<double>()).cast<float>();\n    if (mean.norm() < radius) {\n      cov = rot * getCovariance(index) * rot.transpose();\n      normal = rot * getNormal(index);\n      scale = getScale(index);\n      grid_id_new = getGridID(mean, scale);\n\n      copy_data->setMean(index_new, mean);\n      copy_data->setCovariance(index_new, cov);\n      copy_data->setNormal(index_new, normal);\n      copy_data->setEigenvalue(index_new, getEigenvalue(index));\n      copy_data->setCount(index_new, getCount(index));\n      copy_data->setScale(index_new, scale);\n      copy_data->setIntensity(index_new, getIntensity(index));\n      copy_data->storage_->gridToIndexMapping()[grid_id_new] = index_new;\n      ++index_new;\n    }\n    ++it;\n  }\n}\n\n/* comment out for temporary compilation\nbool Ndt3Tile::toRosMsgPointCloud2(const std::string& frame, const Time& time,\n                                   sensor_msgs::PointCloud2* point_cloud,\n                                   const geometry::SE3& Tx = geometry::SE3()) const {}\n                                   */\n\n// ---------------------------------\n// private & protected methods below\n// ---------------------------------\n\nTileDataStorage::MapMatrix Ndt3Tile::getMeansInner() const {\n  TileDataStorage::MapMatrix data(nullptr, 0, 0, Eigen::OuterStride<>(0));\n  storage_->getChannel(0, 3, &data);\n  return data;\n}\n\nTileDataStorage::MapMatrix Ndt3Tile::getCovariancesInner() const {\n  TileDataStorage::MapMatrix data(nullptr, 0, 0, Eigen::OuterStride<>(0));\n  storage_->getChannel(3, 6, &data);\n  return data;\n}\n\nTileDataStorage::MapMatrix Ndt3Tile::getCountsInner() const {\n  TileDataStorage::MapMatrix data(nullptr, 0, 0, Eigen::OuterStride<>(0));\n  storage_->getChannel(15, 1, &data);\n  return data;\n}\n\nTileDataStorage::MapMatrix Ndt3Tile::getScalesInner() const {\n  TileDataStorage::MapMatrix data(nullptr, 0, 0, Eigen::OuterStride<>(0));\n  storage_->getChannel(16, 1, &data);\n  return data;\n}\n\nTileDataStorage::MapMatrix Ndt3Tile::getNormalsInner() const {\n  TileDataStorage::MapMatrix data(nullptr, 0, 0, Eigen::OuterStride<>(0));\n  storage_->getChannel(9, 3, &data);\n  return data;\n}\n\nTileDataStorage::MapMatrix Ndt3Tile::getEigenvaluesInner() const {\n  TileDataStorage::MapMatrix data(nullptr, 0, 0, Eigen::OuterStride<>(0));\n  storage_->getChannel(12, 3, &data);\n  return data;\n}\n\nTileDataStorage::MapMatrix Ndt3Tile::getIntensitiesInner() const {\n  TileDataStorage::MapMatrix data(nullptr, 0, 0, Eigen::OuterStride<>(0));\n  storage_->getChannel(17, 1, &data);\n  return data;\n}\n\nTileDataStorage::GridID Ndt3Tile::getGridID(const Eigen::Vector3f& pos) const {\n  return getGridID(pos, grid_size_);\n}\n\nTileDataStorage::GridID Ndt3Tile::getGridID(const Eigen::Vector3f& pos, float grid_size) const {\n  int grid_size_log2;\n  frexp(grid_size, &grid_size_log2);\n  const TileDataStorage::GridID id_x = static_cast<int16_t>(floor(pos.x() / grid_size));\n  const TileDataStorage::GridID id_y = static_cast<int16_t>(floor(pos.y() / grid_size));\n  const TileDataStorage::GridID id_z = static_cast<int16_t>(floor(pos.z() / grid_size));\n  const TileDataStorage::GridID id_s = static_cast<int16_t>(grid_size_log2);\n\n  return (id_x << 48) + (id_y << 32) + (id_z << 16) + (id_s << 0);\n}\n\nbool Ndt3Tile::getIndex(const Eigen::Vector3f& pos, int* index) const {\n  if (nullptr == index) {\n    return false;\n  }\n\n  const auto& i = storage_->gridToIndexMapping().find(getGridID(pos));\n  if (i != storage_->gridToIndexMapping().end()) {\n    *index = i->second;\n    return true;\n  } else {\n    *index = -1;\n    return false;\n  }\n}\n\nvoid Ndt3Tile::computeNormalAndEigenvalues(int index, double sensor_noise_var,\n                                           NormalType normal_type) {\n  Eigen::Matrix3d cov = getCovariance(index).cast<double>();\n  cov += Eigen::Matrix3d::Identity() * sensor_noise_var;\n\n  setNormal(index, Eigen::Vector3f::Zero());\n  setEigenvalue(index, Eigen::Vector3f::Zero());\n\n  Eigen::SelfAdjointEigenSolver<Eigen::Matrix3d> solver(cov);\n  if (solver.info() != Eigen::Success) {\n    // VERROR(\"Falied to do eigen  decomposition.\");\n    return;\n  }\n\n  Eigen::Vector3d eigen_value = solver.eigenvalues();\n  Eigen::Matrix3d eigen_vectors = solver.eigenvectors();\n\n  double fitness = 0;\n  Eigen::Vector3d normal = Eigen::Vector3d::Zero();\n\n  switch (normal_type) {\n    case Plane:\n      normal = eigen_vectors.col(2);\n      // Planarity\n      fitness = 2.0f * (eigen_value(1) - eigen_value(0)) / eigen_value.sum();\n      break;\n    case Line:\n      normal = eigen_vectors.col(2);\n      // Lineariry\n      fitness = 1.0f - fabs(eigen_value(1) / eigen_value(2));\n      break;\n    default:\n      return;\n  }\n\n  setNormal(index, (normal * fitness).cast<float>());\n  setEigenvalue(index, eigen_value.cast<float>());\n}\n\nEigen::Vector3f Ndt3Tile::getMean(int index) const {}\nEigen::Matrix3f Ndt3Tile::getCovariance(int index) const {}\nfloat Ndt3Tile::getCount(int index) const {}\nfloat Ndt3Tile::getScale(int index) const {}\nEigen::Vector3f Ndt3Tile::getNormal(int index) const {}\nEigen::Vector3f Ndt3Tile::getEigenvalue(int index) const {}\nfloat Ndt3Tile::getIntensity(int index) const {}\nbool Ndt3Tile::setMean(int index, const Eigen::Vector3f& mean) {}\nbool Ndt3Tile::setCovariance(int index, const Eigen::Matrix3f& covariance) {}\nbool Ndt3Tile::setCount(int index, float count) {}\nbool Ndt3Tile::setScale(int index, float scale) {}\nbool Ndt3Tile::setNormal(int index, const Eigen::Vector3f& normal) {}\nbool Ndt3Tile::setEigenvalue(int index, const Eigen::Vector3f& eigenvalue) {}\nbool Ndt3Tile::setIntensity(int index, float intensity) {}\nvoid Ndt3Tile::initializeGaussian(const Eigen::Vector3f& mean, const Eigen::Matrix3f& covariance,\n                                  int count, float scale) {}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/ndt3tile.cpp"
		}
	}
]
I0403 15:04:01.605921  5980 json_parser.cpp:18] 
[
	4,
	{
		"bufnr" : 6,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_online.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include \"common/geometry/se3.h\"\n#include \"common/math/point_types.h\"\n\n#include \"lidar_map.h\"\n#include \"ndt3tile.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass LidarMapOnline : public LidarMap {\n public:\n  /// @brief set pose(relative to global map) of the local map\n  ///\n  /// @param[in] Tx_MP_map is the origin to be set\n  void setMapOrigin(const common::geometry::SE3& Tx_MP_map);\n\n  /// @brief get pose(relative to global map) of the local map\n  ///\n  /// @return the origin of the local map\n  common::geometry::SE3 getMapOrigin();\n\n  /// @brief reset the local map to a new region\n  ///\n  /// @param[in] Tx_MP_V is the region center\n  ///\n  /// @param[in] radius is the region radius\n  void resetMapRegion(const common::geometry::SE3& Tx_MP_V, double radius);\n\n  /// @brief implemention of LidarMap::initializeLayer\n  ///\n  /// @see LidarMap for more infomation\n  bool initializeLayer(int layer_id) override;\n\n  /// @brief implemention of LidarMap::addPointCloud\n  ///\n  /// @see LidarMap for more infomation\n  bool addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) override;\n\n  /// @brief get map of specific layer\n  ///\n  /// @param layer_id[in] specify which layer to get\n  /// @param ndt3[out] store the got map data\n  ///\n  /// @return true on succeed, else false\n  bool getMap(int layer_id, std::shared_ptr<Ndt3Interface>* ndt3);\n\n private:\n  std::map<int, std::shared_ptr<Ndt3Tile>> ndt3_pool_;\n  common::geometry::SE3 origin_;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_online.h"
		}
	}
]
I0403 15:04:43.129133  5980 json_parser.cpp:18] 
[
	5,
	{
		"bufnr" : 6,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_online.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include \"common/geometry/se3.h\"\n#include \"common/math/point_types.h\"\n\n#include \"lidar_map.h\"\n#include \"ndt3tile.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass LidarMapOnline : public LidarMap {\n public:\n  /// @brief set pose(relative to global map) of the local map\n  ///\n  /// @param[in] Tx_MP_map is the origin to be set\n  void setMapOrigin(const common::geometry::SE3& Tx_MP_map);\n\n  /// @brief get pose(relative to global map) of the local map\n  ///\n  /// @return the origin of the local map\n  common::geometry::SE3 getMapOrigin();\n\n  /// @brief reset the local map to a new region\n  ///\n  /// @param[in] Tx_MP_V is the region center\n  ///\n  /// @param[in] radius is the region radius\n  void resetMapRegion(const common::geometry::SE3& Tx_MP_V, double radius);\n\n  /// @brief implemention of LidarMap::initializeLayer\n  ///\n  /// @see LidarMap for more infomation\n  bool initializeLayer(int layer_id) override;\n\n  /// @brief implemention of LidarMap::addPointCloud\n  ///\n  /// @see LidarMap for more infomation\n  bool addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) override;\n\n  /// @brief get map of specific layer\n  ///\n  /// @param layer_id[in] specify which layer to get\n  /// @param ndt3[out] store the got map data\n  ///\n  /// @return true on succeed, else false\n  bool getMap(int layer_id, std::shared_ptr<Ndt3Interface>* ndt3);\n\n private:\n  std::map<int, std::shared_ptr<Ndt3Tile>> ndt3_pool_;\n  common::geometry::SE3 origin_;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_online.h"
		}
	}
]
I0403 15:04:43.241631  5980 json_parser.cpp:18] 
[
	6,
	{
		"bufnr" : 7,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include \"common/math/point_types.h\"\n#include \"map_layer_dictionary_parser.h\"\n#include \"ndt3interface.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass LidarMap {\n public:\n  /// @brief configure the LidarMap class, mainly LayerID to resolution map, database path,\n  /// which are shared by all LidarMap and its decents\n  ///\n  /// @param config_file[in] the path to config file\n  ///\n  /// @return true on succeed, else false\n  ///\n  /// @note this should be called first before any operation about LidarMap\n  static bool configure(const std::string& config_file);\n\n  /// @brief initialize a layer before using it\n  ///\n  /// @param layer_id[in] specify which layer to initialize\n  ///\n  /// @return true on succeed, else false\n  virtual bool initializeLayer(int layer_id) = 0;\n\n  /// @brief add point to LidarMap on specific layer\n  ///\n  /// @param layer_id[in] specify which layer to add point cloud\n  /// @param pointcloud[in] the cloud point to add\n  ///\n  /// @return true on succeed, else false\n  virtual bool addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) = 0;\n\n protected:\n  static MapLayerDictionaryParser map_layer_dict_;\n  static std::string database_path_;\n  static int cache_range_;\n  static int cache_margin_;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map.h"
		}
	}
]
I0403 15:04:54.373049  5980 json_parser.cpp:18] 
[
	7,
	{
		"bufnr" : 7,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include \"common/math/point_types.h\"\n#include \"map_layer_dictionary_parser.h\"\n#include \"ndt3interface.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass LidarMap {\n public:\n  /// @brief configure the LidarMap class, mainly LayerID to resolution map, database path,\n  /// which are shared by all LidarMap and its decents\n  ///\n  /// @param config_file[in] the path to config file\n  ///\n  /// @return true on succeed, else false\n  ///\n  /// @note this should be called first before any operation about LidarMap\n  static bool configure(const std::string& config_file);\n\n  /// @brief initialize a layer before using it\n  ///\n  /// @param layer_id[in] specify which layer to initialize\n  ///\n  /// @return true on succeed, else false\n  virtual bool initializeLayer(int layer_id) = 0;\n\n  /// @brief add point to LidarMap on specific layer\n  ///\n  /// @param layer_id[in] specify which layer to add point cloud\n  /// @param pointcloud[in] the cloud point to add\n  ///\n  /// @return true on succeed, else false\n  virtual bool addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) = 0;\n\n protected:\n  static MapLayerDictionaryParser map_layer_dict_;\n  static std::string database_path_;\n  static int cache_range_;\n  static int cache_margin_;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map.h"
		}
	}
]
I0403 15:04:54.463390  5980 json_parser.cpp:18] 
[
	8,
	{
		"bufnr" : 8,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#include <fstream>\n\n#include \"common/proto/config/config_map.pb.h\"\n#include \"lidar_map.h\"\n\nnamespace allride {\nnamespace mapping {\n\nMapLayerDictionaryParser LidarMap::map_layer_dict_;\nstd::string LidarMap::database_path_;\nint LidarMap::cache_range_;\nint LidarMap::cache_margin_;\n\nbool LidarMap::configure(const std::string& config_file) {\n  std::ifstream map_config_ifs(config_file);\n  proto::config::ConfigMap map_config;\n  if (!map_config.ParseFromIstream(&map_config_ifs)) {\n    return false;\n  }\n\n  if (!map_layer_dict_.load(map_config.maplayer_dict_path())) {\n    return false;\n  }\n\n  database_path_ = map_config.database_path();\n\n  cache_range_ = map_config.cache_range();\n\n  cache_margin_ = map_config.cache_margin();\n\n  return true;\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map.cpp"
		}
	}
]
I0403 15:04:58.219266  5980 json_parser.cpp:18] 
[
	9,
	{
		"bufnr" : 7,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include \"common/math/point_types.h\"\n#include \"map_layer_dictionary_parser.h\"\n#include \"ndt3interface.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass LidarMap {\n public:\n  /// @brief configure the LidarMap class, mainly LayerID to resolution map, database path,\n  /// which are shared by all LidarMap and its decents\n  ///\n  /// @param config_file[in] the path to config file\n  ///\n  /// @return true on succeed, else false\n  ///\n  /// @note this should be called first before any operation about LidarMap\n  static bool configure(const std::string& config_file);\n\n  /// @brief initialize a layer before using it\n  ///\n  /// @param layer_id[in] specify which layer to initialize\n  ///\n  /// @return true on succeed, else false\n  virtual bool initializeLayer(int layer_id) = 0;\n\n  /// @brief add point to LidarMap on specific layer\n  ///\n  /// @param layer_id[in] specify which layer to add point cloud\n  /// @param pointcloud[in] the cloud point to add\n  ///\n  /// @return true on succeed, else false\n  virtual bool addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) = 0;\n\n protected:\n  static MapLayerDictionaryParser map_layer_dict_;\n  static std::string database_path_;\n  static int cache_range_;\n  static int cache_margin_;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map.h"
		}
	}
]
I0403 15:05:00.688540  5980 json_parser.cpp:18] 
[
	10,
	{
		"bufnr" : 8,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#include <fstream>\n\n#include \"common/proto/config/config_map.pb.h\"\n#include \"lidar_map.h\"\n\nnamespace allride {\nnamespace mapping {\n\nMapLayerDictionaryParser LidarMap::map_layer_dict_;\nstd::string LidarMap::database_path_;\nint LidarMap::cache_range_;\nint LidarMap::cache_margin_;\n\nbool LidarMap::configure(const std::string& config_file) {\n  std::ifstream map_config_ifs(config_file);\n  proto::config::ConfigMap map_config;\n  if (!map_config.ParseFromIstream(&map_config_ifs)) {\n    return false;\n  }\n\n  if (!map_layer_dict_.load(map_config.maplayer_dict_path())) {\n    return false;\n  }\n\n  database_path_ = map_config.database_path();\n\n  cache_range_ = map_config.cache_range();\n\n  cache_margin_ = map_config.cache_margin();\n\n  return true;\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map.cpp"
		}
	}
]
I0403 15:05:00.740366  5980 json_parser.cpp:18] 
[
	11,
	{
		"bufnr" : 9,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n\n#include \"lidar_map_offline.h\"\n#include \"lmdb_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nstd::shared_ptr<LocalDatabase> LidarMapOffline::database_ = nullptr;\nLocalDatabase::MODE LidarMapOffline::database_operation_mode_;\nproto::map::MapInfo LidarMapOffline::map_info_;\n\nbool LidarMapOffline::configure(LocalDatabase::MODE mode) {\n  database_ = std::shared_ptr<LmdbDatabase>(new LmdbDatabase);\n  database_operation_mode_ = mode;\n\n  if (!database_->open(database_path_, database_operation_mode_)) {\n    return false;\n  }\n\n  std::string map_info_data;\n  if (database_->get(\"MapInfo\", &map_info_data)) {\n    return false;\n  }\n\n  if (!map_info_.ParseFromString(map_info_data)) {\n    return false;\n  }\n\n  return true;\n}\n\nbool LidarMapOffline::initializeLayer(int layer_id) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-initialize\n  }\n\n  // find the layer infomation in database\n  int layer_info_index = -1;\n  for (int i = 0; i < map_info_.layer_infos_size(); ++i) {\n    if (layer_id == map_info_.layer_infos(i).layer_id()) {\n      layer_info_index = i;\n      break;\n    }\n  }\n  if (-1 == layer_info_index) {\n    return false;  // the specific layer_id do not exist in database\n  }\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(map_info_.layer_infos(layer_info_index), database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::initializeLayer(const std::string& type_name, float grid_size,\n                                     float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  if (!initializeLayer(layer_id)) {\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::load(const Eigen::Vector3f& pos) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->load(pos);\n  }\n\n  return ret;\n}\n\nbool LidarMapOffline::addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->addPointCloud(pointcloud);\n\n  return false;\n}\n\nbool LidarMapOffline::getMap(int layer_id, const MapScope& scope, bool blocking,\n                             std::shared_ptr<Ndt3Interface>* ndt3) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->getMap(scope, blocking, ndt3);\n\n  return false;\n}\n\nbool LidarMapOffline::addLayer(const proto::config::MapLayerItem& layer_item) {\n  // initializeLayer is only used in wrtie and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  int layer_id = layer_item.layer_id();\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-add\n  }\n\n  // construct a layer_info\n  proto::map::MapLayerInfo layer_info;\n  layer_info.set_layer_id(layer_item.layer_id());\n  layer_info.set_grid_size(layer_item.grid_size());\n  layer_info.set_tile_size(layer_item.tile_size());\n  layer_info.set_type_name(layer_item.type_name());\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(layer_info, database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::addLayer(const std::string& type_name, float grid_size, float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  proto::config::MapLayerItem item;\n  item.set_layer_id(layer_id);\n  item.set_type_name(type_name);\n  item.set_grid_size(grid_size);\n  item.set_tile_size(tile_size);\n\n  if (!addLayer(item)) {\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::save() {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->save();\n  }\n\n  return ret;\n}\n\nstd::shared_ptr<const MapLayer> LidarMapOffline::getLayer(int layer_id) {\n  auto iter = layers_.find(layer_id);\n  if (iter != layers_.end()) {\n    return iter->second;\n  } else {\n    return nullptr;\n  }\n}\n\nstd::shared_ptr<const MapLayer> LidarMapOffline::getLayer(const std::string& type_name,\n                                                          float grid_size, float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return nullptr;\n  }\n  return getLayer(layer_id);\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp"
		}
	}
]
I0403 15:05:08.896518  5980 json_parser.cpp:18] 
[
	12,
	{
		"bufnr" : 9,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n\n#include \"lidar_map_offline.h\"\n#include \"lmdb_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nstd::shared_ptr<LocalDatabase> LidarMapOffline::database_ = nullptr;\nLocalDatabase::MODE LidarMapOffline::database_operation_mode_;\nproto::map::MapInfo LidarMapOffline::map_info_;\n\nbool LidarMapOffline::configure(LocalDatabase::MODE mode) {\n  database_ = std::shared_ptr<LmdbDatabase>(new LmdbDatabase);\n  database_operation_mode_ = mode;\n\n  if (!database_->open(database_path_, database_operation_mode_)) {\n    return false;\n  }\n\n  std::string map_info_data;\n  if (database_->get(\"MapInfo\", &map_info_data)) {\n    return false;\n  }\n\n  if (!map_info_.ParseFromString(map_info_data)) {\n    return false;\n  }\n\n  return true;\n}\n\nbool LidarMapOffline::initializeLayer(int layer_id) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-initialize\n  }\n\n  // find the layer infomation in database\n  int layer_info_index = -1;\n  for (int i = 0; i < map_info_.layer_infos_size(); ++i) {\n    if (layer_id == map_info_.layer_infos(i).layer_id()) {\n      layer_info_index = i;\n      break;\n    }\n  }\n  if (-1 == layer_info_index) {\n    return false;  // the specific layer_id do not exist in database\n  }\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(map_info_.layer_infos(layer_info_index), database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::initializeLayer(const std::string& type_name, float grid_size,\n                                     float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  if (!initializeLayer(layer_id)) {\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::load(const Eigen::Vector3f& pos) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->load(pos);\n  }\n\n  return ret;\n}\n\nbool LidarMapOffline::addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->addPointCloud(pointcloud);\n\n  return false;\n}\n\nbool LidarMapOffline::getMap(int layer_id, const MapScope& scope, bool blocking,\n                             std::shared_ptr<Ndt3Interface>* ndt3) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->getMap(scope, blocking, ndt3);\n\n  return false;\n}\n\nbool LidarMapOffline::addLayer(const proto::config::MapLayerItem& layer_item) {\n  // initializeLayer is only used in wrtie and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  int layer_id = layer_item.layer_id();\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-add\n  }\n\n  // construct a layer_info\n  proto::map::MapLayerInfo layer_info;\n  layer_info.set_layer_id(layer_item.layer_id());\n  layer_info.set_grid_size(layer_item.grid_size());\n  layer_info.set_tile_size(layer_item.tile_size());\n  layer_info.set_type_name(layer_item.type_name());\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(layer_info, database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::addLayer(const std::string& type_name, float grid_size, float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  proto::config::MapLayerItem item;\n  item.set_layer_id(layer_id);\n  item.set_type_name(type_name);\n  item.set_grid_size(grid_size);\n  item.set_tile_size(tile_size);\n\n  if (!addLayer(item)) {\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::save() {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->save();\n  }\n\n  return ret;\n}\n\nstd::shared_ptr<const MapLayer> LidarMapOffline::getLayer(int layer_id) {\n  auto iter = layers_.find(layer_id);\n  if (iter != layers_.end()) {\n    return iter->second;\n  } else {\n    return nullptr;\n  }\n}\n\nstd::shared_ptr<const MapLayer> LidarMapOffline::getLayer(const std::string& type_name,\n                                                          float grid_size, float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return nullptr;\n  }\n  return getLayer(layer_id);\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp"
		}
	}
]
I0403 15:05:08.970161  5980 json_parser.cpp:18] 
[
	13,
	{
		"bufnr" : 10,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include \"common/math/eigen_types.h\"\n\n#include \"common/proto/config/config_map.pb.h\"\n\n#include \"lidar_map.h\"\n#include \"local_database.h\"\n#include \"map_layer.h\"\n#include \"map_scope.h\"\n#include \"ndt3interface.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass LidarMapOffline : public LidarMap {\n public:\n  /// @brief configure the LidarMapOffline class, mainly static members\n  /// which shared by all LidarMapOffline instance, such as database\n  ///\n  /// @param mode[in] specify the database operation mode, read, write, create...\n  ///\n  /// @note this should be called first before any operation about\n  /// LidarMapOffline\n  static bool configure(LocalDatabase::MODE mode);\n\n  /// @brief get the cache range(in number of tiles)\n  static int getCacheRange() { return LidarMap::cache_range_; }\n\n  /// @brief get the watermark of tile cache\n  static int getCacheMargin() { return LidarMap::cache_margin_; }\n\n  /// @brief implimention of LidarMap::initializeLayer, see LidarMap for more infomation\n  bool initializeLayer(int layer_id) override;\n\n  /// @brief initialize a layer by specify type_name, grid_size and tile\n  /// @return the layer_id of the initilized layer, if failed, a negtive number will be returned\n  int initializeLayer(const std::string& type_name, float grid_size, float tile_size);\n\n  /// @brief implimention of LidarMap::addPointCloud, see LidarMap for more infomation\n  bool addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) override;\n\n  /// @brief load the map to cache\n  /// @param[in] pos the center of the region to be loaded\n  /// @return true on succeed, else false\n  bool load(const Eigen::Vector3f& pos);\n\n  /// @brief Get the map of a layer in specific region\n  ///\n  /// @param layer_id[in] specify which layer to get\n  /// @param[in] scope specifies the submap region.\n  /// @param[in] blocking if is true, this call will block if cache miss happens,\n  /// until tiles are loaded or timeout\n  /// @param[out] ndt3 stores the map we got\n  ///\n  /// @return true on succeed, else false. we may fails when there is a cache miss\n  /// in blocking mode\n  bool getMap(int layer_id, const MapScope& scope, bool blocking,\n              std::shared_ptr<Ndt3Interface>* ndt3);\n\n  /// @brief add a layer (when building map)\n  ///\n  /// @param layer_item[in] a layer item contains nessecery infomation\n  /// to add one layer\n  ///\n  /// @return true on succeed, else false\n  bool addLayer(const proto::config::MapLayerItem& layer_item);\n\n  /// @brief add a layer (when building map)\n  ///\n  /// @return the layer id of the layer we add\n  int addLayer(const std::string& type_name, float grid_size, float tile_size);\n\n  /// @brief save the map into database\n  ///\n  /// @return true on succeed, else false\n  bool save();\n\n  /// @brief get one maplayer\n  ///\n  /// @param layer_id[in] specify which layer to get\n  ///\n  /// @return maplayer got\n  std::shared_ptr<const MapLayer> getLayer(int layer_id);\n\n  /// @brief get one maplayer\n  ///\n  /// @param type_name[in] such as ndt3_corner...\n  ///\n  /// @return map layer got\n  std::shared_ptr<const MapLayer> getLayer(const std::string& type_name, float grid_size, float tile_size);\n\n private:\n  static std::shared_ptr<LocalDatabase> database_;\n  static LocalDatabase::MODE database_operation_mode_;\n  static proto::map::MapInfo map_info_;\n\n  std::map<int, std::shared_ptr<MapLayer>> layers_;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.h"
		}
	}
]
I0403 15:05:14.834693  5980 json_parser.cpp:18] 
[
	14,
	{
		"bufnr" : 10,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include \"common/math/eigen_types.h\"\n\n#include \"common/proto/config/config_map.pb.h\"\n\n#include \"lidar_map.h\"\n#include \"local_database.h\"\n#include \"map_layer.h\"\n#include \"map_scope.h\"\n#include \"ndt3interface.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass LidarMapOffline : public LidarMap {\n public:\n  /// @brief configure the LidarMapOffline class, mainly static members\n  /// which shared by all LidarMapOffline instance, such as database\n  ///\n  /// @param mode[in] specify the database operation mode, read, write, create...\n  ///\n  /// @note this should be called first before any operation about\n  /// LidarMapOffline\n  static bool configure(LocalDatabase::MODE mode);\n\n  /// @brief get the cache range(in number of tiles)\n  static int getCacheRange() { return LidarMap::cache_range_; }\n\n  /// @brief get the watermark of tile cache\n  static int getCacheMargin() { return LidarMap::cache_margin_; }\n\n  /// @brief implimention of LidarMap::initializeLayer, see LidarMap for more infomation\n  bool initializeLayer(int layer_id) override;\n\n  /// @brief initialize a layer by specify type_name, grid_size and tile\n  /// @return the layer_id of the initilized layer, if failed, a negtive number will be returned\n  int initializeLayer(const std::string& type_name, float grid_size, float tile_size);\n\n  /// @brief implimention of LidarMap::addPointCloud, see LidarMap for more infomation\n  bool addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) override;\n\n  /// @brief load the map to cache\n  /// @param[in] pos the center of the region to be loaded\n  /// @return true on succeed, else false\n  bool load(const Eigen::Vector3f& pos);\n\n  /// @brief Get the map of a layer in specific region\n  ///\n  /// @param layer_id[in] specify which layer to get\n  /// @param[in] scope specifies the submap region.\n  /// @param[in] blocking if is true, this call will block if cache miss happens,\n  /// until tiles are loaded or timeout\n  /// @param[out] ndt3 stores the map we got\n  ///\n  /// @return true on succeed, else false. we may fails when there is a cache miss\n  /// in blocking mode\n  bool getMap(int layer_id, const MapScope& scope, bool blocking,\n              std::shared_ptr<Ndt3Interface>* ndt3);\n\n  /// @brief add a layer (when building map)\n  ///\n  /// @param layer_item[in] a layer item contains nessecery infomation\n  /// to add one layer\n  ///\n  /// @return true on succeed, else false\n  bool addLayer(const proto::config::MapLayerItem& layer_item);\n\n  /// @brief add a layer (when building map)\n  ///\n  /// @return the layer id of the layer we add\n  int addLayer(const std::string& type_name, float grid_size, float tile_size);\n\n  /// @brief save the map into database\n  ///\n  /// @return true on succeed, else false\n  bool save();\n\n  /// @brief get one maplayer\n  ///\n  /// @param layer_id[in] specify which layer to get\n  ///\n  /// @return maplayer got\n  std::shared_ptr<const MapLayer> getLayer(int layer_id);\n\n  /// @brief get one maplayer\n  ///\n  /// @param type_name[in] such as ndt3_corner...\n  ///\n  /// @return map layer got\n  std::shared_ptr<const MapLayer> getLayer(const std::string& type_name, float grid_size, float tile_size);\n\n private:\n  static std::shared_ptr<LocalDatabase> database_;\n  static LocalDatabase::MODE database_operation_mode_;\n  static proto::map::MapInfo map_info_;\n\n  std::map<int, std::shared_ptr<MapLayer>> layers_;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.h"
		}
	}
]
I0403 15:05:14.888713  5980 json_parser.cpp:18] 
[
	15,
	{
		"bufnr" : 11,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_online.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n\n#include \"lidar_map_online.h\"\n\nnamespace allride {\nnamespace mapping {\n\nvoid LidarMapOnline::setMapOrigin(const common::geometry::SE3& Tx_MP_map) { origin_ = Tx_MP_map; }\n\ncommon::geometry::SE3 LidarMapOnline::getMapOrigin() { return origin_; }\n\nvoid LidarMapOnline::resetMapRegion(const common::geometry::SE3& Tx_MP_V, double radius) {\n  common::geometry::SE3 Tx_delta /* = origin_.inverseCompose(Tx_MP_V) */;  // waiting for api\n\n  // first get all keys\n  std::vector<int> all_layer_ids;\n  for (const auto& pair : ndt3_pool_) {\n    all_layer_ids.emplace_back(pair.first);\n  }\n\n  // update ndt3 data of all layers\n  for (const auto& layer_id : all_layer_ids) {\n    float grid_size = map_layer_dict_.getGridSize(layer_id);\n    if (grid_size < 0) {\n      std::cout << \"Grid size negtive\" << std::endl;\n      continue;\n    }\n\n    std::shared_ptr<Ndt3Tile> new_ndt3 = std::shared_ptr<Ndt3Tile>(new Ndt3Tile(grid_size));\n    ndt3_pool_[layer_id]->copyAndTransform(Tx_delta, radius, new_ndt3.get());\n    ndt3_pool_[layer_id] = new_ndt3;\n  }\n}\n\nbool LidarMapOnline::initializeLayer(int layer_id) {\n  auto ndt3_pool_it = ndt3_pool_.find(layer_id);\n  if (ndt3_pool_it != ndt3_pool_.end()) {\n    return false;  // re-initialize\n  }\n\n  float grid_size;\n  if (!map_layer_dict_.getInfoById(layer_id, nullptr, &grid_size, nullptr)) {\n    return false;\n  }\n\n  ndt3_pool_[layer_id] = std::shared_ptr<Ndt3Tile>(new Ndt3Tile(grid_size));\n\n  return true;\n}\n\nbool LidarMapOnline::addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) {\n  auto ndt3_pool_it = ndt3_pool_.find(layer_id);\n  if (ndt3_pool_it == ndt3_pool_.end()) {\n    return false;  // layer not exist\n  }\n\n  // add sample to ndt3\n  for (const auto& sample : pointcloud) {\n    ndt3_pool_it->second->addSample(sample);\n  }\n\n  return false;\n}\n\nbool LidarMapOnline::getMap(int layer_id, std::shared_ptr<Ndt3Interface>* ndt3) {\n  if (!ndt3) {\n    return false;\n  }\n\n  auto ndt3_pool_it = ndt3_pool_.find(layer_id);\n  if (ndt3_pool_it == ndt3_pool_.end()) {\n    return false;  // layer not exist\n  }\n\n  *ndt3 = ndt3_pool_it->second;\n  return true;\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_online.cpp"
		}
	}
]
I0403 15:05:20.393108  5980 json_parser.cpp:18] 
[
	16,
	{
		"bufnr" : 11,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_online.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n\n#include \"lidar_map_online.h\"\n\nnamespace allride {\nnamespace mapping {\n\nvoid LidarMapOnline::setMapOrigin(const common::geometry::SE3& Tx_MP_map) { origin_ = Tx_MP_map; }\n\ncommon::geometry::SE3 LidarMapOnline::getMapOrigin() { return origin_; }\n\nvoid LidarMapOnline::resetMapRegion(const common::geometry::SE3& Tx_MP_V, double radius) {\n  common::geometry::SE3 Tx_delta /* = origin_.inverseCompose(Tx_MP_V) */;  // waiting for api\n\n  // first get all keys\n  std::vector<int> all_layer_ids;\n  for (const auto& pair : ndt3_pool_) {\n    all_layer_ids.emplace_back(pair.first);\n  }\n\n  // update ndt3 data of all layers\n  for (const auto& layer_id : all_layer_ids) {\n    float grid_size = map_layer_dict_.getGridSize(layer_id);\n    if (grid_size < 0) {\n      std::cout << \"Grid size negtive\" << std::endl;\n      continue;\n    }\n\n    std::shared_ptr<Ndt3Tile> new_ndt3 = std::shared_ptr<Ndt3Tile>(new Ndt3Tile(grid_size));\n    ndt3_pool_[layer_id]->copyAndTransform(Tx_delta, radius, new_ndt3.get());\n    ndt3_pool_[layer_id] = new_ndt3;\n  }\n}\n\nbool LidarMapOnline::initializeLayer(int layer_id) {\n  auto ndt3_pool_it = ndt3_pool_.find(layer_id);\n  if (ndt3_pool_it != ndt3_pool_.end()) {\n    return false;  // re-initialize\n  }\n\n  float grid_size;\n  if (!map_layer_dict_.getInfoById(layer_id, nullptr, &grid_size, nullptr)) {\n    return false;\n  }\n\n  ndt3_pool_[layer_id] = std::shared_ptr<Ndt3Tile>(new Ndt3Tile(grid_size));\n\n  return true;\n}\n\nbool LidarMapOnline::addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) {\n  auto ndt3_pool_it = ndt3_pool_.find(layer_id);\n  if (ndt3_pool_it == ndt3_pool_.end()) {\n    return false;  // layer not exist\n  }\n\n  // add sample to ndt3\n  for (const auto& sample : pointcloud) {\n    ndt3_pool_it->second->addSample(sample);\n  }\n\n  return false;\n}\n\nbool LidarMapOnline::getMap(int layer_id, std::shared_ptr<Ndt3Interface>* ndt3) {\n  if (!ndt3) {\n    return false;\n  }\n\n  auto ndt3_pool_it = ndt3_pool_.find(layer_id);\n  if (ndt3_pool_it == ndt3_pool_.end()) {\n    return false;  // layer not exist\n  }\n\n  *ndt3 = ndt3_pool_it->second;\n  return true;\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_online.cpp"
		}
	}
]
I0403 15:05:20.465059  5980 json_parser.cpp:18] 
[
	17,
	{
		"bufnr" : 10,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include \"common/math/eigen_types.h\"\n\n#include \"common/proto/config/config_map.pb.h\"\n\n#include \"lidar_map.h\"\n#include \"local_database.h\"\n#include \"map_layer.h\"\n#include \"map_scope.h\"\n#include \"ndt3interface.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass LidarMapOffline : public LidarMap {\n public:\n  /// @brief configure the LidarMapOffline class, mainly static members\n  /// which shared by all LidarMapOffline instance, such as database\n  ///\n  /// @param mode[in] specify the database operation mode, read, write, create...\n  ///\n  /// @note this should be called first before any operation about\n  /// LidarMapOffline\n  static bool configure(LocalDatabase::MODE mode);\n\n  /// @brief get the cache range(in number of tiles)\n  static int getCacheRange() { return LidarMap::cache_range_; }\n\n  /// @brief get the watermark of tile cache\n  static int getCacheMargin() { return LidarMap::cache_margin_; }\n\n  /// @brief implimention of LidarMap::initializeLayer, see LidarMap for more infomation\n  bool initializeLayer(int layer_id) override;\n\n  /// @brief initialize a layer by specify type_name, grid_size and tile\n  /// @return the layer_id of the initilized layer, if failed, a negtive number will be returned\n  int initializeLayer(const std::string& type_name, float grid_size, float tile_size);\n\n  /// @brief implimention of LidarMap::addPointCloud, see LidarMap for more infomation\n  bool addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) override;\n\n  /// @brief load the map to cache\n  /// @param[in] pos the center of the region to be loaded\n  /// @return true on succeed, else false\n  bool load(const Eigen::Vector3f& pos);\n\n  /// @brief Get the map of a layer in specific region\n  ///\n  /// @param layer_id[in] specify which layer to get\n  /// @param[in] scope specifies the submap region.\n  /// @param[in] blocking if is true, this call will block if cache miss happens,\n  /// until tiles are loaded or timeout\n  /// @param[out] ndt3 stores the map we got\n  ///\n  /// @return true on succeed, else false. we may fails when there is a cache miss\n  /// in blocking mode\n  bool getMap(int layer_id, const MapScope& scope, bool blocking,\n              std::shared_ptr<Ndt3Interface>* ndt3);\n\n  /// @brief add a layer (when building map)\n  ///\n  /// @param layer_item[in] a layer item contains nessecery infomation\n  /// to add one layer\n  ///\n  /// @return true on succeed, else false\n  bool addLayer(const proto::config::MapLayerItem& layer_item);\n\n  /// @brief add a layer (when building map)\n  ///\n  /// @return the layer id of the layer we add\n  int addLayer(const std::string& type_name, float grid_size, float tile_size);\n\n  /// @brief save the map into database\n  ///\n  /// @return true on succeed, else false\n  bool save();\n\n  /// @brief get one maplayer\n  ///\n  /// @param layer_id[in] specify which layer to get\n  ///\n  /// @return maplayer got\n  std::shared_ptr<const MapLayer> getLayer(int layer_id);\n\n  /// @brief get one maplayer\n  ///\n  /// @param type_name[in] such as ndt3_corner...\n  ///\n  /// @return map layer got\n  std::shared_ptr<const MapLayer> getLayer(const std::string& type_name, float grid_size, float tile_size);\n\n private:\n  static std::shared_ptr<LocalDatabase> database_;\n  static LocalDatabase::MODE database_operation_mode_;\n  static proto::map::MapInfo map_info_;\n\n  std::map<int, std::shared_ptr<MapLayer>> layers_;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.h"
		}
	}
]
I0403 15:05:22.371533  5980 json_parser.cpp:18] 
[
	18,
	{
		"bufnr" : 10,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include \"common/math/eigen_types.h\"\n\n#include \"common/proto/config/config_map.pb.h\"\n\n#include \"lidar_map.h\"\n#include \"local_database.h\"\n#include \"map_layer.h\"\n#include \"map_scope.h\"\n#include \"ndt3interface.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass LidarMapOffline : public LidarMap {\n public:\n  /// @brief configure the LidarMapOffline class, mainly static members\n  /// which shared by all LidarMapOffline instance, such as database\n  ///\n  /// @param mode[in] specify the database operation mode, read, write, create...\n  ///\n  /// @note this should be called first before any operation about\n  /// LidarMapOffline\n  static bool configure(LocalDatabase::MODE mode);\n\n  /// @brief get the cache range(in number of tiles)\n  static int getCacheRange() { return LidarMap::cache_range_; }\n\n  /// @brief get the watermark of tile cache\n  static int getCacheMargin() { return LidarMap::cache_margin_; }\n\n  /// @brief implimention of LidarMap::initializeLayer, see LidarMap for more infomation\n  bool initializeLayer(int layer_id) override;\n\n  /// @brief initialize a layer by specify type_name, grid_size and tile\n  /// @return the layer_id of the initilized layer, if failed, a negtive number will be returned\n  int initializeLayer(const std::string& type_name, float grid_size, float tile_size);\n\n  /// @brief implimention of LidarMap::addPointCloud, see LidarMap for more infomation\n  bool addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) override;\n\n  /// @brief load the map to cache\n  /// @param[in] pos the center of the region to be loaded\n  /// @return true on succeed, else false\n  bool load(const Eigen::Vector3f& pos);\n\n  /// @brief Get the map of a layer in specific region\n  ///\n  /// @param layer_id[in] specify which layer to get\n  /// @param[in] scope specifies the submap region.\n  /// @param[in] blocking if is true, this call will block if cache miss happens,\n  /// until tiles are loaded or timeout\n  /// @param[out] ndt3 stores the map we got\n  ///\n  /// @return true on succeed, else false. we may fails when there is a cache miss\n  /// in blocking mode\n  bool getMap(int layer_id, const MapScope& scope, bool blocking,\n              std::shared_ptr<Ndt3Interface>* ndt3);\n\n  /// @brief add a layer (when building map)\n  ///\n  /// @param layer_item[in] a layer item contains nessecery infomation\n  /// to add one layer\n  ///\n  /// @return true on succeed, else false\n  bool addLayer(const proto::config::MapLayerItem& layer_item);\n\n  /// @brief add a layer (when building map)\n  ///\n  /// @return the layer id of the layer we add\n  int addLayer(const std::string& type_name, float grid_size, float tile_size);\n\n  /// @brief save the map into database\n  ///\n  /// @return true on succeed, else false\n  bool save();\n\n  /// @brief get one maplayer\n  ///\n  /// @param layer_id[in] specify which layer to get\n  ///\n  /// @return maplayer got\n  std::shared_ptr<const MapLayer> getLayer(int layer_id);\n\n  /// @brief get one maplayer\n  ///\n  /// @param type_name[in] such as ndt3_corner...\n  ///\n  /// @return map layer got\n  std::shared_ptr<const MapLayer> getLayer(const std::string& type_name, float grid_size, float tile_size);\n\n private:\n  static std::shared_ptr<LocalDatabase> database_;\n  static LocalDatabase::MODE database_operation_mode_;\n  static proto::map::MapInfo map_info_;\n\n  std::map<int, std::shared_ptr<MapLayer>> layers_;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.h"
		}
	}
]
I0403 15:05:22.416800  5980 json_parser.cpp:18] 
[
	19,
	{
		"bufnr" : 9,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n\n#include \"lidar_map_offline.h\"\n#include \"lmdb_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nstd::shared_ptr<LocalDatabase> LidarMapOffline::database_ = nullptr;\nLocalDatabase::MODE LidarMapOffline::database_operation_mode_;\nproto::map::MapInfo LidarMapOffline::map_info_;\n\nbool LidarMapOffline::configure(LocalDatabase::MODE mode) {\n  database_ = std::shared_ptr<LmdbDatabase>(new LmdbDatabase);\n  database_operation_mode_ = mode;\n\n  if (!database_->open(database_path_, database_operation_mode_)) {\n    return false;\n  }\n\n  std::string map_info_data;\n  if (database_->get(\"MapInfo\", &map_info_data)) {\n    return false;\n  }\n\n  if (!map_info_.ParseFromString(map_info_data)) {\n    return false;\n  }\n\n  return true;\n}\n\nbool LidarMapOffline::initializeLayer(int layer_id) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-initialize\n  }\n\n  // find the layer infomation in database\n  int layer_info_index = -1;\n  for (int i = 0; i < map_info_.layer_infos_size(); ++i) {\n    if (layer_id == map_info_.layer_infos(i).layer_id()) {\n      layer_info_index = i;\n      break;\n    }\n  }\n  if (-1 == layer_info_index) {\n    return false;  // the specific layer_id do not exist in database\n  }\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(map_info_.layer_infos(layer_info_index), database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::initializeLayer(const std::string& type_name, float grid_size,\n                                     float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  if (!initializeLayer(layer_id)) {\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::load(const Eigen::Vector3f& pos) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->load(pos);\n  }\n\n  return ret;\n}\n\nbool LidarMapOffline::addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->addPointCloud(pointcloud);\n\n  return false;\n}\n\nbool LidarMapOffline::getMap(int layer_id, const MapScope& scope, bool blocking,\n                             std::shared_ptr<Ndt3Interface>* ndt3) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->getMap(scope, blocking, ndt3);\n\n  return false;\n}\n\nbool LidarMapOffline::addLayer(const proto::config::MapLayerItem& layer_item) {\n  // initializeLayer is only used in wrtie and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  int layer_id = layer_item.layer_id();\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-add\n  }\n\n  // construct a layer_info\n  proto::map::MapLayerInfo layer_info;\n  layer_info.set_layer_id(layer_item.layer_id());\n  layer_info.set_grid_size(layer_item.grid_size());\n  layer_info.set_tile_size(layer_item.tile_size());\n  layer_info.set_type_name(layer_item.type_name());\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(layer_info, database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::addLayer(const std::string& type_name, float grid_size, float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  proto::config::MapLayerItem item;\n  item.set_layer_id(layer_id);\n  item.set_type_name(type_name);\n  item.set_grid_size(grid_size);\n  item.set_tile_size(tile_size);\n\n  if (!addLayer(item)) {\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::save() {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->save();\n  }\n\n  return ret;\n}\n\nstd::shared_ptr<const MapLayer> LidarMapOffline::getLayer(int layer_id) {\n  auto iter = layers_.find(layer_id);\n  if (iter != layers_.end()) {\n    return iter->second;\n  } else {\n    return nullptr;\n  }\n}\n\nstd::shared_ptr<const MapLayer> LidarMapOffline::getLayer(const std::string& type_name,\n                                                          float grid_size, float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return nullptr;\n  }\n  return getLayer(layer_id);\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp"
		}
	}
]
I0403 15:05:24.107555  5980 json_parser.cpp:18] 
[
	20,
	{
		"bufnr" : 9,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n\n#include \"lidar_map_offline.h\"\n#include \"lmdb_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nstd::shared_ptr<LocalDatabase> LidarMapOffline::database_ = nullptr;\nLocalDatabase::MODE LidarMapOffline::database_operation_mode_;\nproto::map::MapInfo LidarMapOffline::map_info_;\n\nbool LidarMapOffline::configure(LocalDatabase::MODE mode) {\n  database_ = std::shared_ptr<LmdbDatabase>(new LmdbDatabase);\n  database_operation_mode_ = mode;\n\n  if (!database_->open(database_path_, database_operation_mode_)) {\n    return false;\n  }\n\n  std::string map_info_data;\n  if (database_->get(\"MapInfo\", &map_info_data)) {\n    return false;\n  }\n\n  if (!map_info_.ParseFromString(map_info_data)) {\n    return false;\n  }\n\n  return true;\n}\n\nbool LidarMapOffline::initializeLayer(int layer_id) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-initialize\n  }\n\n  // find the layer infomation in database\n  int layer_info_index = -1;\n  for (int i = 0; i < map_info_.layer_infos_size(); ++i) {\n    if (layer_id == map_info_.layer_infos(i).layer_id()) {\n      layer_info_index = i;\n      break;\n    }\n  }\n  if (-1 == layer_info_index) {\n    return false;  // the specific layer_id do not exist in database\n  }\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(map_info_.layer_infos(layer_info_index), database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::initializeLayer(const std::string& type_name, float grid_size,\n                                     float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  if (!initializeLayer(layer_id)) {\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::load(const Eigen::Vector3f& pos) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->load(pos);\n  }\n\n  return ret;\n}\n\nbool LidarMapOffline::addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->addPointCloud(pointcloud);\n\n  return false;\n}\n\nbool LidarMapOffline::getMap(int layer_id, const MapScope& scope, bool blocking,\n                             std::shared_ptr<Ndt3Interface>* ndt3) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->getMap(scope, blocking, ndt3);\n\n  return false;\n}\n\nbool LidarMapOffline::addLayer(const proto::config::MapLayerItem& layer_item) {\n  // initializeLayer is only used in wrtie and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  int layer_id = layer_item.layer_id();\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-add\n  }\n\n  // construct a layer_info\n  proto::map::MapLayerInfo layer_info;\n  layer_info.set_layer_id(layer_item.layer_id());\n  layer_info.set_grid_size(layer_item.grid_size());\n  layer_info.set_tile_size(layer_item.tile_size());\n  layer_info.set_type_name(layer_item.type_name());\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(layer_info, database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::addLayer(const std::string& type_name, float grid_size, float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  proto::config::MapLayerItem item;\n  item.set_layer_id(layer_id);\n  item.set_type_name(type_name);\n  item.set_grid_size(grid_size);\n  item.set_tile_size(tile_size);\n\n  if (!addLayer(item)) {\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::save() {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->save();\n  }\n\n  return ret;\n}\n\nstd::shared_ptr<const MapLayer> LidarMapOffline::getLayer(int layer_id) {\n  auto iter = layers_.find(layer_id);\n  if (iter != layers_.end()) {\n    return iter->second;\n  } else {\n    return nullptr;\n  }\n}\n\nstd::shared_ptr<const MapLayer> LidarMapOffline::getLayer(const std::string& type_name,\n                                                          float grid_size, float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return nullptr;\n  }\n  return getLayer(layer_id);\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp"
		}
	}
]
I0403 15:05:24.185075  5980 json_parser.cpp:18] 
[
	21,
	{
		"bufnr" : 7,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include \"common/math/point_types.h\"\n#include \"map_layer_dictionary_parser.h\"\n#include \"ndt3interface.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass LidarMap {\n public:\n  /// @brief configure the LidarMap class, mainly LayerID to resolution map, database path,\n  /// which are shared by all LidarMap and its decents\n  ///\n  /// @param config_file[in] the path to config file\n  ///\n  /// @return true on succeed, else false\n  ///\n  /// @note this should be called first before any operation about LidarMap\n  static bool configure(const std::string& config_file);\n\n  /// @brief initialize a layer before using it\n  ///\n  /// @param layer_id[in] specify which layer to initialize\n  ///\n  /// @return true on succeed, else false\n  virtual bool initializeLayer(int layer_id) = 0;\n\n  /// @brief add point to LidarMap on specific layer\n  ///\n  /// @param layer_id[in] specify which layer to add point cloud\n  /// @param pointcloud[in] the cloud point to add\n  ///\n  /// @return true on succeed, else false\n  virtual bool addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) = 0;\n\n protected:\n  static MapLayerDictionaryParser map_layer_dict_;\n  static std::string database_path_;\n  static int cache_range_;\n  static int cache_margin_;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map.h"
		}
	}
]
I0403 15:05:25.395198  5980 json_parser.cpp:18] 
[
	22,
	{
		"bufnr" : 7,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include \"common/math/point_types.h\"\n#include \"map_layer_dictionary_parser.h\"\n#include \"ndt3interface.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass LidarMap {\n public:\n  /// @brief configure the LidarMap class, mainly LayerID to resolution map, database path,\n  /// which are shared by all LidarMap and its decents\n  ///\n  /// @param config_file[in] the path to config file\n  ///\n  /// @return true on succeed, else false\n  ///\n  /// @note this should be called first before any operation about LidarMap\n  static bool configure(const std::string& config_file);\n\n  /// @brief initialize a layer before using it\n  ///\n  /// @param layer_id[in] specify which layer to initialize\n  ///\n  /// @return true on succeed, else false\n  virtual bool initializeLayer(int layer_id) = 0;\n\n  /// @brief add point to LidarMap on specific layer\n  ///\n  /// @param layer_id[in] specify which layer to add point cloud\n  /// @param pointcloud[in] the cloud point to add\n  ///\n  /// @return true on succeed, else false\n  virtual bool addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) = 0;\n\n protected:\n  static MapLayerDictionaryParser map_layer_dict_;\n  static std::string database_path_;\n  static int cache_range_;\n  static int cache_margin_;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map.h"
		}
	}
]
I0403 15:05:25.437903  5980 json_parser.cpp:18] 
[
	23,
	{
		"bufnr" : 8,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" 