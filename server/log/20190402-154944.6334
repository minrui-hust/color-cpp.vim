Log file created at: 2019/04/02 15:49:44
Running on machine: mr-pc
Log line format: [IWEF]mmdd hh:mm:ss.uuuuuu threadid file:line] msg
I0402 15:49:44.341641  6334 json_parser.cpp:18] 
[
	1,
	{
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/intensity_map_builder.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DROS_PACKAGE_NAME=\\\"v2_mapping\\\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-Dv2_mapping_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/usr/lib/openmpi/include",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dinertial_nav_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/python2.7",
			"-I/usr/include/vtk-6.2",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/pcl-1.7",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/freetype2",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DQT_CORE_LIB",
			"-I/usr/include/openni2",
			"-I/home/mr/Workspace/loc/src/v2/build/common/proto",
			"-I/usr/include/hdf5/openmpi",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-DQT_NO_DEBUG",
			"-Dcommon_io_EXPORTS",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\"common\\\"",
			"-Dcommon_proto_EXPORTS",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/usr/include/eigen3",
			"-I/usr/include/libxml2",
			"-I/opt/ros/kinetic/include",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-DDISABLE_PNG",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-Dcommon_geometry_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/home/mr/Workspace/loc/src/v2/third_party/thread_pool",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All rights reserved.\n// Authors: Yongjian Zhao (yongjian.zhao@allride.ai)\n\n#include <priority_queue>\n#include <set>\n\n#include \"intensity_map_builder.h\"\n\nvoid ClusterSample::ClusterSample(const ClusterSmaple& other) {\n  this->point_num += other.point_num;\n\n  float other_weight = static_cast<float>(other.point_num) / this->point_num;\n  float this_weight = 1.0f - other_weight;\n\n  this->height = this_weight * this->height + other_weight * other.height;\n  this->intensity = this_weigh * this->intensity + other_weight * other.intensity;\n}\n\nvoid IntensityMapBuilder::buildIntensityMap(const std::string& output_folder) {\n  // To initialize grid2_samples_, each ndt3 grid is one ClusterSample\n  // for each grid2 sample, there are several Cluster\n\n  // height cluster for each grid2_sample\n  for (auto& grid2_smaple : grid2_samples_) {\n    heightCluster(&grid2_smaple.second);\n  }\n\n  // create image acoording to grid2_samples_\n  cv::Mat intensity_image;\n  createImage(&intensity_image);\n\n  // create intensity_map_info according to grid2_samples_\n  /* protoBufType intensity_map_info */\n  createHeightInfo(/*&intensity_map_info*/);\n\n  // save image and intensity_map_info\n  saveIntensityMap(output_folder, intensity_image /*, intensity_map_info*/);\n}\n\nvoid IntensityMapBuilder::heightCluster(std::vector<ClusterSample>* samples) {\n  size_t sample_num = samples->size();\n\n  // make existing_sample_id\n  std::set<size_t> existing_sample_id;\n  for (size_t i = 0; i < sample_num; i++) {\n    existing_sample_id.insert(i);\n  }\n\n  // make distance_queue\n  std::priority_queue<QueueElement, std::vector<QueueElement>, QueueElementCompare> distance_queue;\n  for (size_t i = 0; i < sample_num; i++) {\n    for (size_t j = i + 1; j < sample_num; j++) {\n      float distance = fabs(samples->at(i).height - samples->at(j).height);\n      distance_queue.emplace(distance, i, j);\n    }\n  }\n\n  // cluster\n  const float distance_th = 4.0f;\n  while (true) {\n    // find min_distance between each ClusterSample\n    QueueElement element = distance_queue.top() distance_queue.pop();\n    if (element.distance > distance_th) {\n      break;\n    }\n\n    if (existing_sample_id.count(element.small_id) == 0) {\n      continue;\n    }\n\n    if (existing_sample_id.count(element.big_id) == 0) {\n      continue;\n    }\n\n    // merge two nearest samples\n    samples->at(element.small_id).merge(samples->at(element.big_id));\n    existing_sample_id.erase(element.big_id);\n    sample_num--;\n  }\n\n  if (existing_sample_id.size() != sample_num) {\n    std::cout << \"error: existing_sample_id.size() does not equal to sample_num!\" << std::endl;\n  }\n\n  // save cluster result\n  // need test\n  size_t i = 0;\n  for (size_t id& existing_sample_id) {\n    samples->at<i> = samples->at(id);\n  }\n  samples->resize(sample_num);\n}\n\nvoid IntensityMapBuilder::createImage(cv::Mat* image) {\n  // get necessary information from ndt_map_data_\n  int min_tile_id_x = 0, max_tile_id_x = 10;\n  int min_tile_id_y = 0, max_tile_id_y = 10;\n  float min_height = 0, max_height = 10;\n  float min_intensity = 0, max_intensity = 255;\n\n  int image_width =\n      static_cast<int>((max_tile_id_x - min_tile_id_x + 1) * param_.tile_size / param_.grid_size);\n  int image_height =\n      static_cast<int>((max_tile_id_y - min_tile_id_y + 1) * param_.tile_size / param_.grid_size);\n\n  // make image\n  cv::Mat blank_image = cv::Mat::zeros(image_height, image_width, CV_U8C3);\n  blank_image.copyTo(*image);\n  for (auto grid2_sample : grid2_samples_) {\n    // set pixel value\n  }\n}\n\nvoid IntensityMapBuilder::createHeightInfo(/* protoBufType *intensity_map_info */) {}\n\nbool IntensityMapBuilder::saveIntensityMap(const std::string& output_folder, const cv::Mat& image\n                                           /*const protoBufType *intensity_map_info */) {\n  // check or make output folder\n\n  // save image\n  std::string image_name = output_folder + \"/intensity_image.png\";\n  cv::imwrite(image_name, image);\n\n  // save intensity_map_info\n\n  return true;\n}\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/intensity_map_builder.cpp"
		}
	}
]
I0402 15:49:44.383059  6334 json_parser.cpp:18] 
[
	2,
	{
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/intensity_map_builder.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DROS_PACKAGE_NAME=\\\"v2_mapping\\\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-Dv2_mapping_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/usr/lib/openmpi/include",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dinertial_nav_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/python2.7",
			"-I/usr/include/vtk-6.2",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/pcl-1.7",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/freetype2",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DQT_CORE_LIB",
			"-I/usr/include/openni2",
			"-I/home/mr/Workspace/loc/src/v2/build/common/proto",
			"-I/usr/include/hdf5/openmpi",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-DQT_NO_DEBUG",
			"-Dcommon_io_EXPORTS",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\"common\\\"",
			"-Dcommon_proto_EXPORTS",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/usr/include/eigen3",
			"-I/usr/include/libxml2",
			"-I/opt/ros/kinetic/include",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-DDISABLE_PNG",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-Dcommon_geometry_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/home/mr/Workspace/loc/src/v2/third_party/thread_pool",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All rights reserved.\n// Authors: Yongjian Zhao (yongjian.zhao@allride.ai)\n\n#include <priority_queue>\n#include <set>\n\n#include \"intensity_map_builder.h\"\n\nvoid ClusterSample::ClusterSample(const ClusterSmaple& other) {\n  this->point_num += other.point_num;\n\n  float other_weight = static_cast<float>(other.point_num) / this->point_num;\n  float this_weight = 1.0f - other_weight;\n\n  this->height = this_weight * this->height + other_weight * other.height;\n  this->intensity = this_weigh * this->intensity + other_weight * other.intensity;\n}\n\nvoid IntensityMapBuilder::buildIntensityMap(const std::string& output_folder) {\n  // To initialize grid2_samples_, each ndt3 grid is one ClusterSample\n  // for each grid2 sample, there are several Cluster\n\n  // height cluster for each grid2_sample\n  for (auto& grid2_smaple : grid2_samples_) {\n    heightCluster(&grid2_smaple.second);\n  }\n\n  // create image acoording to grid2_samples_\n  cv::Mat intensity_image;\n  createImage(&intensity_image);\n\n  // create intensity_map_info according to grid2_samples_\n  /* protoBufType intensity_map_info */\n  createHeightInfo(/*&intensity_map_info*/);\n\n  // save image and intensity_map_info\n  saveIntensityMap(output_folder, intensity_image /*, intensity_map_info*/);\n}\n\nvoid IntensityMapBuilder::heightCluster(std::vector<ClusterSample>* samples) {\n  size_t sample_num = samples->size();\n\n  // make existing_sample_id\n  std::set<size_t> existing_sample_id;\n  for (size_t i = 0; i < sample_num; i++) {\n    existing_sample_id.insert(i);\n  }\n\n  // make distance_queue\n  std::priority_queue<QueueElement, std::vector<QueueElement>, QueueElementCompare> distance_queue;\n  for (size_t i = 0; i < sample_num; i++) {\n    for (size_t j = i + 1; j < sample_num; j++) {\n      float distance = fabs(samples->at(i).height - samples->at(j).height);\n      distance_queue.emplace(distance, i, j);\n    }\n  }\n\n  // cluster\n  const float distance_th = 4.0f;\n  while (true) {\n    // find min_distance between each ClusterSample\n    QueueElement element = distance_queue.top() distance_queue.pop();\n    if (element.distance > distance_th) {\n      break;\n    }\n\n    if (existing_sample_id.count(element.small_id) == 0) {\n      continue;\n    }\n\n    if (existing_sample_id.count(element.big_id) == 0) {\n      continue;\n    }\n\n    // merge two nearest samples\n    samples->at(element.small_id).merge(samples->at(element.big_id));\n    existing_sample_id.erase(element.big_id);\n    sample_num--;\n  }\n\n  if (existing_sample_id.size() != sample_num) {\n    std::cout << \"error: existing_sample_id.size() does not equal to sample_num!\" << std::endl;\n  }\n\n  // save cluster result\n  // need test\n  size_t i = 0;\n  for (size_t id& existing_sample_id) {\n    samples->at<i> = samples->at(id);\n  }\n  samples->resize(sample_num);\n}\n\nvoid IntensityMapBuilder::createImage(cv::Mat* image) {\n  // get necessary information from ndt_map_data_\n  int min_tile_id_x = 0, max_tile_id_x = 10;\n  int min_tile_id_y = 0, max_tile_id_y = 10;\n  float min_height = 0, max_height = 10;\n  float min_intensity = 0, max_intensity = 255;\n\n  int image_width =\n      static_cast<int>((max_tile_id_x - min_tile_id_x + 1) * param_.tile_size / param_.grid_size);\n  int image_height =\n      static_cast<int>((max_tile_id_y - min_tile_id_y + 1) * param_.tile_size / param_.grid_size);\n\n  // make image\n  cv::Mat blank_image = cv::Mat::zeros(image_height, image_width, CV_U8C3);\n  blank_image.copyTo(*image);\n  for (auto grid2_sample : grid2_samples_) {\n    // set pixel value\n  }\n}\n\nvoid IntensityMapBuilder::createHeightInfo(/* protoBufType *intensity_map_info */) {}\n\nbool IntensityMapBuilder::saveIntensityMap(const std::string& output_folder, const cv::Mat& image\n                                           /*const protoBufType *intensity_map_info */) {\n  // check or make output folder\n\n  // save image\n  std::string image_name = output_folder + \"/intensity_image.png\";\n  cv::imwrite(image_name, image);\n\n  // save intensity_map_info\n\n  return true;\n}\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/intensity_map_builder.cpp"
		}
	}
]
I0402 15:51:39.596468  6334 json_parser.cpp:18] 
[
	3,
	{
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/intensity_map_builder.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DROS_PACKAGE_NAME=\\\"v2_mapping\\\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-Dv2_mapping_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/usr/lib/openmpi/include",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dinertial_nav_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/python2.7",
			"-I/usr/include/vtk-6.2",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/pcl-1.7",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/freetype2",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DQT_CORE_LIB",
			"-I/usr/include/openni2",
			"-I/home/mr/Workspace/loc/src/v2/build/common/proto",
			"-I/usr/include/hdf5/openmpi",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-DQT_NO_DEBUG",
			"-Dcommon_io_EXPORTS",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\"common\\\"",
			"-Dcommon_proto_EXPORTS",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/usr/include/eigen3",
			"-I/usr/include/libxml2",
			"-I/opt/ros/kinetic/include",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-DDISABLE_PNG",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-Dcommon_geometry_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/home/mr/Workspace/loc/src/v2/third_party/thread_pool",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All rights reserved.\n// Authors: Yongjian Zhao (yongjian.zhao@allride.ai)\n\n#include <priority_queue>\n#include <set>\n\n#include \"intensity_map_builder.h\"\n\nvoid ClusterSample::ClusterSample(const ClusterSmaple& other) {\n  this->point_num += other.point_num;\n\n  float other_weight = static_cast<float>(other.point_num) / this->point_num;\n  float this_weight = 1.0f - other_weight;\n\n  this->height = this_weight * this->height + other_weight * other.height;\n  this->intensity = this_weigh * this->intensity + other_weight * other.intensity;\n}\n\nvoid IntensityMapBuilder::buildIntensityMap(const std::string& output_folder) {\n  // To initialize grid2_samples_, each ndt3 grid is one ClusterSample\n  // for each grid2 sample, there are several Cluster\n\n  // height cluster for each grid2_sample\n  for (auto& grid2_smaple : grid2_samples_) {\n    heightCluster(&grid2_smaple.second);\n  }\n\n  // create image acoording to grid2_samples_\n  cv::Mat intensity_image;\n  createImage(&intensity_image);\n\n  // create intensity_map_info according to grid2_samples_\n  /* protoBufType intensity_map_info */\n  createHeightInfo(/*&intensity_map_info*/);\n\n  // save image and intensity_map_info\n  saveIntensityMap(output_folder, intensity_image /*, intensity_map_info*/);\n}\n\nvoid IntensityMapBuilder::heightCluster(std::vector<ClusterSample>* samples) {\n  size_t sample_num = samples->size();\n\n  // make existing_sample_id\n  std::set<size_t> existing_sample_id;\n  for (size_t i = 0; i < sample_num; i++) {\n    existing_sample_id.insert(i);\n  }\n\n  // make distance_queue\n  std::priority_queue<QueueElement, std::vector<QueueElement>, QueueElementCompare> distance_queue;\n  for (size_t i = 0; i < sample_num; i++) {\n    for (size_t j = i + 1; j < sample_num; j++) {\n      float distance = fabs(samples->at(i).height - samples->at(j).height);\n      distance_queue.emplace(distance, i, j);\n    }\n  }\n\n  // cluster\n  const float distance_th = 4.0f;\n  while (true) {\n    // find min_distance between each ClusterSample\n    QueueElement element = distance_queue.top() distance_queue.pop();\n    if (element.distance > distance_th) {\n      break;\n    }\n\n    if (existing_sample_id.count(element.small_id) == 0) {\n      continue;\n    }\n\n    if (existing_sample_id.count(element.big_id) == 0) {\n      continue;\n    }\n\n    // merge two nearest samples\n    samples->at(element.small_id).merge(samples->at(element.big_id));\n    existing_sample_id.erase(element.big_id);\n    sample_num--;\n  }\n\n  if (existing_sample_id.size() != sample_num) {\n    std::cout << \"error: existing_sample_id.size() does not equal to sample_num!\" << std::endl;\n  }\n\n  // save cluster result\n  // need test\n  size_t i = 0;\n  for (size_t id& existing_sample_id) {\n    samples->at<i> = samples->at(id);\n  }\n  samples->resize(sample_num);\n}\n\nvoid IntensityMapBuilder::createImage(cv::Mat* image) {\n  // get necessary information from ndt_map_data_\n  int min_tile_id_x = 0, max_tile_id_x = 10;\n  int min_tile_id_y = 0, max_tile_id_y = 10;\n  float min_height = 0, max_height = 10;\n  float min_intensity = 0, max_intensity = 255;\n\n  int image_width =\n      static_cast<int>((max_tile_id_x - min_tile_id_x + 1) * param_.tile_size / param_.grid_size);\n  int image_height =\n      static_cast<int>((max_tile_id_y - min_tile_id_y + 1) * param_.tile_size / param_.grid_size);\n\n  // make image\n  cv::Mat blank_image = cv::Mat::zeros(image_height, image_width, CV_U8C3);\n  blank_image.copyTo(*image);\n  for (auto grid2_sample : grid2_samples_) {\n    // set pixel value\n  }\n}\n\nvoid IntensityMapBuilder::createHeightInfo(/* protoBufType *intensity_map_info */) {}\n\nbool IntensityMapBuilder::saveIntensityMap(const std::string& output_folder, const cv::Mat& image\n                                           /*const protoBufType *intensity_map_info */) {\n  // check or make output folder\n\n  // save image\n  std::string image_name = output_folder + \"/intensity_image.png\";\n  cv::imwrite(image_name, image);\n\n  // save intensity_map_info\n\n  return true;\n}\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/intensity_map_builder.cpp"
		}
	}
]
I0402 15:51:51.351248  6334 json_parser.cpp:18] 
[
	4,
	{
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/intensity_map_builder.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DROS_PACKAGE_NAME=\\\"v2_mapping\\\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-Dv2_mapping_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/usr/lib/openmpi/include",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dinertial_nav_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/python2.7",
			"-I/usr/include/vtk-6.2",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/pcl-1.7",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/freetype2",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DQT_CORE_LIB",
			"-I/usr/include/openni2",
			"-I/home/mr/Workspace/loc/src/v2/build/common/proto",
			"-I/usr/include/hdf5/openmpi",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-DQT_NO_DEBUG",
			"-Dcommon_io_EXPORTS",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\"common\\\"",
			"-Dcommon_proto_EXPORTS",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/usr/include/eigen3",
			"-I/usr/include/libxml2",
			"-I/opt/ros/kinetic/include",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-DDISABLE_PNG",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-Dcommon_geometry_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/home/mr/Workspace/loc/src/v2/third_party/thread_pool",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All rights reserved.\n// Authors: Yongjian Zhao (yongjian.zhao@allride.ai)\n\n#include <priority_queue>\n#include <set>\n\n#include \"intensity_map_builder.h\"\n\nvoid ClusterSample::ClusterSample(const ClusterSmaple& other) {\n  this->point_num += other.point_num;\n\n  float other_weight = static_cast<float>(other.point_num) / this->point_num;\n  float this_weight = 1.0f - other_weight;\n\n  this->height = this_weight * this->height + other_weight * other.height;\n  this->intensity = this_weigh * this->intensity + other_weight * other.intensity;\n}\n\nvoid IntensityMapBuilder::buildIntensityMap(const std::string& output_folder) {\n  // To initialize grid2_samples_, each ndt3 grid is one ClusterSample\n  // for each grid2 sample, there are several Cluster\n\n  // height cluster for each grid2_sample\n  for (auto& grid2_smaple : grid2_samples_) {\n    heightCluster(&grid2_smaple.second);\n  }\n\n  // create image acoording to grid2_samples_\n  cv::Mat intensity_image;\n  createImage(&intensity_image);\n\n  // create intensity_map_info according to grid2_samples_\n  /* protoBufType intensity_map_info */\n  createHeightInfo(/*&intensity_map_info*/);\n\n  // save image and intensity_map_info\n  saveIntensityMap(output_folder, intensity_image /*, intensity_map_info*/);\n}\n\nvoid IntensityMapBuilder::heightCluster(std::vector<ClusterSample>* samples) {\n  size_t sample_num = samples->size();\n\n  // make existing_sample_id\n  std::set<size_t> existing_sample_id;\n  for (size_t i = 0; i < sample_num; i++) {\n    existing_sample_id.insert(i);\n  }\n\n  // make distance_queue\n  std::priority_queue<QueueElement, std::vector<QueueElement>, QueueElementCompare> distance_queue;\n  for (size_t i = 0; i < sample_num; i++) {\n    for (size_t j = i + 1; j < sample_num; j++) {\n      float distance = fabs(samples->at(i).height - samples->at(j).height);\n      distance_queue.emplace(distance, i, j);\n    }\n  }\n\n  // cluster\n  const float distance_th = 4.0f;\n  while (true) {\n    // find min_distance between each ClusterSample\n    QueueElement element = distance_queue.top() distance_queue.pop();\n    if (element.distance > distance_th) {\n      break;\n    }\n\n    if (existing_sample_id.count(element.small_id) == 0) {\n      continue;\n    }\n\n    if (existing_sample_id.count(element.big_id) == 0) {\n      continue;\n    }\n\n    // merge two nearest samples\n    samples->at(element.small_id).merge(samples->at(element.big_id));\n    existing_sample_id.erase(element.big_id);\n    sample_num--;\n  }\n\n  if (existing_sample_id.size() != sample_num) {\n    std::cout << \"error: existing_sample_id.size() does not equal to sample_num!\" << std::endl;\n  }\n\n  // save cluster result\n  // need test\n  size_t i = 0;\n  for (size_t id& existing_sample_id) {\n    samples->at<i> = samples->at(id);\n  }\n  samples->resize(sample_num);\n}\n\nvoid IntensityMapBuilder::createImage(cv::Mat* image) {\n  // get necessary information from ndt_map_data_\n  int min_tile_id_x = 0, max_tile_id_x = 10;\n  int min_tile_id_y = 0, max_tile_id_y = 10;\n  float min_height = 0, max_height = 10;\n  float min_intensity = 0, max_intensity = 255;\n\n  int image_width =\n      static_cast<int>((max_tile_id_x - min_tile_id_x + 1) * param_.tile_size / param_.grid_size);\n  int image_height =\n      static_cast<int>((max_tile_id_y - min_tile_id_y + 1) * param_.tile_size / param_.grid_size);\n\n  // make image\n  cv::Mat blank_image = cv::Mat::zeros(image_height, image_width, CV_U8C3);\n  blank_image.copyTo(*image);\n  for (auto grid2_sample : grid2_samples_) {\n    // set pixel value\n  }\n}\n\nvoid IntensityMapBuilder::createHeightInfo(/* protoBufType *intensity_map_info */) {}\n\nbool IntensityMapBuilder::saveIntensityMap(const std::string& output_folder, const cv::Mat& image\n                                           /*const protoBufType *intensity_map_info */) {\n  // check or make output folder\n\n  // save image\n  std::string image_name = output_folder + \"/intensity_image.png\";\n  cv::imwrite(image_name, image);\n\n  // save intensity_map_info\n\n  return true;\n}\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/intensity_map_builder.cpp"
		}
	}
]
I0402 15:51:51.364833  6334 json_parser.cpp:18] 
[
	5,
	{
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/intensity_map_builder.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DROS_PACKAGE_NAME=\\\"v2_mapping\\\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-Dv2_mapping_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/usr/lib/openmpi/include",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dinertial_nav_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/python2.7",
			"-I/usr/include/vtk-6.2",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/pcl-1.7",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/freetype2",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DQT_CORE_LIB",
			"-I/usr/include/openni2",
			"-I/home/mr/Workspace/loc/src/v2/build/common/proto",
			"-I/usr/include/hdf5/openmpi",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-DQT_NO_DEBUG",
			"-Dcommon_io_EXPORTS",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\"common\\\"",
			"-Dcommon_proto_EXPORTS",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/usr/include/eigen3",
			"-I/usr/include/libxml2",
			"-I/opt/ros/kinetic/include",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-DDISABLE_PNG",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-Dcommon_geometry_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/home/mr/Workspace/loc/src/v2/third_party/thread_pool",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All rights reserved.\n// Authors: Yongjian Zhao (yongjian.zhao@allride.ai)\n\n#include <priority_queue>\n#include <set>\n\n#include \"intensity_map_builder.h\"\n\nvoid ClusterSample::ClusterSample(const ClusterSmaple& other) {\n  this->point_num += other.point_num;\n\n  float other_weight = static_cast<float>(other.point_num) / this->point_num;\n  float this_weight = 1.0f - other_weight;\n\n  this->height = this_weight * this->height + other_weight * other.height;\n  this->intensity = this_weigh * this->intensity + other_weight * other.intensity;\n}\n\nvoid IntensityMapBuilder::buildIntensityMap(const std::string& output_folder) {\n  // To initialize grid2_samples_, each ndt3 grid is one ClusterSample\n  // for each grid2 sample, there are several Cluster\n\n  // height cluster for each grid2_sample\n  for (auto& grid2_smaple : grid2_samples_) {\n    heightCluster(&grid2_smaple.second);\n  }\n\n  // create image acoording to grid2_samples_\n  cv::Mat intensity_image;\n  createImage(&intensity_image);\n\n  // create intensity_map_info according to grid2_samples_\n  /* protoBufType intensity_map_info */\n  createHeightInfo(/*&intensity_map_info*/);\n\n  // save image and intensity_map_info\n  saveIntensityMap(output_folder, intensity_image /*, intensity_map_info*/);\n}\n\nvoid IntensityMapBuilder::heightCluster(std::vector<ClusterSample>* samples) {\n  size_t sample_num = samples->size();\n\n  // make existing_sample_id\n  std::set<size_t> existing_sample_id;\n  for (size_t i = 0; i < sample_num; i++) {\n    existing_sample_id.insert(i);\n  }\n\n  // make distance_queue\n  std::priority_queue<QueueElement, std::vector<QueueElement>, QueueElementCompare> distance_queue;\n  for (size_t i = 0; i < sample_num; i++) {\n    for (size_t j = i + 1; j < sample_num; j++) {\n      float distance = fabs(samples->at(i).height - samples->at(j).height);\n      distance_queue.emplace(distance, i, j);\n    }\n  }\n\n  // cluster\n  const float distance_th = 4.0f;\n  while (true) {\n    // find min_distance between each ClusterSample\n    QueueElement element = distance_queue.top() distance_queue.pop();\n    if (element.distance > distance_th) {\n      break;\n    }\n\n    if (existing_sample_id.count(element.small_id) == 0) {\n      continue;\n    }\n\n    if (existing_sample_id.count(element.big_id) == 0) {\n      continue;\n    }\n\n    // merge two nearest samples\n    samples->at(element.small_id).merge(samples->at(element.big_id));\n    existing_sample_id.erase(element.big_id);\n    sample_num--;\n  }\n\n  if (existing_sample_id.size() != sample_num) {\n    std::cout << \"error: existing_sample_id.size() does not equal to sample_num!\" << std::endl;\n  }\n\n  // save cluster result\n  // need test\n  size_t i = 0;\n  for (size_t id& existing_sample_id) {\n    samples->at<i> = samples->at(id);\n  }\n  samples->resize(sample_num);\n}\n\nvoid IntensityMapBuilder::createImage(cv::Mat* image) {\n  // get necessary information from ndt_map_data_\n  int min_tile_id_x = 0, max_tile_id_x = 10;\n  int min_tile_id_y = 0, max_tile_id_y = 10;\n  float min_height = 0, max_height = 10;\n  float min_intensity = 0, max_intensity = 255;\n\n  int image_width =\n      static_cast<int>((max_tile_id_x - min_tile_id_x + 1) * param_.tile_size / param_.grid_size);\n  int image_height =\n      static_cast<int>((max_tile_id_y - min_tile_id_y + 1) * param_.tile_size / param_.grid_size);\n\n  // make image\n  cv::Mat blank_image = cv::Mat::zeros(image_height, image_width, CV_U8C3);\n  blank_image.copyTo(*image);\n  for (auto grid2_sample : grid2_samples_) {\n    // set pixel value\n  }\n}\n\nvoid IntensityMapBuilder::createHeightInfo(/* protoBufType *intensity_map_info */) {}\n\nbool IntensityMapBuilder::saveIntensityMap(const std::string& output_folder, const cv::Mat& image\n                                           /*const protoBufType *intensity_map_info */) {\n  // check or make output folder\n\n  // save image\n  std::string image_name = output_folder + \"/intensity_image.png\";\n  cv::imwrite(image_name, image);\n\n  // save intensity_map_info\n\n  return true;\n}\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/intensity_map_builder.cpp"
		}
	}
]
I0402 15:51:51.375023  6334 json_parser.cpp:18] 
[
	6,
	{
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/intensity_map_builder.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DROS_PACKAGE_NAME=\\\"v2_mapping\\\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-Dv2_mapping_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/usr/lib/openmpi/include",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dinertial_nav_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/python2.7",
			"-I/usr/include/vtk-6.2",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/pcl-1.7",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/freetype2",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DQT_CORE_LIB",
			"-I/usr/include/openni2",
			"-I/home/mr/Workspace/loc/src/v2/build/common/proto",
			"-I/usr/include/hdf5/openmpi",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-DQT_NO_DEBUG",
			"-Dcommon_io_EXPORTS",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\"common\\\"",
			"-Dcommon_proto_EXPORTS",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/usr/include/eigen3",
			"-I/usr/include/libxml2",
			"-I/opt/ros/kinetic/include",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-DDISABLE_PNG",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-Dcommon_geometry_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/home/mr/Workspace/loc/src/v2/third_party/thread_pool",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All rights reserved.\n// Authors: Yongjian Zhao (yongjian.zhao@allride.ai)\n\n#include <priority_queue>\n#include <set>\n\n#include \"intensity_map_builder.h\"\n\nvoid ClusterSample::ClusterSample(const ClusterSmaple& other) {\n  this->point_num += other.point_num;\n\n  float other_weight = static_cast<float>(other.point_num) / this->point_num;\n  float this_weight = 1.0f - other_weight;\n\n  this->height = this_weight * this->height + other_weight * other.height;\n  this->intensity = this_weigh * this->intensity + other_weight * other.intensity;\n}\n\nvoid IntensityMapBuilder::buildIntensityMap(const std::string& output_folder) {\n  // To initialize grid2_samples_, each ndt3 grid is one ClusterSample\n  // for each grid2 sample, there are several Cluster\n\n  // height cluster for each grid2_sample\n  for (auto& grid2_smaple : grid2_samples_) {\n    heightCluster(&grid2_smaple.second);\n  }\n\n  // create image acoording to grid2_samples_\n  cv::Mat intensity_image;\n  createImage(&intensity_image);\n\n  // create intensity_map_info according to grid2_samples_\n  /* protoBufType intensity_map_info */\n  createHeightInfo(/*&intensity_map_info*/);\n\n  // save image and intensity_map_info\n  saveIntensityMap(output_folder, intensity_image /*, intensity_map_info*/);\n}\n\nvoid IntensityMapBuilder::heightCluster(std::vector<ClusterSample>* samples) {\n  size_t sample_num = samples->size();\n\n  // make existing_sample_id\n  std::set<size_t> existing_sample_id;\n  for (size_t i = 0; i < sample_num; i++) {\n    existing_sample_id.insert(i);\n  }\n\n  // make distance_queue\n  std::priority_queue<QueueElement, std::vector<QueueElement>, QueueElementCompare> distance_queue;\n  for (size_t i = 0; i < sample_num; i++) {\n    for (size_t j = i + 1; j < sample_num; j++) {\n      float distance = fabs(samples->at(i).height - samples->at(j).height);\n      distance_queue.emplace(distance, i, j);\n    }\n  }\n\n  // cluster\n  const float distance_th = 4.0f;\n  while (true) {\n    // find min_distance between each ClusterSample\n    QueueElement element = distance_queue.top() distance_queue.pop();\n    if (element.distance > distance_th) {\n      break;\n    }\n\n    if (existing_sample_id.count(element.small_id) == 0) {\n      continue;\n    }\n\n    if (existing_sample_id.count(element.big_id) == 0) {\n      continue;\n    }\n\n    // merge two nearest samples\n    samples->at(element.small_id).merge(samples->at(element.big_id));\n    existing_sample_id.erase(element.big_id);\n    sample_num--;\n  }\n\n  if (existing_sample_id.size() != sample_num) {\n    std::cout << \"error: existing_sample_id.size() does not equal to sample_num!\" << std::endl;\n  }\n\n  // save cluster result\n  // need test\n  size_t i = 0;\n  for (size_t id& existing_sample_id) {\n    samples->at<i> = samples->at(id);\n  }\n  samples->resize(sample_num);\n}\n\nvoid IntensityMapBuilder::createImage(cv::Mat* image) {\n  // get necessary information from ndt_map_data_\n  int min_tile_id_x = 0, max_tile_id_x = 10;\n  int min_tile_id_y = 0, max_tile_id_y = 10;\n  float min_height = 0, max_height = 10;\n  float min_intensity = 0, max_intensity = 255;\n\n  int image_width =\n      static_cast<int>((max_tile_id_x - min_tile_id_x + 1) * param_.tile_size / param_.grid_size);\n  int image_height =\n      static_cast<int>((max_tile_id_y - min_tile_id_y + 1) * param_.tile_size / param_.grid_size);\n\n  // make image\n  cv::Mat blank_image = cv::Mat::zeros(image_height, image_width, CV_U8C3);\n  blank_image.copyTo(*image);\n  for (auto grid2_sample : grid2_samples_) {\n    // set pixel value\n  }\n}\n\nvoid IntensityMapBuilder::createHeightInfo(/* protoBufType *intensity_map_info */) {}\n\nbool IntensityMapBuilder::saveIntensityMap(const std::string& output_folder, const cv::Mat& image\n                                           /*const protoBufType *intensity_map_info */) {\n  // check or make output folder\n\n  // save image\n  std::string image_name = output_folder + \"/intensity_image.png\";\n  cv::imwrite(image_name, image);\n\n  // save intensity_map_info\n\n  return true;\n}\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/intensity_map_builder.cpp"
		}
	}
]
I0402 15:51:51.476370  6334 json_parser.cpp:18] 
[
	7,
	{
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DROS_PACKAGE_NAME=\\\"v2_mapping\\\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-Dv2_mapping_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/usr/lib/openmpi/include",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dinertial_nav_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/python2.7",
			"-I/usr/include/vtk-6.2",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/pcl-1.7",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/freetype2",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DQT_CORE_LIB",
			"-I/usr/include/openni2",
			"-I/home/mr/Workspace/loc/src/v2/build/common/proto",
			"-I/usr/include/hdf5/openmpi",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-DQT_NO_DEBUG",
			"-Dcommon_io_EXPORTS",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\"common\\\"",
			"-Dcommon_proto_EXPORTS",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/usr/include/eigen3",
			"-I/usr/include/libxml2",
			"-I/opt/ros/kinetic/include",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-DDISABLE_PNG",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-Dcommon_geometry_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/home/mr/Workspace/loc/src/v2/third_party/thread_pool",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include \"common/math/eigen_types.h\"\n\n#include \"common/proto/config/config_map.pb.h\"\n\n#include \"lidar_map.h\"\n#include \"local_database.h\"\n#include \"map_layer.h\"\n#include \"map_scope.h\"\n#include \"ndt3interface.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass LidarMapOffline : public LidarMap {\n public:\n  /// @brief configure the LidarMapOffline class, mainly static members\n  /// which shared by all LidarMapOffline instance, such as database\n  ///\n  /// @param mode[in] specify the database operation mode, read, write, create...\n  ///\n  /// @note this should be called first before any operation about\n  /// LidarMapOffline\n  static bool configure(LocalDatabase::MODE mode);\n\n  /// @brief get the cache range(in number of tiles)\n  static int getCacheRange() { return LidarMap::cache_range_; }\n\n  /// @brief get the watermark of tile cache\n  static int getCacheMargin() { return LidarMap::cache_margin_; }\n\n  /// @brief implimention of LidarMap::initializeLayer, see LidarMap for more infomation\n  bool initializeLayer(int layer_id) override;\n\n  /// @brief initialize a layer by specify type_name, grid_size and tile\n  /// @return the layer_id of the initilized layer, if failed, a negtive number will be returned\n  int initializeLayer(const std::string& type_name, float grid_size, float tile_size);\n\n  /// @brief implimention of LidarMap::addPointCloud, see LidarMap for more infomation\n  bool addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) override;\n\n  /// @brief load the map to cache\n  /// @param[in] pos the center of the region to be loaded\n  /// @return true on succeed, else false\n  bool load(const Eigen::Vector3f& pos);\n\n  /// @brief Get the map of a layer in specific region\n  ///\n  /// @param layer_id[in] specify which layer to get\n  /// @param[in] scope specifies the submap region.\n  /// @param[in] blocking if is true, this call will block if cache miss happens,\n  /// until tiles are loaded or timeout\n  /// @param[out] ndt3 stores the map we got\n  ///\n  /// @return true on succeed, else false. we may fails when there is a cache miss\n  /// in blocking mode\n  bool getMap(int layer_id, const MapScope& scope, bool blocking,\n              std::shared_ptr<Ndt3Interface>* ndt3);\n\n  /// @brief add a layer (when building map)\n  ///\n  /// @param layer_item[in] a layer item contains nessecery infomation\n  /// to add one layer\n  ///\n  /// @return true on succeed, else false\n  bool addLayer(const proto::config::MapLayerItem& layer_item);\n\n  /// @brief add a layer (when building map)\n  ///\n  /// @return the layer id of the layer we add\n  int addLayer(const std::string& type_name, float grid_size, float tile_size);\n\n  /// @brief save the map into database\n  ///\n  /// @return true on succeed, else false\n  bool save();\n\n  /// @brief get one maplayer\n  ///\n  /// @param layer_id[in] specify which layer to get\n  ///\n  /// @return a const ref of maplayer\n  const MapLayer& getLayer(int layer_id);\n\n  /// @brief get one maplayer\n  ///\n  /// @param type_name[in] such as ndt3_corner...\n  ///\n  /// @return a const ref of maplayer\n  const MapLayer& getLayer(const std::string& type_name, float grid_size, float tile_size);\n\n private:\n  static std::shared_ptr<LocalDatabase> database_;\n  static LocalDatabase::MODE database_operation_mode_;\n  static proto::map::MapInfo map_info_;\n\n  std::map<int, std::shared_ptr<MapLayer>> layers_;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.h"
		}
	}
]
I0402 15:51:51.545315  6334 json_parser.cpp:18] 
[
	8,
	{
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DROS_PACKAGE_NAME=\\\"v2_mapping\\\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-Dv2_mapping_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/usr/lib/openmpi/include",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dinertial_nav_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/python2.7",
			"-I/usr/include/vtk-6.2",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/pcl-1.7",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/freetype2",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DQT_CORE_LIB",
			"-I/usr/include/openni2",
			"-I/home/mr/Workspace/loc/src/v2/build/common/proto",
			"-I/usr/include/hdf5/openmpi",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-DQT_NO_DEBUG",
			"-Dcommon_io_EXPORTS",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\"common\\\"",
			"-Dcommon_proto_EXPORTS",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/usr/include/eigen3",
			"-I/usr/include/libxml2",
			"-I/opt/ros/kinetic/include",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-DDISABLE_PNG",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-Dcommon_geometry_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/home/mr/Workspace/loc/src/v2/third_party/thread_pool",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include \"common/math/eigen_types.h\"\n\n#include \"common/proto/config/config_map.pb.h\"\n\n#include \"lidar_map.h\"\n#include \"local_database.h\"\n#include \"map_layer.h\"\n#include \"map_scope.h\"\n#include \"ndt3interface.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass LidarMapOffline : public LidarMap {\n public:\n  /// @brief configure the LidarMapOffline class, mainly static members\n  /// which shared by all LidarMapOffline instance, such as database\n  ///\n  /// @param mode[in] specify the database operation mode, read, write, create...\n  ///\n  /// @note this should be called first before any operation about\n  /// LidarMapOffline\n  static bool configure(LocalDatabase::MODE mode);\n\n  /// @brief get the cache range(in number of tiles)\n  static int getCacheRange() { return LidarMap::cache_range_; }\n\n  /// @brief get the watermark of tile cache\n  static int getCacheMargin() { return LidarMap::cache_margin_; }\n\n  /// @brief implimention of LidarMap::initializeLayer, see LidarMap for more infomation\n  bool initializeLayer(int layer_id) override;\n\n  /// @brief initialize a layer by specify type_name, grid_size and tile\n  /// @return the layer_id of the initilized layer, if failed, a negtive number will be returned\n  int initializeLayer(const std::string& type_name, float grid_size, float tile_size);\n\n  /// @brief implimention of LidarMap::addPointCloud, see LidarMap for more infomation\n  bool addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) override;\n\n  /// @brief load the map to cache\n  /// @param[in] pos the center of the region to be loaded\n  /// @return true on succeed, else false\n  bool load(const Eigen::Vector3f& pos);\n\n  /// @brief Get the map of a layer in specific region\n  ///\n  /// @param layer_id[in] specify which layer to get\n  /// @param[in] scope specifies the submap region.\n  /// @param[in] blocking if is true, this call will block if cache miss happens,\n  /// until tiles are loaded or timeout\n  /// @param[out] ndt3 stores the map we got\n  ///\n  /// @return true on succeed, else false. we may fails when there is a cache miss\n  /// in blocking mode\n  bool getMap(int layer_id, const MapScope& scope, bool blocking,\n              std::shared_ptr<Ndt3Interface>* ndt3);\n\n  /// @brief add a layer (when building map)\n  ///\n  /// @param layer_item[in] a layer item contains nessecery infomation\n  /// to add one layer\n  ///\n  /// @return true on succeed, else false\n  bool addLayer(const proto::config::MapLayerItem& layer_item);\n\n  /// @brief add a layer (when building map)\n  ///\n  /// @return the layer id of the layer we add\n  int addLayer(const std::string& type_name, float grid_size, float tile_size);\n\n  /// @brief save the map into database\n  ///\n  /// @return true on succeed, else false\n  bool save();\n\n  /// @brief get one maplayer\n  ///\n  /// @param layer_id[in] specify which layer to get\n  ///\n  /// @return a const ref of maplayer\n  const MapLayer& getLayer(int layer_id);\n\n  /// @brief get one maplayer\n  ///\n  /// @param type_name[in] such as ndt3_corner...\n  ///\n  /// @return a const ref of maplayer\n  const MapLayer& getLayer(const std::string& type_name, float grid_size, float tile_size);\n\n private:\n  static std::shared_ptr<LocalDatabase> database_;\n  static LocalDatabase::MODE database_operation_mode_;\n  static proto::map::MapInfo map_info_;\n\n  std::map<int, std::shared_ptr<MapLayer>> layers_;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.h"
		}
	}
]
I0402 15:51:56.143841  6334 json_parser.cpp:18] 
[
	9,
	{
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DROS_PACKAGE_NAME=\\\"v2_mapping\\\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-Dv2_mapping_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/usr/lib/openmpi/include",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dinertial_nav_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/python2.7",
			"-I/usr/include/vtk-6.2",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/pcl-1.7",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/freetype2",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DQT_CORE_LIB",
			"-I/usr/include/openni2",
			"-I/home/mr/Workspace/loc/src/v2/build/common/proto",
			"-I/usr/include/hdf5/openmpi",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-DQT_NO_DEBUG",
			"-Dcommon_io_EXPORTS",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\"common\\\"",
			"-Dcommon_proto_EXPORTS",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/usr/include/eigen3",
			"-I/usr/include/libxml2",
			"-I/opt/ros/kinetic/include",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-DDISABLE_PNG",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-Dcommon_geometry_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/home/mr/Workspace/loc/src/v2/third_party/thread_pool",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include \"common/math/eigen_types.h\"\n\n#include \"common/proto/config/config_map.pb.h\"\n\n#include \"lidar_map.h\"\n#include \"local_database.h\"\n#include \"map_layer.h\"\n#include \"map_scope.h\"\n#include \"ndt3interface.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass LidarMapOffline : public LidarMap {\n public:\n  /// @brief configure the LidarMapOffline class, mainly static members\n  /// which shared by all LidarMapOffline instance, such as database\n  ///\n  /// @param mode[in] specify the database operation mode, read, write, create...\n  ///\n  /// @note this should be called first before any operation about\n  /// LidarMapOffline\n  static bool configure(LocalDatabase::MODE mode);\n\n  /// @brief get the cache range(in number of tiles)\n  static int getCacheRange() { return LidarMap::cache_range_; }\n\n  /// @brief get the watermark of tile cache\n  static int getCacheMargin() { return LidarMap::cache_margin_; }\n\n  /// @brief implimention of LidarMap::initializeLayer, see LidarMap for more infomation\n  bool initializeLayer(int layer_id) override;\n\n  /// @brief initialize a layer by specify type_name, grid_size and tile\n  /// @return the layer_id of the initilized layer, if failed, a negtive number will be returned\n  int initializeLayer(const std::string& type_name, float grid_size, float tile_size);\n\n  /// @brief implimention of LidarMap::addPointCloud, see LidarMap for more infomation\n  bool addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) override;\n\n  /// @brief load the map to cache\n  /// @param[in] pos the center of the region to be loaded\n  /// @return true on succeed, else false\n  bool load(const Eigen::Vector3f& pos);\n\n  /// @brief Get the map of a layer in specific region\n  ///\n  /// @param layer_id[in] specify which layer to get\n  /// @param[in] scope specifies the submap region.\n  /// @param[in] blocking if is true, this call will block if cache miss happens,\n  /// until tiles are loaded or timeout\n  /// @param[out] ndt3 stores the map we got\n  ///\n  /// @return true on succeed, else false. we may fails when there is a cache miss\n  /// in blocking mode\n  bool getMap(int layer_id, const MapScope& scope, bool blocking,\n              std::shared_ptr<Ndt3Interface>* ndt3);\n\n  /// @brief add a layer (when building map)\n  ///\n  /// @param layer_item[in] a layer item contains nessecery infomation\n  /// to add one layer\n  ///\n  /// @return true on succeed, else false\n  bool addLayer(const proto::config::MapLayerItem& layer_item);\n\n  /// @brief add a layer (when building map)\n  ///\n  /// @return the layer id of the layer we add\n  int addLayer(const std::string& type_name, float grid_size, float tile_size);\n\n  /// @brief save the map into database\n  ///\n  /// @return true on succeed, else false\n  bool save();\n\n  /// @brief get one maplayer\n  ///\n  /// @param layer_id[in] specify which layer to get\n  ///\n  /// @return a const ref of maplayer\n  const MapLayer& getLayer(int layer_id);\n\n  /// @brief get one maplayer\n  ///\n  /// @param type_name[in] such as ndt3_corner...\n  ///\n  /// @return a const ref of maplayer\n  const MapLayer& getLayer(const std::string& type_name, float grid_size, float tile_size);\n\n private:\n  static std::shared_ptr<LocalDatabase> database_;\n  static LocalDatabase::MODE database_operation_mode_;\n  static proto::map::MapInfo map_info_;\n\n  std::map<int, std::shared_ptr<MapLayer>> layers_;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.h"
		}
	}
]
I0402 15:51:56.158893  6334 json_parser.cpp:18] 
[
	10,
	{
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DROS_PACKAGE_NAME=\\\"v2_mapping\\\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-Dv2_mapping_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/usr/lib/openmpi/include",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dinertial_nav_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/python2.7",
			"-I/usr/include/vtk-6.2",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/pcl-1.7",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/freetype2",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DQT_CORE_LIB",
			"-I/usr/include/openni2",
			"-I/home/mr/Workspace/loc/src/v2/build/common/proto",
			"-I/usr/include/hdf5/openmpi",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-DQT_NO_DEBUG",
			"-Dcommon_io_EXPORTS",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\"common\\\"",
			"-Dcommon_proto_EXPORTS",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/usr/include/eigen3",
			"-I/usr/include/libxml2",
			"-I/opt/ros/kinetic/include",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-DDISABLE_PNG",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-Dcommon_geometry_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/home/mr/Workspace/loc/src/v2/third_party/thread_pool",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include \"common/math/eigen_types.h\"\n\n#include \"common/proto/config/config_map.pb.h\"\n\n#include \"lidar_map.h\"\n#include \"local_database.h\"\n#include \"map_layer.h\"\n#include \"map_scope.h\"\n#include \"ndt3interface.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass LidarMapOffline : public LidarMap {\n public:\n  /// @brief configure the LidarMapOffline class, mainly static members\n  /// which shared by all LidarMapOffline instance, such as database\n  ///\n  /// @param mode[in] specify the database operation mode, read, write, create...\n  ///\n  /// @note this should be called first before any operation about\n  /// LidarMapOffline\n  static bool configure(LocalDatabase::MODE mode);\n\n  /// @brief get the cache range(in number of tiles)\n  static int getCacheRange() { return LidarMap::cache_range_; }\n\n  /// @brief get the watermark of tile cache\n  static int getCacheMargin() { return LidarMap::cache_margin_; }\n\n  /// @brief implimention of LidarMap::initializeLayer, see LidarMap for more infomation\n  bool initializeLayer(int layer_id) override;\n\n  /// @brief initialize a layer by specify type_name, grid_size and tile\n  /// @return the layer_id of the initilized layer, if failed, a negtive number will be returned\n  int initializeLayer(const std::string& type_name, float grid_size, float tile_size);\n\n  /// @brief implimention of LidarMap::addPointCloud, see LidarMap for more infomation\n  bool addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) override;\n\n  /// @brief load the map to cache\n  /// @param[in] pos the center of the region to be loaded\n  /// @return true on succeed, else false\n  bool load(const Eigen::Vector3f& pos);\n\n  /// @brief Get the map of a layer in specific region\n  ///\n  /// @param layer_id[in] specify which layer to get\n  /// @param[in] scope specifies the submap region.\n  /// @param[in] blocking if is true, this call will block if cache miss happens,\n  /// until tiles are loaded or timeout\n  /// @param[out] ndt3 stores the map we got\n  ///\n  /// @return true on succeed, else false. we may fails when there is a cache miss\n  /// in blocking mode\n  bool getMap(int layer_id, const MapScope& scope, bool blocking,\n              std::shared_ptr<Ndt3Interface>* ndt3);\n\n  /// @brief add a layer (when building map)\n  ///\n  /// @param layer_item[in] a layer item contains nessecery infomation\n  /// to add one layer\n  ///\n  /// @return true on succeed, else false\n  bool addLayer(const proto::config::MapLayerItem& layer_item);\n\n  /// @brief add a layer (when building map)\n  ///\n  /// @return the layer id of the layer we add\n  int addLayer(const std::string& type_name, float grid_size, float tile_size);\n\n  /// @brief save the map into database\n  ///\n  /// @return true on succeed, else false\n  bool save();\n\n  /// @brief get one maplayer\n  ///\n  /// @param layer_id[in] specify which layer to get\n  ///\n  /// @return a const ref of maplayer\n  const MapLayer& getLayer(int layer_id);\n\n  /// @brief get one maplayer\n  ///\n  /// @param type_name[in] such as ndt3_corner...\n  ///\n  /// @return a const ref of maplayer\n  const MapLayer& getLayer(const std::string& type_name, float grid_size, float tile_size);\n\n private:\n  static std::shared_ptr<LocalDatabase> database_;\n  static LocalDatabase::MODE database_operation_mode_;\n  static proto::map::MapInfo map_info_;\n\n  std::map<int, std::shared_ptr<MapLayer>> layers_;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.h"
		}
	}
]
I0402 15:51:56.170862  6334 json_parser.cpp:18] 
[
	11,
	{
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DROS_PACKAGE_NAME=\\\"v2_mapping\\\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-Dv2_mapping_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/usr/lib/openmpi/include",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dinertial_nav_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/python2.7",
			"-I/usr/include/vtk-6.2",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/pcl-1.7",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/freetype2",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DQT_CORE_LIB",
			"-I/usr/include/openni2",
			"-I/home/mr/Workspace/loc/src/v2/build/common/proto",
			"-I/usr/include/hdf5/openmpi",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-DQT_NO_DEBUG",
			"-Dcommon_io_EXPORTS",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\"common\\\"",
			"-Dcommon_proto_EXPORTS",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/usr/include/eigen3",
			"-I/usr/include/libxml2",
			"-I/opt/ros/kinetic/include",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-DDISABLE_PNG",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-Dcommon_geometry_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/home/mr/Workspace/loc/src/v2/third_party/thread_pool",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include \"common/math/eigen_types.h\"\n\n#include \"common/proto/config/config_map.pb.h\"\n\n#include \"lidar_map.h\"\n#include \"local_database.h\"\n#include \"map_layer.h\"\n#include \"map_scope.h\"\n#include \"ndt3interface.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass LidarMapOffline : public LidarMap {\n public:\n  /// @brief configure the LidarMapOffline class, mainly static members\n  /// which shared by all LidarMapOffline instance, such as database\n  ///\n  /// @param mode[in] specify the database operation mode, read, write, create...\n  ///\n  /// @note this should be called first before any operation about\n  /// LidarMapOffline\n  static bool configure(LocalDatabase::MODE mode);\n\n  /// @brief get the cache range(in number of tiles)\n  static int getCacheRange() { return LidarMap::cache_range_; }\n\n  /// @brief get the watermark of tile cache\n  static int getCacheMargin() { return LidarMap::cache_margin_; }\n\n  /// @brief implimention of LidarMap::initializeLayer, see LidarMap for more infomation\n  bool initializeLayer(int layer_id) override;\n\n  /// @brief initialize a layer by specify type_name, grid_size and tile\n  /// @return the layer_id of the initilized layer, if failed, a negtive number will be returned\n  int initializeLayer(const std::string& type_name, float grid_size, float tile_size);\n\n  /// @brief implimention of LidarMap::addPointCloud, see LidarMap for more infomation\n  bool addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) override;\n\n  /// @brief load the map to cache\n  /// @param[in] pos the center of the region to be loaded\n  /// @return true on succeed, else false\n  bool load(const Eigen::Vector3f& pos);\n\n  /// @brief Get the map of a layer in specific region\n  ///\n  /// @param layer_id[in] specify which layer to get\n  /// @param[in] scope specifies the submap region.\n  /// @param[in] blocking if is true, this call will block if cache miss happens,\n  /// until tiles are loaded or timeout\n  /// @param[out] ndt3 stores the map we got\n  ///\n  /// @return true on succeed, else false. we may fails when there is a cache miss\n  /// in blocking mode\n  bool getMap(int layer_id, const MapScope& scope, bool blocking,\n              std::shared_ptr<Ndt3Interface>* ndt3);\n\n  /// @brief add a layer (when building map)\n  ///\n  /// @param layer_item[in] a layer item contains nessecery infomation\n  /// to add one layer\n  ///\n  /// @return true on succeed, else false\n  bool addLayer(const proto::config::MapLayerItem& layer_item);\n\n  /// @brief add a layer (when building map)\n  ///\n  /// @return the layer id of the layer we add\n  int addLayer(const std::string& type_name, float grid_size, float tile_size);\n\n  /// @brief save the map into database\n  ///\n  /// @return true on succeed, else false\n  bool save();\n\n  /// @brief get one maplayer\n  ///\n  /// @param layer_id[in] specify which layer to get\n  ///\n  /// @return a const ref of maplayer\n  const MapLayer& getLayer(int layer_id);\n\n  /// @brief get one maplayer\n  ///\n  /// @param type_name[in] such as ndt3_corner...\n  ///\n  /// @return a const ref of maplayer\n  const MapLayer& getLayer(const std::string& type_name, float grid_size, float tile_size);\n\n private:\n  static std::shared_ptr<LocalDatabase> database_;\n  static LocalDatabase::MODE database_operation_mode_;\n  static proto::map::MapInfo map_info_;\n\n  std::map<int, std::shared_ptr<MapLayer>> layers_;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.h"
		}
	}
]
I0402 15:51:56.194840  6334 json_parser.cpp:18] 
[
	12,
	{
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DROS_PACKAGE_NAME=\\\"v2_mapping\\\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-Dv2_mapping_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/usr/lib/openmpi/include",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dinertial_nav_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/python2.7",
			"-I/usr/include/vtk-6.2",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/pcl-1.7",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/freetype2",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DQT_CORE_LIB",
			"-I/usr/include/openni2",
			"-I/home/mr/Workspace/loc/src/v2/build/common/proto",
			"-I/usr/include/hdf5/openmpi",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-DQT_NO_DEBUG",
			"-Dcommon_io_EXPORTS",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\"common\\\"",
			"-Dcommon_proto_EXPORTS",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/usr/include/eigen3",
			"-I/usr/include/libxml2",
			"-I/opt/ros/kinetic/include",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-DDISABLE_PNG",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-Dcommon_geometry_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/home/mr/Workspace/loc/src/v2/third_party/thread_pool",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n\n#include \"lidar_map_offline.h\"\n#include \"lmdb_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nstd::shared_ptr<LocalDatabase> LidarMapOffline::database_ = nullptr;\nLocalDatabase::MODE LidarMapOffline::database_operation_mode_;\nproto::map::MapInfo LidarMapOffline::map_info_;\n\nbool LidarMapOffline::configure(LocalDatabase::MODE mode) {\n  database_ = std::shared_ptr<LmdbDatabase>(new LmdbDatabase);\n  database_operation_mode_ = mode;\n\n  if (!database_->open(database_path_, database_operation_mode_)) {\n    return false;\n  }\n\n  std::string map_info_data;\n  if (database_->get(\"MapInfo\", &map_info_data)) {\n    return false;\n  }\n\n  if (!map_info_.ParseFromString(map_info_data)) {\n    return false;\n  }\n\n  return true;\n}\n\nbool LidarMapOffline::initializeLayer(int layer_id) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-initialize\n  }\n\n  // find the layer infomation in database\n  int layer_info_index = -1;\n  for (int i = 0; i < map_info_.layer_infos_size(); ++i) {\n    if (layer_id == map_info_.layer_infos(i).layer_id()) {\n      layer_info_index = i;\n      break;\n    }\n  }\n  if (-1 == layer_info_index) {\n    return false;  // the specific layer_id do not exist in database\n  }\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(map_info_.layer_infos(layer_info_index), database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::initializeLayer(const std::string& type_name, float grid_size,\n                                     float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  return initializeLayer(layer_id);\n}\n\nbool LidarMapOffline::load(const Eigen::Vector3f& pos) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->load(pos);\n  }\n\n  return ret;\n}\n\nbool LidarMapOffline::addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->addPointCloud(pointcloud);\n\n  return false;\n}\n\nbool LidarMapOffline::getMap(int layer_id, const MapScope& scope, bool blocking,\n                             std::shared_ptr<Ndt3Interface>* ndt3) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->getMap(scope, blocking, ndt3);\n\n  return false;\n}\n\nbool LidarMapOffline::addLayer(const proto::config::MapLayerItem& layer_item) {\n  // initializeLayer is only used in wrtie and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  int layer_id = layer_item.layer_id();\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-add\n  }\n\n  // construct a layer_info\n  proto::map::MapLayerInfo layer_info;\n  layer_info.set_layer_id(layer_item.layer_id());\n  layer_info.set_grid_size(layer_item.grid_size());\n  layer_info.set_tile_size(layer_item.tile_size());\n  layer_info.set_type_name(layer_item.type_name());\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(layer_info, database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::addLayer(const std::string& type_name, float grid_size, float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  proto::config::MapLayerItem item;\n  item.set_layer_id(layer_id);\n  item.set_type_name(type_name);\n  item.set_grid_size(grid_size);\n  item.set_tile_size(tile_size);\n\n  if (!addLayer(item)) {\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::save() {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->save();\n  }\n\n  return ret;\n}\n\nconst MapLayer& LidarMapOffline::getLayer(int layer_id) { return *(layers_[layer_id]); }\n\nconst MapLayer& LidarMapOffline::getLayer(const std::string& type_name, float grid_size,\n                                          float tile_size) {\n  int layer_id;\n  map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id);\n  return *(layers_[layer_id]);\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp"
		}
	}
]
I0402 15:51:56.262856  6334 json_parser.cpp:18] 
[
	13,
	{
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DROS_PACKAGE_NAME=\\\"v2_mapping\\\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-Dv2_mapping_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/usr/lib/openmpi/include",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dinertial_nav_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/python2.7",
			"-I/usr/include/vtk-6.2",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/pcl-1.7",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/freetype2",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DQT_CORE_LIB",
			"-I/usr/include/openni2",
			"-I/home/mr/Workspace/loc/src/v2/build/common/proto",
			"-I/usr/include/hdf5/openmpi",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-DQT_NO_DEBUG",
			"-Dcommon_io_EXPORTS",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\"common\\\"",
			"-Dcommon_proto_EXPORTS",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/usr/include/eigen3",
			"-I/usr/include/libxml2",
			"-I/opt/ros/kinetic/include",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-DDISABLE_PNG",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-Dcommon_geometry_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/home/mr/Workspace/loc/src/v2/third_party/thread_pool",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n\n#include \"lidar_map_offline.h\"\n#include \"lmdb_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nstd::shared_ptr<LocalDatabase> LidarMapOffline::database_ = nullptr;\nLocalDatabase::MODE LidarMapOffline::database_operation_mode_;\nproto::map::MapInfo LidarMapOffline::map_info_;\n\nbool LidarMapOffline::configure(LocalDatabase::MODE mode) {\n  database_ = std::shared_ptr<LmdbDatabase>(new LmdbDatabase);\n  database_operation_mode_ = mode;\n\n  if (!database_->open(database_path_, database_operation_mode_)) {\n    return false;\n  }\n\n  std::string map_info_data;\n  if (database_->get(\"MapInfo\", &map_info_data)) {\n    return false;\n  }\n\n  if (!map_info_.ParseFromString(map_info_data)) {\n    return false;\n  }\n\n  return true;\n}\n\nbool LidarMapOffline::initializeLayer(int layer_id) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-initialize\n  }\n\n  // find the layer infomation in database\n  int layer_info_index = -1;\n  for (int i = 0; i < map_info_.layer_infos_size(); ++i) {\n    if (layer_id == map_info_.layer_infos(i).layer_id()) {\n      layer_info_index = i;\n      break;\n    }\n  }\n  if (-1 == layer_info_index) {\n    return false;  // the specific layer_id do not exist in database\n  }\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(map_info_.layer_infos(layer_info_index), database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::initializeLayer(const std::string& type_name, float grid_size,\n                                     float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  return initializeLayer(layer_id);\n}\n\nbool LidarMapOffline::load(const Eigen::Vector3f& pos) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->load(pos);\n  }\n\n  return ret;\n}\n\nbool LidarMapOffline::addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->addPointCloud(pointcloud);\n\n  return false;\n}\n\nbool LidarMapOffline::getMap(int layer_id, const MapScope& scope, bool blocking,\n                             std::shared_ptr<Ndt3Interface>* ndt3) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->getMap(scope, blocking, ndt3);\n\n  return false;\n}\n\nbool LidarMapOffline::addLayer(const proto::config::MapLayerItem& layer_item) {\n  // initializeLayer is only used in wrtie and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  int layer_id = layer_item.layer_id();\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-add\n  }\n\n  // construct a layer_info\n  proto::map::MapLayerInfo layer_info;\n  layer_info.set_layer_id(layer_item.layer_id());\n  layer_info.set_grid_size(layer_item.grid_size());\n  layer_info.set_tile_size(layer_item.tile_size());\n  layer_info.set_type_name(layer_item.type_name());\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(layer_info, database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::addLayer(const std::string& type_name, float grid_size, float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  proto::config::MapLayerItem item;\n  item.set_layer_id(layer_id);\n  item.set_type_name(type_name);\n  item.set_grid_size(grid_size);\n  item.set_tile_size(tile_size);\n\n  if (!addLayer(item)) {\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::save() {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->save();\n  }\n\n  return ret;\n}\n\nconst MapLayer& LidarMapOffline::getLayer(int layer_id) { return *(layers_[layer_id]); }\n\nconst MapLayer& LidarMapOffline::getLayer(const std::string& type_name, float grid_size,\n                                          float tile_size) {\n  int layer_id;\n  map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id);\n  return *(layers_[layer_id]);\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp"
		}
	}
]
I0402 15:52:05.499783  6334 json_parser.cpp:18] 
[
	14,
	{
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DROS_PACKAGE_NAME=\\\"v2_mapping\\\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-Dv2_mapping_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/usr/lib/openmpi/include",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dinertial_nav_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/python2.7",
			"-I/usr/include/vtk-6.2",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/pcl-1.7",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/freetype2",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DQT_CORE_LIB",
			"-I/usr/include/openni2",
			"-I/home/mr/Workspace/loc/src/v2/build/common/proto",
			"-I/usr/include/hdf5/openmpi",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-DQT_NO_DEBUG",
			"-Dcommon_io_EXPORTS",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\"common\\\"",
			"-Dcommon_proto_EXPORTS",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/usr/include/eigen3",
			"-I/usr/include/libxml2",
			"-I/opt/ros/kinetic/include",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-DDISABLE_PNG",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-Dcommon_geometry_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/home/mr/Workspace/loc/src/v2/third_party/thread_pool",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n\n#include \"lidar_map_offline.h\"\n#include \"lmdb_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nstd::shared_ptr<LocalDatabase> LidarMapOffline::database_ = nullptr;\nLocalDatabase::MODE LidarMapOffline::database_operation_mode_;\nproto::map::MapInfo LidarMapOffline::map_info_;\n\nbool LidarMapOffline::configure(LocalDatabase::MODE mode) {\n  database_ = std::shared_ptr<LmdbDatabase>(new LmdbDatabase);\n  database_operation_mode_ = mode;\n\n  if (!database_->open(database_path_, database_operation_mode_)) {\n    return false;\n  }\n\n  std::string map_info_data;\n  if (database_->get(\"MapInfo\", &map_info_data)) {\n    return false;\n  }\n\n  if (!map_info_.ParseFromString(map_info_data)) {\n    return false;\n  }\n\n  return true;\n}\n\nbool LidarMapOffline::initializeLayer(int layer_id) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-initialize\n  }\n\n  // find the layer infomation in database\n  int layer_info_index = -1;\n  for (int i = 0; i < map_info_.layer_infos_size(); ++i) {\n    if (layer_id == map_info_.layer_infos(i).layer_id()) {\n      layer_info_index = i;\n      break;\n    }\n  }\n  if (-1 == layer_info_index) {\n    return false;  // the specific layer_id do not exist in database\n  }\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(map_info_.layer_infos(layer_info_index), database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::initializeLayer(const std::string& type_name, float grid_size,\n                                     float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n  \n\n  return initializeLayer(layer_id);\n}\n\nbool LidarMapOffline::load(const Eigen::Vector3f& pos) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->load(pos);\n  }\n\n  return ret;\n}\n\nbool LidarMapOffline::addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->addPointCloud(pointcloud);\n\n  return false;\n}\n\nbool LidarMapOffline::getMap(int layer_id, const MapScope& scope, bool blocking,\n                             std::shared_ptr<Ndt3Interface>* ndt3) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->getMap(scope, blocking, ndt3);\n\n  return false;\n}\n\nbool LidarMapOffline::addLayer(const proto::config::MapLayerItem& layer_item) {\n  // initializeLayer is only used in wrtie and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  int layer_id = layer_item.layer_id();\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-add\n  }\n\n  // construct a layer_info\n  proto::map::MapLayerInfo layer_info;\n  layer_info.set_layer_id(layer_item.layer_id());\n  layer_info.set_grid_size(layer_item.grid_size());\n  layer_info.set_tile_size(layer_item.tile_size());\n  layer_info.set_type_name(layer_item.type_name());\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(layer_info, database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::addLayer(const std::string& type_name, float grid_size, float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  proto::config::MapLayerItem item;\n  item.set_layer_id(layer_id);\n  item.set_type_name(type_name);\n  item.set_grid_size(grid_size);\n  item.set_tile_size(tile_size);\n\n  if (!addLayer(item)) {\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::save() {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->save();\n  }\n\n  return ret;\n}\n\nconst MapLayer& LidarMapOffline::getLayer(int layer_id) { return *(layers_[layer_id]); }\n\nconst MapLayer& LidarMapOffline::getLayer(const std::string& type_name, float grid_size,\n                                          float tile_size) {\n  int layer_id;\n  map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id);\n  return *(layers_[layer_id]);\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp"
		}
	}
]
I0402 15:52:06.810351  6334 json_parser.cpp:18] 
[
	15,
	{
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DROS_PACKAGE_NAME=\\\"v2_mapping\\\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-Dv2_mapping_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/usr/lib/openmpi/include",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dinertial_nav_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/python2.7",
			"-I/usr/include/vtk-6.2",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/pcl-1.7",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/freetype2",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DQT_CORE_LIB",
			"-I/usr/include/openni2",
			"-I/home/mr/Workspace/loc/src/v2/build/common/proto",
			"-I/usr/include/hdf5/openmpi",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-DQT_NO_DEBUG",
			"-Dcommon_io_EXPORTS",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\"common\\\"",
			"-Dcommon_proto_EXPORTS",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/usr/include/eigen3",
			"-I/usr/include/libxml2",
			"-I/opt/ros/kinetic/include",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-DDISABLE_PNG",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-Dcommon_geometry_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/home/mr/Workspace/loc/src/v2/third_party/thread_pool",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n\n#include \"lidar_map_offline.h\"\n#include \"lmdb_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nstd::shared_ptr<LocalDatabase> LidarMapOffline::database_ = nullptr;\nLocalDatabase::MODE LidarMapOffline::database_operation_mode_;\nproto::map::MapInfo LidarMapOffline::map_info_;\n\nbool LidarMapOffline::configure(LocalDatabase::MODE mode) {\n  database_ = std::shared_ptr<LmdbDatabase>(new LmdbDatabase);\n  database_operation_mode_ = mode;\n\n  if (!database_->open(database_path_, database_operation_mode_)) {\n    return false;\n  }\n\n  std::string map_info_data;\n  if (database_->get(\"MapInfo\", &map_info_data)) {\n    return false;\n  }\n\n  if (!map_info_.ParseFromString(map_info_data)) {\n    return false;\n  }\n\n  return true;\n}\n\nbool LidarMapOffline::initializeLayer(int layer_id) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-initialize\n  }\n\n  // find the layer infomation in database\n  int layer_info_index = -1;\n  for (int i = 0; i < map_info_.layer_infos_size(); ++i) {\n    if (layer_id == map_info_.layer_infos(i).layer_id()) {\n      layer_info_index = i;\n      break;\n    }\n  }\n  if (-1 == layer_info_index) {\n    return false;  // the specific layer_id do not exist in database\n  }\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(map_info_.layer_infos(layer_info_index), database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::initializeLayer(const std::string& type_name, float grid_size,\n                                     float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  if()\n\n  return initializeLayer(layer_id);\n}\n\nbool LidarMapOffline::load(const Eigen::Vector3f& pos) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->load(pos);\n  }\n\n  return ret;\n}\n\nbool LidarMapOffline::addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->addPointCloud(pointcloud);\n\n  return false;\n}\n\nbool LidarMapOffline::getMap(int layer_id, const MapScope& scope, bool blocking,\n                             std::shared_ptr<Ndt3Interface>* ndt3) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->getMap(scope, blocking, ndt3);\n\n  return false;\n}\n\nbool LidarMapOffline::addLayer(const proto::config::MapLayerItem& layer_item) {\n  // initializeLayer is only used in wrtie and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  int layer_id = layer_item.layer_id();\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-add\n  }\n\n  // construct a layer_info\n  proto::map::MapLayerInfo layer_info;\n  layer_info.set_layer_id(layer_item.layer_id());\n  layer_info.set_grid_size(layer_item.grid_size());\n  layer_info.set_tile_size(layer_item.tile_size());\n  layer_info.set_type_name(layer_item.type_name());\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(layer_info, database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::addLayer(const std::string& type_name, float grid_size, float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  proto::config::MapLayerItem item;\n  item.set_layer_id(layer_id);\n  item.set_type_name(type_name);\n  item.set_grid_size(grid_size);\n  item.set_tile_size(tile_size);\n\n  if (!addLayer(item)) {\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::save() {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->save();\n  }\n\n  return ret;\n}\n\nconst MapLayer& LidarMapOffline::getLayer(int layer_id) { return *(layers_[layer_id]); }\n\nconst MapLayer& LidarMapOffline::getLayer(const std::string& type_name, float grid_size,\n                                          float tile_size) {\n  int layer_id;\n  map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id);\n  return *(layers_[layer_id]);\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp"
		}
	}
]
I0402 15:52:11.671648  6334 json_parser.cpp:18] 
[
	16,
	{
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DROS_PACKAGE_NAME=\\\"v2_mapping\\\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-Dv2_mapping_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/usr/lib/openmpi/include",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dinertial_nav_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/python2.7",
			"-I/usr/include/vtk-6.2",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/pcl-1.7",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/freetype2",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DQT_CORE_LIB",
			"-I/usr/include/openni2",
			"-I/home/mr/Workspace/loc/src/v2/build/common/proto",
			"-I/usr/include/hdf5/openmpi",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-DQT_NO_DEBUG",
			"-Dcommon_io_EXPORTS",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\"common\\\"",
			"-Dcommon_proto_EXPORTS",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/usr/include/eigen3",
			"-I/usr/include/libxml2",
			"-I/opt/ros/kinetic/include",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-DDISABLE_PNG",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-Dcommon_geometry_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/home/mr/Workspace/loc/src/v2/third_party/thread_pool",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n\n#include \"lidar_map_offline.h\"\n#include \"lmdb_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nstd::shared_ptr<LocalDatabase> LidarMapOffline::database_ = nullptr;\nLocalDatabase::MODE LidarMapOffline::database_operation_mode_;\nproto::map::MapInfo LidarMapOffline::map_info_;\n\nbool LidarMapOffline::configure(LocalDatabase::MODE mode) {\n  database_ = std::shared_ptr<LmdbDatabase>(new LmdbDatabase);\n  database_operation_mode_ = mode;\n\n  if (!database_->open(database_path_, database_operation_mode_)) {\n    return false;\n  }\n\n  std::string map_info_data;\n  if (database_->get(\"MapInfo\", &map_info_data)) {\n    return false;\n  }\n\n  if (!map_info_.ParseFromString(map_info_data)) {\n    return false;\n  }\n\n  return true;\n}\n\nbool LidarMapOffline::initializeLayer(int layer_id) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-initialize\n  }\n\n  // find the layer infomation in database\n  int layer_info_index = -1;\n  for (int i = 0; i < map_info_.layer_infos_size(); ++i) {\n    if (layer_id == map_info_.layer_infos(i).layer_id()) {\n      layer_info_index = i;\n      break;\n    }\n  }\n  if (-1 == layer_info_index) {\n    return false;  // the specific layer_id do not exist in database\n  }\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(map_info_.layer_infos(layer_info_index), database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::initializeLayer(const std::string& type_name, float grid_size,\n                                     float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  if(initializeLayer(layer_id))\n\n  return initializeLayer(layer_id);\n}\n\nbool LidarMapOffline::load(const Eigen::Vector3f& pos) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->load(pos);\n  }\n\n  return ret;\n}\n\nbool LidarMapOffline::addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->addPointCloud(pointcloud);\n\n  return false;\n}\n\nbool LidarMapOffline::getMap(int layer_id, const MapScope& scope, bool blocking,\n                             std::shared_ptr<Ndt3Interface>* ndt3) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->getMap(scope, blocking, ndt3);\n\n  return false;\n}\n\nbool LidarMapOffline::addLayer(const proto::config::MapLayerItem& layer_item) {\n  // initializeLayer is only used in wrtie and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  int layer_id = layer_item.layer_id();\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-add\n  }\n\n  // construct a layer_info\n  proto::map::MapLayerInfo layer_info;\n  layer_info.set_layer_id(layer_item.layer_id());\n  layer_info.set_grid_size(layer_item.grid_size());\n  layer_info.set_tile_size(layer_item.tile_size());\n  layer_info.set_type_name(layer_item.type_name());\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(layer_info, database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::addLayer(const std::string& type_name, float grid_size, float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  proto::config::MapLayerItem item;\n  item.set_layer_id(layer_id);\n  item.set_type_name(type_name);\n  item.set_grid_size(grid_size);\n  item.set_tile_size(tile_size);\n\n  if (!addLayer(item)) {\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::save() {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->save();\n  }\n\n  return ret;\n}\n\nconst MapLayer& LidarMapOffline::getLayer(int layer_id) { return *(layers_[layer_id]); }\n\nconst MapLayer& LidarMapOffline::getLayer(const std::string& type_name, float grid_size,\n                                          float tile_size) {\n  int layer_id;\n  map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id);\n  return *(layers_[layer_id]);\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp"
		}
	}
]
I0402 15:52:16.915026  6334 json_parser.cpp:18] 
[
	17,
	{
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DROS_PACKAGE_NAME=\\\"v2_mapping\\\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-Dv2_mapping_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/usr/lib/openmpi/include",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dinertial_nav_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/python2.7",
			"-I/usr/include/vtk-6.2",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/pcl-1.7",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/freetype2",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DQT_CORE_LIB",
			"-I/usr/include/openni2",
			"-I/home/mr/Workspace/loc/src/v2/build/common/proto",
			"-I/usr/include/hdf5/openmpi",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-DQT_NO_DEBUG",
			"-Dcommon_io_EXPORTS",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\"common\\\"",
			"-Dcommon_proto_EXPORTS",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/usr/include/eigen3",
			"-I/usr/include/libxml2",
			"-I/opt/ros/kinetic/include",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-DDISABLE_PNG",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-Dcommon_geometry_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/home/mr/Workspace/loc/src/v2/third_party/thread_pool",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n\n#include \"lidar_map_offline.h\"\n#include \"lmdb_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nstd::shared_ptr<LocalDatabase> LidarMapOffline::database_ = nullptr;\nLocalDatabase::MODE LidarMapOffline::database_operation_mode_;\nproto::map::MapInfo LidarMapOffline::map_info_;\n\nbool LidarMapOffline::configure(LocalDatabase::MODE mode) {\n  database_ = std::shared_ptr<LmdbDatabase>(new LmdbDatabase);\n  database_operation_mode_ = mode;\n\n  if (!database_->open(database_path_, database_operation_mode_)) {\n    return false;\n  }\n\n  std::string map_info_data;\n  if (database_->get(\"MapInfo\", &map_info_data)) {\n    return false;\n  }\n\n  if (!map_info_.ParseFromString(map_info_data)) {\n    return false;\n  }\n\n  return true;\n}\n\nbool LidarMapOffline::initializeLayer(int layer_id) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-initialize\n  }\n\n  // find the layer infomation in database\n  int layer_info_index = -1;\n  for (int i = 0; i < map_info_.layer_infos_size(); ++i) {\n    if (layer_id == map_info_.layer_infos(i).layer_id()) {\n      layer_info_index = i;\n      break;\n    }\n  }\n  if (-1 == layer_info_index) {\n    return false;  // the specific layer_id do not exist in database\n  }\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(map_info_.layer_infos(layer_info_index), database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::initializeLayer(const std::string& type_name, float grid_size,\n                                     float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  if(initializeLayer(layer_id))\n\n  return initializeLayer(layer_id);\n}\n\nbool LidarMapOffline::load(const Eigen::Vector3f& pos) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->load(pos);\n  }\n\n  return ret;\n}\n\nbool LidarMapOffline::addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->addPointCloud(pointcloud);\n\n  return false;\n}\n\nbool LidarMapOffline::getMap(int layer_id, const MapScope& scope, bool blocking,\n                             std::shared_ptr<Ndt3Interface>* ndt3) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->getMap(scope, blocking, ndt3);\n\n  return false;\n}\n\nbool LidarMapOffline::addLayer(const proto::config::MapLayerItem& layer_item) {\n  // initializeLayer is only used in wrtie and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  int layer_id = layer_item.layer_id();\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-add\n  }\n\n  // construct a layer_info\n  proto::map::MapLayerInfo layer_info;\n  layer_info.set_layer_id(layer_item.layer_id());\n  layer_info.set_grid_size(layer_item.grid_size());\n  layer_info.set_tile_size(layer_item.tile_size());\n  layer_info.set_type_name(layer_item.type_name());\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(layer_info, database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::addLayer(const std::string& type_name, float grid_size, float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  proto::config::MapLayerItem item;\n  item.set_layer_id(layer_id);\n  item.set_type_name(type_name);\n  item.set_grid_size(grid_size);\n  item.set_tile_size(tile_size);\n\n  if (!addLayer(item)) {\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::save() {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->save();\n  }\n\n  return ret;\n}\n\nconst MapLayer& LidarMapOffline::getLayer(int layer_id) { return *(layers_[layer_id]); }\n\nconst MapLayer& LidarMapOffline::getLayer(const std::string& type_name, float grid_size,\n                                          float tile_size) {\n  int layer_id;\n  map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id);\n  return *(layers_[layer_id]);\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp"
		}
	}
]
I0402 15:52:17.867079  6334 json_parser.cpp:18] 
[
	18,
	{
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DROS_PACKAGE_NAME=\\\"v2_mapping\\\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-Dv2_mapping_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/usr/lib/openmpi/include",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dinertial_nav_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/python2.7",
			"-I/usr/include/vtk-6.2",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/pcl-1.7",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/freetype2",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DQT_CORE_LIB",
			"-I/usr/include/openni2",
			"-I/home/mr/Workspace/loc/src/v2/build/common/proto",
			"-I/usr/include/hdf5/openmpi",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-DQT_NO_DEBUG",
			"-Dcommon_io_EXPORTS",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\"common\\\"",
			"-Dcommon_proto_EXPORTS",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/usr/include/eigen3",
			"-I/usr/include/libxml2",
			"-I/opt/ros/kinetic/include",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-DDISABLE_PNG",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-Dcommon_geometry_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/home/mr/Workspace/loc/src/v2/third_party/thread_pool",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n\n#include \"lidar_map_offline.h\"\n#include \"lmdb_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nstd::shared_ptr<LocalDatabase> LidarMapOffline::database_ = nullptr;\nLocalDatabase::MODE LidarMapOffline::database_operation_mode_;\nproto::map::MapInfo LidarMapOffline::map_info_;\n\nbool LidarMapOffline::configure(LocalDatabase::MODE mode) {\n  database_ = std::shared_ptr<LmdbDatabase>(new LmdbDatabase);\n  database_operation_mode_ = mode;\n\n  if (!database_->open(database_path_, database_operation_mode_)) {\n    return false;\n  }\n\n  std::string map_info_data;\n  if (database_->get(\"MapInfo\", &map_info_data)) {\n    return false;\n  }\n\n  if (!map_info_.ParseFromString(map_info_data)) {\n    return false;\n  }\n\n  return true;\n}\n\nbool LidarMapOffline::initializeLayer(int layer_id) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-initialize\n  }\n\n  // find the layer infomation in database\n  int layer_info_index = -1;\n  for (int i = 0; i < map_info_.layer_infos_size(); ++i) {\n    if (layer_id == map_info_.layer_infos(i).layer_id()) {\n      layer_info_index = i;\n      break;\n    }\n  }\n  if (-1 == layer_info_index) {\n    return false;  // the specific layer_id do not exist in database\n  }\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(map_info_.layer_infos(layer_info_index), database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::initializeLayer(const std::string& type_name, float grid_size,\n                                     float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  if(!initializeLayer(layer_id))\n\n  return initializeLayer(layer_id);\n}\n\nbool LidarMapOffline::load(const Eigen::Vector3f& pos) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->load(pos);\n  }\n\n  return ret;\n}\n\nbool LidarMapOffline::addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->addPointCloud(pointcloud);\n\n  return false;\n}\n\nbool LidarMapOffline::getMap(int layer_id, const MapScope& scope, bool blocking,\n                             std::shared_ptr<Ndt3Interface>* ndt3) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->getMap(scope, blocking, ndt3);\n\n  return false;\n}\n\nbool LidarMapOffline::addLayer(const proto::config::MapLayerItem& layer_item) {\n  // initializeLayer is only used in wrtie and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  int layer_id = layer_item.layer_id();\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-add\n  }\n\n  // construct a layer_info\n  proto::map::MapLayerInfo layer_info;\n  layer_info.set_layer_id(layer_item.layer_id());\n  layer_info.set_grid_size(layer_item.grid_size());\n  layer_info.set_tile_size(layer_item.tile_size());\n  layer_info.set_type_name(layer_item.type_name());\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(layer_info, database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::addLayer(const std::string& type_name, float grid_size, float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  proto::config::MapLayerItem item;\n  item.set_layer_id(layer_id);\n  item.set_type_name(type_name);\n  item.set_grid_size(grid_size);\n  item.set_tile_size(tile_size);\n\n  if (!addLayer(item)) {\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::save() {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->save();\n  }\n\n  return ret;\n}\n\nconst MapLayer& LidarMapOffline::getLayer(int layer_id) { return *(layers_[layer_id]); }\n\nconst MapLayer& LidarMapOffline::getLayer(const std::string& type_name, float grid_size,\n                                          float tile_size) {\n  int layer_id;\n  map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id);\n  return *(layers_[layer_id]);\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp"
		}
	}
]
I0402 15:52:19.922997  6334 json_parser.cpp:18] 
[
	19,
	{
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DROS_PACKAGE_NAME=\\\"v2_mapping\\\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-Dv2_mapping_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/usr/lib/openmpi/include",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dinertial_nav_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/python2.7",
			"-I/usr/include/vtk-6.2",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/pcl-1.7",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/freetype2",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DQT_CORE_LIB",
			"-I/usr/include/openni2",
			"-I/home/mr/Workspace/loc/src/v2/build/common/proto",
			"-I/usr/include/hdf5/openmpi",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-DQT_NO_DEBUG",
			"-Dcommon_io_EXPORTS",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\"common\\\"",
			"-Dcommon_proto_EXPORTS",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/usr/include/eigen3",
			"-I/usr/include/libxml2",
			"-I/opt/ros/kinetic/include",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-DDISABLE_PNG",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-Dcommon_geometry_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/home/mr/Workspace/loc/src/v2/third_party/thread_pool",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n\n#include \"lidar_map_offline.h\"\n#include \"lmdb_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nstd::shared_ptr<LocalDatabase> LidarMapOffline::database_ = nullptr;\nLocalDatabase::MODE LidarMapOffline::database_operation_mode_;\nproto::map::MapInfo LidarMapOffline::map_info_;\n\nbool LidarMapOffline::configure(LocalDatabase::MODE mode) {\n  database_ = std::shared_ptr<LmdbDatabase>(new LmdbDatabase);\n  database_operation_mode_ = mode;\n\n  if (!database_->open(database_path_, database_operation_mode_)) {\n    return false;\n  }\n\n  std::string map_info_data;\n  if (database_->get(\"MapInfo\", &map_info_data)) {\n    return false;\n  }\n\n  if (!map_info_.ParseFromString(map_info_data)) {\n    return false;\n  }\n\n  return true;\n}\n\nbool LidarMapOffline::initializeLayer(int layer_id) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-initialize\n  }\n\n  // find the layer infomation in database\n  int layer_info_index = -1;\n  for (int i = 0; i < map_info_.layer_infos_size(); ++i) {\n    if (layer_id == map_info_.layer_infos(i).layer_id()) {\n      layer_info_index = i;\n      break;\n    }\n  }\n  if (-1 == layer_info_index) {\n    return false;  // the specific layer_id do not exist in database\n  }\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(map_info_.layer_infos(layer_info_index), database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::initializeLayer(const std::string& type_name, float grid_size,\n                                     float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  if(!initializeLayer(layer_id))\n\n  return initializeLayer(layer_id);\n}\n\nbool LidarMapOffline::load(const Eigen::Vector3f& pos) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->load(pos);\n  }\n\n  return ret;\n}\n\nbool LidarMapOffline::addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->addPointCloud(pointcloud);\n\n  return false;\n}\n\nbool LidarMapOffline::getMap(int layer_id, const MapScope& scope, bool blocking,\n                             std::shared_ptr<Ndt3Interface>* ndt3) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->getMap(scope, blocking, ndt3);\n\n  return false;\n}\n\nbool LidarMapOffline::addLayer(const proto::config::MapLayerItem& layer_item) {\n  // initializeLayer is only used in wrtie and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  int layer_id = layer_item.layer_id();\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-add\n  }\n\n  // construct a layer_info\n  proto::map::MapLayerInfo layer_info;\n  layer_info.set_layer_id(layer_item.layer_id());\n  layer_info.set_grid_size(layer_item.grid_size());\n  layer_info.set_tile_size(layer_item.tile_size());\n  layer_info.set_type_name(layer_item.type_name());\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(layer_info, database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::addLayer(const std::string& type_name, float grid_size, float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  proto::config::MapLayerItem item;\n  item.set_layer_id(layer_id);\n  item.set_type_name(type_name);\n  item.set_grid_size(grid_size);\n  item.set_tile_size(tile_size);\n\n  if (!addLayer(item)) {\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::save() {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->save();\n  }\n\n  return ret;\n}\n\nconst MapLayer& LidarMapOffline::getLayer(int layer_id) { return *(layers_[layer_id]); }\n\nconst MapLayer& LidarMapOffline::getLayer(const std::string& type_name, float grid_size,\n                                          float tile_size) {\n  int layer_id;\n  map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id);\n  return *(layers_[layer_id]);\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp"
		}
	}
]
I0402 15:52:20.770741  6334 json_parser.cpp:18] 
[
	20,
	{
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DROS_PACKAGE_NAME=\\\"v2_mapping\\\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-Dv2_mapping_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/usr/lib/openmpi/include",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dinertial_nav_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/python2.7",
			"-I/usr/include/vtk-6.2",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/pcl-1.7",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/freetype2",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DQT_CORE_LIB",
			"-I/usr/include/openni2",
			"-I/home/mr/Workspace/loc/src/v2/build/common/proto",
			"-I/usr/include/hdf5/openmpi",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-DQT_NO_DEBUG",
			"-Dcommon_io_EXPORTS",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\"common\\\"",
			"-Dcommon_proto_EXPORTS",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/usr/include/eigen3",
			"-I/usr/include/libxml2",
			"-I/opt/ros/kinetic/include",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-DDISABLE_PNG",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-Dcommon_geometry_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/home/mr/Workspace/loc/src/v2/third_party/thread_pool",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n\n#include \"lidar_map_offline.h\"\n#include \"lmdb_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nstd::shared_ptr<LocalDatabase> LidarMapOffline::database_ = nullptr;\nLocalDatabase::MODE LidarMapOffline::database_operation_mode_;\nproto::map::MapInfo LidarMapOffline::map_info_;\n\nbool LidarMapOffline::configure(LocalDatabase::MODE mode) {\n  database_ = std::shared_ptr<LmdbDatabase>(new LmdbDatabase);\n  database_operation_mode_ = mode;\n\n  if (!database_->open(database_path_, database_operation_mode_)) {\n    return false;\n  }\n\n  std::string map_info_data;\n  if (database_->get(\"MapInfo\", &map_info_data)) {\n    return false;\n  }\n\n  if (!map_info_.ParseFromString(map_info_data)) {\n    return false;\n  }\n\n  return true;\n}\n\nbool LidarMapOffline::initializeLayer(int layer_id) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-initialize\n  }\n\n  // find the layer infomation in database\n  int layer_info_index = -1;\n  for (int i = 0; i < map_info_.layer_infos_size(); ++i) {\n    if (layer_id == map_info_.layer_infos(i).layer_id()) {\n      layer_info_index = i;\n      break;\n    }\n  }\n  if (-1 == layer_info_index) {\n    return false;  // the specific layer_id do not exist in database\n  }\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(map_info_.layer_infos(layer_info_index), database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::initializeLayer(const std::string& type_name, float grid_size,\n                                     float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  if(!initializeLayer(layer_id)){\n  }\n\n  return initializeLayer(layer_id);\n}\n\nbool LidarMapOffline::load(const Eigen::Vector3f& pos) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->load(pos);\n  }\n\n  return ret;\n}\n\nbool LidarMapOffline::addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->addPointCloud(pointcloud);\n\n  return false;\n}\n\nbool LidarMapOffline::getMap(int layer_id, const MapScope& scope, bool blocking,\n                             std::shared_ptr<Ndt3Interface>* ndt3) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->getMap(scope, blocking, ndt3);\n\n  return false;\n}\n\nbool LidarMapOffline::addLayer(const proto::config::MapLayerItem& layer_item) {\n  // initializeLayer is only used in wrtie and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  int layer_id = layer_item.layer_id();\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-add\n  }\n\n  // construct a layer_info\n  proto::map::MapLayerInfo layer_info;\n  layer_info.set_layer_id(layer_item.layer_id());\n  layer_info.set_grid_size(layer_item.grid_size());\n  layer_info.set_tile_size(layer_item.tile_size());\n  layer_info.set_type_name(layer_item.type_name());\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(layer_info, database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::addLayer(const std::string& type_name, float grid_size, float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  proto::config::MapLayerItem item;\n  item.set_layer_id(layer_id);\n  item.set_type_name(type_name);\n  item.set_grid_size(grid_size);\n  item.set_tile_size(tile_size);\n\n  if (!addLayer(item)) {\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::save() {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->save();\n  }\n\n  return ret;\n}\n\nconst MapLayer& LidarMapOffline::getLayer(int layer_id) { return *(layers_[layer_id]); }\n\nconst MapLayer& LidarMapOffline::getLayer(const std::string& type_name, float grid_size,\n                                          float tile_size) {\n  int layer_id;\n  map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id);\n  return *(layers_[layer_id]);\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp"
		}
	}
]
I0402 15:52:20.780648  6334 json_parser.cpp:18] 
[
	21,
	{
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DROS_PACKAGE_NAME=\\\"v2_mapping\\\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-Dv2_mapping_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/usr/lib/openmpi/include",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dinertial_nav_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/python2.7",
			"-I/usr/include/vtk-6.2",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/pcl-1.7",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/freetype2",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DQT_CORE_LIB",
			"-I/usr/include/openni2",
			"-I/home/mr/Workspace/loc/src/v2/build/common/proto",
			"-I/usr/include/hdf5/openmpi",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-DQT_NO_DEBUG",
			"-Dcommon_io_EXPORTS",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\"common\\\"",
			"-Dcommon_proto_EXPORTS",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/usr/include/eigen3",
			"-I/usr/include/libxml2",
			"-I/opt/ros/kinetic/include",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-DDISABLE_PNG",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-Dcommon_geometry_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/home/mr/Workspace/loc/src/v2/third_party/thread_pool",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n\n#include \"lidar_map_offline.h\"\n#include \"lmdb_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nstd::shared_ptr<LocalDatabase> LidarMapOffline::database_ = nullptr;\nLocalDatabase::MODE LidarMapOffline::database_operation_mode_;\nproto::map::MapInfo LidarMapOffline::map_info_;\n\nbool LidarMapOffline::configure(LocalDatabase::MODE mode) {\n  database_ = std::shared_ptr<LmdbDatabase>(new LmdbDatabase);\n  database_operation_mode_ = mode;\n\n  if (!database_->open(database_path_, database_operation_mode_)) {\n    return false;\n  }\n\n  std::string map_info_data;\n  if (database_->get(\"MapInfo\", &map_info_data)) {\n    return false;\n  }\n\n  if (!map_info_.ParseFromString(map_info_data)) {\n    return false;\n  }\n\n  return true;\n}\n\nbool LidarMapOffline::initializeLayer(int layer_id) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-initialize\n  }\n\n  // find the layer infomation in database\n  int layer_info_index = -1;\n  for (int i = 0; i < map_info_.layer_infos_size(); ++i) {\n    if (layer_id == map_info_.layer_infos(i).layer_id()) {\n      layer_info_index = i;\n      break;\n    }\n  }\n  if (-1 == layer_info_index) {\n    return false;  // the specific layer_id do not exist in database\n  }\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(map_info_.layer_infos(layer_info_index), database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::initializeLayer(const std::string& type_name, float grid_size,\n                                     float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  if(!initializeLayer(layer_id)){\n  }\n\n  return initializeLayer(layer_id);\n}\n\nbool LidarMapOffline::load(const Eigen::Vector3f& pos) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->load(pos);\n  }\n\n  return ret;\n}\n\nbool LidarMapOffline::addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->addPointCloud(pointcloud);\n\n  return false;\n}\n\nbool LidarMapOffline::getMap(int layer_id, const MapScope& scope, bool blocking,\n                             std::shared_ptr<Ndt3Interface>* ndt3) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->getMap(scope, blocking, ndt3);\n\n  return false;\n}\n\nbool LidarMapOffline::addLayer(const proto::config::MapLayerItem& layer_item) {\n  // initializeLayer is only used in wrtie and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  int layer_id = layer_item.layer_id();\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-add\n  }\n\n  // construct a layer_info\n  proto::map::MapLayerInfo layer_info;\n  layer_info.set_layer_id(layer_item.layer_id());\n  layer_info.set_grid_size(layer_item.grid_size());\n  layer_info.set_tile_size(layer_item.tile_size());\n  layer_info.set_type_name(layer_item.type_name());\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(layer_info, database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::addLayer(const std::string& type_name, float grid_size, float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  proto::config::MapLayerItem item;\n  item.set_layer_id(layer_id);\n  item.set_type_name(type_name);\n  item.set_grid_size(grid_size);\n  item.set_tile_size(tile_size);\n\n  if (!addLayer(item)) {\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::save() {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->save();\n  }\n\n  return ret;\n}\n\nconst MapLayer& LidarMapOffline::getLayer(int layer_id) { return *(layers_[layer_id]); }\n\nconst MapLayer& LidarMapOffline::getLayer(const std::string& type_name, float grid_size,\n                                          float tile_size) {\n  int layer_id;\n  map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id);\n  return *(layers_[layer_id]);\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp"
		}
	}
]
I0402 15:52:20.797435  6334 json_parser.cpp:18] 
[
	22,
	{
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DROS_PACKAGE_NAME=\\\"v2_mapping\\\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-Dv2_mapping_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/usr/lib/openmpi/include",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dinertial_nav_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/python2.7",
			"-I/usr/include/vtk-6.2",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/pcl-1.7",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/freetype2",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DQT_CORE_LIB",
			"-I/usr/include/openni2",
			"-I/home/mr/Workspace/loc/src/v2/build/common/proto",
			"-I/usr/include/hdf5/openmpi",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-DQT_NO_DEBUG",
			"-Dcommon_io_EXPORTS",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\"common\\\"",
			"-Dcommon_proto_EXPORTS",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/usr/include/eigen3",
			"-I/usr/include/libxml2",
			"-I/opt/ros/kinetic/include",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-DDISABLE_PNG",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-Dcommon_geometry_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/home/mr/Workspace/loc/src/v2/third_party/thread_pool",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n\n#include \"lidar_map_offline.h\"\n#include \"lmdb_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nstd::shared_ptr<LocalDatabase> LidarMapOffline::database_ = nullptr;\nLocalDatabase::MODE LidarMapOffline::database_operation_mode_;\nproto::map::MapInfo LidarMapOffline::map_info_;\n\nbool LidarMapOffline::configure(LocalDatabase::MODE mode) {\n  database_ = std::shared_ptr<LmdbDatabase>(new LmdbDatabase);\n  database_operation_mode_ = mode;\n\n  if (!database_->open(database_path_, database_operation_mode_)) {\n    return false;\n  }\n\n  std::string map_info_data;\n  if (database_->get(\"MapInfo\", &map_info_data)) {\n    return false;\n  }\n\n  if (!map_info_.ParseFromString(map_info_data)) {\n    return false;\n  }\n\n  return true;\n}\n\nbool LidarMapOffline::initializeLayer(int layer_id) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-initialize\n  }\n\n  // find the layer infomation in database\n  int layer_info_index = -1;\n  for (int i = 0; i < map_info_.layer_infos_size(); ++i) {\n    if (layer_id == map_info_.layer_infos(i).layer_id()) {\n      layer_info_index = i;\n      break;\n    }\n  }\n  if (-1 == layer_info_index) {\n    return false;  // the specific layer_id do not exist in database\n  }\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(map_info_.layer_infos(layer_info_index), database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::initializeLayer(const std::string& type_name, float grid_size,\n                                     float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  if(!initializeLayer(layer_id)){\n    \n  }\n\n  return initializeLayer(layer_id);\n}\n\nbool LidarMapOffline::load(const Eigen::Vector3f& pos) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->load(pos);\n  }\n\n  return ret;\n}\n\nbool LidarMapOffline::addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->addPointCloud(pointcloud);\n\n  return false;\n}\n\nbool LidarMapOffline::getMap(int layer_id, const MapScope& scope, bool blocking,\n                             std::shared_ptr<Ndt3Interface>* ndt3) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->getMap(scope, blocking, ndt3);\n\n  return false;\n}\n\nbool LidarMapOffline::addLayer(const proto::config::MapLayerItem& layer_item) {\n  // initializeLayer is only used in wrtie and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  int layer_id = layer_item.layer_id();\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-add\n  }\n\n  // construct a layer_info\n  proto::map::MapLayerInfo layer_info;\n  layer_info.set_layer_id(layer_item.layer_id());\n  layer_info.set_grid_size(layer_item.grid_size());\n  layer_info.set_tile_size(layer_item.tile_size());\n  layer_info.set_type_name(layer_item.type_name());\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(layer_info, database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::addLayer(const std::string& type_name, float grid_size, float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  proto::config::MapLayerItem item;\n  item.set_layer_id(layer_id);\n  item.set_type_name(type_name);\n  item.set_grid_size(grid_size);\n  item.set_tile_size(tile_size);\n\n  if (!addLayer(item)) {\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::save() {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->save();\n  }\n\n  return ret;\n}\n\nconst MapLayer& LidarMapOffline::getLayer(int layer_id) { return *(layers_[layer_id]); }\n\nconst MapLayer& LidarMapOffline::getLayer(const std::string& type_name, float grid_size,\n                                          float tile_size) {\n  int layer_id;\n  map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id);\n  return *(layers_[layer_id]);\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp"
		}
	}
]
I0402 15:52:22.881840  6334 json_parser.cpp:18] 
[
	23,
	{
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DROS_PACKAGE_NAME=\\\"v2_mapping\\\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-Dv2_mapping_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/usr/lib/openmpi/include",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dinertial_nav_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/python2.7",
			"-I/usr/include/vtk-6.2",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/pcl-1.7",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/freetype2",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DQT_CORE_LIB",
			"-I/usr/include/openni2",
			"-I/home/mr/Workspace/loc/src/v2/build/common/proto",
			"-I/usr/include/hdf5/openmpi",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-DQT_NO_DEBUG",
			"-Dcommon_io_EXPORTS",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\"common\\\"",
			"-Dcommon_proto_EXPORTS",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/usr/include/eigen3",
			"-I/usr/include/libxml2",
			"-I/opt/ros/kinetic/include",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-DDISABLE_PNG",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-Dcommon_geometry_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/home/mr/Workspace/loc/src/v2/third_party/thread_pool",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n\n#include \"lidar_map_offline.h\"\n#include \"lmdb_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nstd::shared_ptr<LocalDatabase> LidarMapOffline::database_ = nullptr;\nLocalDatabase::MODE LidarMapOffline::database_operation_mode_;\nproto::map::MapInfo LidarMapOffline::map_info_;\n\nbool LidarMapOffline::configure(LocalDatabase::MODE mode) {\n  database_ = std::shared_ptr<LmdbDatabase>(new LmdbDatabase);\n  database_operation_mode_ = mode;\n\n  if (!database_->open(database_path_, database_operation_mode_)) {\n    return false;\n  }\n\n  std::string map_info_data;\n  if (database_->get(\"MapInfo\", &map_info_data)) {\n    return false;\n  }\n\n  if (!map_info_.ParseFromString(map_info_data)) {\n    return false;\n  }\n\n  return true;\n}\n\nbool LidarMapOffline::initializeLayer(int layer_id) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-initialize\n  }\n\n  // find the layer infomation in database\n  int layer_info_index = -1;\n  for (int i = 0; i < map_info_.layer_infos_size(); ++i) {\n    if (layer_id == map_info_.layer_infos(i).layer_id()) {\n      layer_info_index = i;\n      break;\n    }\n  }\n  if (-1 == layer_info_index) {\n    return false;  // the specific layer_id do not exist in database\n  }\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(map_info_.layer_infos(layer_info_index), database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::initializeLayer(const std::string& type_name, float grid_size,\n                                     float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  if(!initializeLayer(layer_id)){\n    return -1;\n  }\n\n  return initializeLayer(layer_id);\n}\n\nbool LidarMapOffline::load(const Eigen::Vector3f& pos) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->load(pos);\n  }\n\n  return ret;\n}\n\nbool LidarMapOffline::addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->addPointCloud(pointcloud);\n\n  return false;\n}\n\nbool LidarMapOffline::getMap(int layer_id, const MapScope& scope, bool blocking,\n                             std::shared_ptr<Ndt3Interface>* ndt3) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->getMap(scope, blocking, ndt3);\n\n  return false;\n}\n\nbool LidarMapOffline::addLayer(const proto::config::MapLayerItem& layer_item) {\n  // initializeLayer is only used in wrtie and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  int layer_id = layer_item.layer_id();\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-add\n  }\n\n  // construct a layer_info\n  proto::map::MapLayerInfo layer_info;\n  layer_info.set_layer_id(layer_item.layer_id());\n  layer_info.set_grid_size(layer_item.grid_size());\n  layer_info.set_tile_size(layer_item.tile_size());\n  layer_info.set_type_name(layer_item.type_name());\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(layer_info, database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::addLayer(const std::string& type_name, float grid_size, float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  proto::config::MapLayerItem item;\n  item.set_layer_id(layer_id);\n  item.set_type_name(type_name);\n  item.set_grid_size(grid_size);\n  item.set_tile_size(tile_size);\n\n  if (!addLayer(item)) {\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::save() {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->save();\n  }\n\n  return ret;\n}\n\nconst MapLayer& LidarMapOffline::getLayer(int layer_id) { return *(layers_[layer_id]); }\n\nconst MapLayer& LidarMapOffline::getLayer(const std::string& type_name, float grid_size,\n                                          float tile_size) {\n  int layer_id;\n  map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id);\n  return *(layers_[layer_id]);\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp"
		}
	}
]
I0402 15:52:22.891629  6334 json_parser.cpp:18] 
[
	24,
	{
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DROS_PACKAGE_NAME=\\\"v2_mapping\\\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-Dv2_mapping_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/usr/lib/openmpi/include",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dinertial_nav_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/python2.7",
			"-I/usr/include/vtk-6.2",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/pcl-1.7",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/freetype2",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DQT_CORE_LIB",
			"-I/usr/include/openni2",
			"-I/home/mr/Workspace/loc/src/v2/build/common/proto",
			"-I/usr/include/hdf5/openmpi",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-DQT_NO_DEBUG",
			"-Dcommon_io_EXPORTS",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\"common\\\"",
			"-Dcommon_proto_EXPORTS",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/usr/include/eigen3",
			"-I/usr/include/libxml2",
			"-I/opt/ros/kinetic/include",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-DDISABLE_PNG",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-Dcommon_geometry_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/home/mr/Workspace/loc/src/v2/third_party/thread_pool",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n\n#include \"lidar_map_offline.h\"\n#include \"lmdb_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nstd::shared_ptr<LocalDatabase> LidarMapOffline::database_ = nullptr;\nLocalDatabase::MODE LidarMapOffline::database_operation_mode_;\nproto::map::MapInfo LidarMapOffline::map_info_;\n\nbool LidarMapOffline::configure(LocalDatabase::MODE mode) {\n  database_ = std::shared_ptr<LmdbDatabase>(new LmdbDatabase);\n  database_operation_mode_ = mode;\n\n  if (!database_->open(database_path_, database_operation_mode_)) {\n    return false;\n  }\n\n  std::string map_info_data;\n  if (database_->get(\"MapInfo\", &map_info_data)) {\n    return false;\n  }\n\n  if (!map_info_.ParseFromString(map_info_data)) {\n    return false;\n  }\n\n  return true;\n}\n\nbool LidarMapOffline::initializeLayer(int layer_id) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-initialize\n  }\n\n  // find the layer infomation in database\n  int layer_info_index = -1;\n  for (int i = 0; i < map_info_.layer_infos_size(); ++i) {\n    if (layer_id == map_info_.layer_infos(i).layer_id()) {\n      layer_info_index = i;\n      break;\n    }\n  }\n  if (-1 == layer_info_index) {\n    return false;  // the specific layer_id do not exist in database\n  }\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(map_info_.layer_infos(layer_info_index), database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::initializeLayer(const std::string& type_name, float grid_size,\n                                     float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  if(!initializeLayer(layer_id)){\n    return -1;\n  }\n\n  return initializeLayer(layer_id);\n}\n\nbool LidarMapOffline::load(const Eigen::Vector3f& pos) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->load(pos);\n  }\n\n  return ret;\n}\n\nbool LidarMapOffline::addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->addPointCloud(pointcloud);\n\n  return false;\n}\n\nbool LidarMapOffline::getMap(int layer_id, const MapScope& scope, bool blocking,\n                             std::shared_ptr<Ndt3Interface>* ndt3) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->getMap(scope, blocking, ndt3);\n\n  return false;\n}\n\nbool LidarMapOffline::addLayer(const proto::config::MapLayerItem& layer_item) {\n  // initializeLayer is only used in wrtie and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  int layer_id = layer_item.layer_id();\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-add\n  }\n\n  // construct a layer_info\n  proto::map::MapLayerInfo layer_info;\n  layer_info.set_layer_id(layer_item.layer_id());\n  layer_info.set_grid_size(layer_item.grid_size());\n  layer_info.set_tile_size(layer_item.tile_size());\n  layer_info.set_type_name(layer_item.type_name());\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(layer_info, database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::addLayer(const std::string& type_name, float grid_size, float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  proto::config::MapLayerItem item;\n  item.set_layer_id(layer_id);\n  item.set_type_name(type_name);\n  item.set_grid_size(grid_size);\n  item.set_tile_size(tile_size);\n\n  if (!addLayer(item)) {\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::save() {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->save();\n  }\n\n  return ret;\n}\n\nconst MapLayer& LidarMapOffline::getLayer(int layer_id) { return *(layers_[layer_id]); }\n\nconst MapLayer& LidarMapOffline::getLayer(const std::string& type_name, float grid_size,\n                                          float tile_size) {\n  int layer_id;\n  map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id);\n  return *(layers_[layer_id]);\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp"
		}
	}
]
I0402 15:52:23.643793  6334 json_parser.cpp:18] 
[
	25,
	{
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DROS_PACKAGE_NAME=\\\"v2_mapping\\\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-Dv2_mapping_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/usr/lib/openmpi/include",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dinertial_nav_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/python2.7",
			"-I/usr/include/vtk-6.2",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/pcl-1.7",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/freetype2",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DQT_CORE_LIB",
			"-I/usr/include/openni2",
			"-I/home/mr/Workspace/loc/src/v2/build/common/proto",
			"-I/usr/include/hdf5/openmpi",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-DQT_NO_DEBUG",
			"-Dcommon_io_EXPORTS",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\"common\\\"",
			"-Dcommon_proto_EXPORTS",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/usr/include/eigen3",
			"-I/usr/include/libxml2",
			"-I/opt/ros/kinetic/include",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-DDISABLE_PNG",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-Dcommon_geometry_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/home/mr/Workspace/loc/src/v2/third_party/thread_pool",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n\n#include \"lidar_map_offline.h\"\n#include \"lmdb_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nstd::shared_ptr<LocalDatabase> LidarMapOffline::database_ = nullptr;\nLocalDatabase::MODE LidarMapOffline::database_operation_mode_;\nproto::map::MapInfo LidarMapOffline::map_info_;\n\nbool LidarMapOffline::configure(LocalDatabase::MODE mode) {\n  database_ = std::shared_ptr<LmdbDatabase>(new LmdbDatabase);\n  database_operation_mode_ = mode;\n\n  if (!database_->open(database_path_, database_operation_mode_)) {\n    return false;\n  }\n\n  std::string map_info_data;\n  if (database_->get(\"MapInfo\", &map_info_data)) {\n    return false;\n  }\n\n  if (!map_info_.ParseFromString(map_info_data)) {\n    return false;\n  }\n\n  return true;\n}\n\nbool LidarMapOffline::initializeLayer(int layer_id) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-initialize\n  }\n\n  // find the layer infomation in database\n  int layer_info_index = -1;\n  for (int i = 0; i < map_info_.layer_infos_size(); ++i) {\n    if (layer_id == map_info_.layer_infos(i).layer_id()) {\n      layer_info_index = i;\n      break;\n    }\n  }\n  if (-1 == layer_info_index) {\n    return false;  // the specific layer_id do not exist in database\n  }\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(map_info_.layer_infos(layer_info_index), database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::initializeLayer(const std::string& type_name, float grid_size,\n                                     float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  if(!initializeLayer(layer_id)){\n    return -1;\n  }\n  \n\n  return initializeLayer(layer_id);\n}\n\nbool LidarMapOffline::load(const Eigen::Vector3f& pos) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->load(pos);\n  }\n\n  return ret;\n}\n\nbool LidarMapOffline::addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->addPointCloud(pointcloud);\n\n  return false;\n}\n\nbool LidarMapOffline::getMap(int layer_id, const MapScope& scope, bool blocking,\n                             std::shared_ptr<Ndt3Interface>* ndt3) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->getMap(scope, blocking, ndt3);\n\n  return false;\n}\n\nbool LidarMapOffline::addLayer(const proto::config::MapLayerItem& layer_item) {\n  // initializeLayer is only used in wrtie and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  int layer_id = layer_item.layer_id();\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-add\n  }\n\n  // construct a layer_info\n  proto::map::MapLayerInfo layer_info;\n  layer_info.set_layer_id(layer_item.layer_id());\n  layer_info.set_grid_size(layer_item.grid_size());\n  layer_info.set_tile_size(layer_item.tile_size());\n  layer_info.set_type_name(layer_item.type_name());\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(layer_info, database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::addLayer(const std::string& type_name, float grid_size, float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  proto::config::MapLayerItem item;\n  item.set_layer_id(layer_id);\n  item.set_type_name(type_name);\n  item.set_grid_size(grid_size);\n  item.set_tile_size(tile_size);\n\n  if (!addLayer(item)) {\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::save() {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->save();\n  }\n\n  return ret;\n}\n\nconst MapLayer& LidarMapOffline::getLayer(int layer_id) { return *(layers_[layer_id]); }\n\nconst MapLayer& LidarMapOffline::getLayer(const std::string& type_name, float grid_size,\n                                          float tile_size) {\n  int layer_id;\n  map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id);\n  return *(layers_[layer_id]);\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp"
		}
	}
]
I0402 15:52:27.186326  6334 json_parser.cpp:18] 
[
	26,
	{
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DROS_PACKAGE_NAME=\\\"v2_mapping\\\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-Dv2_mapping_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/usr/lib/openmpi/include",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dinertial_nav_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/python2.7",
			"-I/usr/include/vtk-6.2",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/pcl-1.7",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/freetype2",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DQT_CORE_LIB",
			"-I/usr/include/openni2",
			"-I/home/mr/Workspace/loc/src/v2/build/common/proto",
			"-I/usr/include/hdf5/openmpi",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-DQT_NO_DEBUG",
			"-Dcommon_io_EXPORTS",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\"common\\\"",
			"-Dcommon_proto_EXPORTS",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/usr/include/eigen3",
			"-I/usr/include/libxml2",
			"-I/opt/ros/kinetic/include",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-DDISABLE_PNG",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-Dcommon_geometry_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/home/mr/Workspace/loc/src/v2/third_party/thread_pool",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n\n#include \"lidar_map_offline.h\"\n#include \"lmdb_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nstd::shared_ptr<LocalDatabase> LidarMapOffline::database_ = nullptr;\nLocalDatabase::MODE LidarMapOffline::database_operation_mode_;\nproto::map::MapInfo LidarMapOffline::map_info_;\n\nbool LidarMapOffline::configure(LocalDatabase::MODE mode) {\n  database_ = std::shared_ptr<LmdbDatabase>(new LmdbDatabase);\n  database_operation_mode_ = mode;\n\n  if (!database_->open(database_path_, database_operation_mode_)) {\n    return false;\n  }\n\n  std::string map_info_data;\n  if (database_->get(\"MapInfo\", &map_info_data)) {\n    return false;\n  }\n\n  if (!map_info_.ParseFromString(map_info_data)) {\n    return false;\n  }\n\n  return true;\n}\n\nbool LidarMapOffline::initializeLayer(int layer_id) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-initialize\n  }\n\n  // find the layer infomation in database\n  int layer_info_index = -1;\n  for (int i = 0; i < map_info_.layer_infos_size(); ++i) {\n    if (layer_id == map_info_.layer_infos(i).layer_id()) {\n      layer_info_index = i;\n      break;\n    }\n  }\n  if (-1 == layer_info_index) {\n    return false;  // the specific layer_id do not exist in database\n  }\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(map_info_.layer_infos(layer_info_index), database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::initializeLayer(const std::string& type_name, float grid_size,\n                                     float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  if(!initializeLayer(layer_id)){\n    return -1;\n  }\n\n  return layer_id;\n\n  return initializeLayer(layer_id);\n}\n\nbool LidarMapOffline::load(const Eigen::Vector3f& pos) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->load(pos);\n  }\n\n  return ret;\n}\n\nbool LidarMapOffline::addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->addPointCloud(pointcloud);\n\n  return false;\n}\n\nbool LidarMapOffline::getMap(int layer_id, const MapScope& scope, bool blocking,\n                             std::shared_ptr<Ndt3Interface>* ndt3) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->getMap(scope, blocking, ndt3);\n\n  return false;\n}\n\nbool LidarMapOffline::addLayer(const proto::config::MapLayerItem& layer_item) {\n  // initializeLayer is only used in wrtie and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  int layer_id = layer_item.layer_id();\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-add\n  }\n\n  // construct a layer_info\n  proto::map::MapLayerInfo layer_info;\n  layer_info.set_layer_id(layer_item.layer_id());\n  layer_info.set_grid_size(layer_item.grid_size());\n  layer_info.set_tile_size(layer_item.tile_size());\n  layer_info.set_type_name(layer_item.type_name());\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(layer_info, database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::addLayer(const std::string& type_name, float grid_size, float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  proto::config::MapLayerItem item;\n  item.set_layer_id(layer_id);\n  item.set_type_name(type_name);\n  item.set_grid_size(grid_size);\n  item.set_tile_size(tile_size);\n\n  if (!addLayer(item)) {\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::save() {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->save();\n  }\n\n  return ret;\n}\n\nconst MapLayer& LidarMapOffline::getLayer(int layer_id) { return *(layers_[layer_id]); }\n\nconst MapLayer& LidarMapOffline::getLayer(const std::string& type_name, float grid_size,\n                                          float tile_size) {\n  int layer_id;\n  map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id);\n  return *(layers_[layer_id]);\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp"
		}
	}
]
I0402 15:52:27.252218  6334 json_parser.cpp:18] 
[
	27,
	{
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DROS_PACKAGE_NAME=\\\"v2_mapping\\\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-Dv2_mapping_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/usr/lib/openmpi/include",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dinertial_nav_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/python2.7",
			"-I/usr/include/vtk-6.2",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/pcl-1.7",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/freetype2",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DQT_CORE_LIB",
			"-I/usr/include/openni2",
			"-I/home/mr/Workspace/loc/src/v2/build/common/proto",
			"-I/usr/include/hdf5/openmpi",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-DQT_NO_DEBUG",
			"-Dcommon_io_EXPORTS",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\"common\\\"",
			"-Dcommon_proto_EXPORTS",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/usr/include/eigen3",
			"-I/usr/include/libxml2",
			"-I/opt/ros/kinetic/include",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-DDISABLE_PNG",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-Dcommon_geometry_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/home/mr/Workspace/loc/src/v2/third_party/thread_pool",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n\n#include \"lidar_map_offline.h\"\n#include \"lmdb_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nstd::shared_ptr<LocalDatabase> LidarMapOffline::database_ = nullptr;\nLocalDatabase::MODE LidarMapOffline::database_operation_mode_;\nproto::map::MapInfo LidarMapOffline::map_info_;\n\nbool LidarMapOffline::configure(LocalDatabase::MODE mode) {\n  database_ = std::shared_ptr<LmdbDatabase>(new LmdbDatabase);\n  database_operation_mode_ = mode;\n\n  if (!database_->open(database_path_, database_operation_mode_)) {\n    return false;\n  }\n\n  std::string map_info_data;\n  if (database_->get(\"MapInfo\", &map_info_data)) {\n    return false;\n  }\n\n  if (!map_info_.ParseFromString(map_info_data)) {\n    return false;\n  }\n\n  return true;\n}\n\nbool LidarMapOffline::initializeLayer(int layer_id) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-initialize\n  }\n\n  // find the layer infomation in database\n  int layer_info_index = -1;\n  for (int i = 0; i < map_info_.layer_infos_size(); ++i) {\n    if (layer_id == map_info_.layer_infos(i).layer_id()) {\n      layer_info_index = i;\n      break;\n    }\n  }\n  if (-1 == layer_info_index) {\n    return false;  // the specific layer_id do not exist in database\n  }\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(map_info_.layer_infos(layer_info_index), database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::initializeLayer(const std::string& type_name, float grid_size,\n                                     float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  if(!initializeLayer(layer_id)){\n    return -1;\n  }\n\n  return layer_id;\n\n  return initializeLayer(layer_id);\n}\n\nbool LidarMapOffline::load(const Eigen::Vector3f& pos) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->load(pos);\n  }\n\n  return ret;\n}\n\nbool LidarMapOffline::addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->addPointCloud(pointcloud);\n\n  return false;\n}\n\nbool LidarMapOffline::getMap(int layer_id, const MapScope& scope, bool blocking,\n                             std::shared_ptr<Ndt3Interface>* ndt3) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->getMap(scope, blocking, ndt3);\n\n  return false;\n}\n\nbool LidarMapOffline::addLayer(const proto::config::MapLayerItem& layer_item) {\n  // initializeLayer is only used in wrtie and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  int layer_id = layer_item.layer_id();\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-add\n  }\n\n  // construct a layer_info\n  proto::map::MapLayerInfo layer_info;\n  layer_info.set_layer_id(layer_item.layer_id());\n  layer_info.set_grid_size(layer_item.grid_size());\n  layer_info.set_tile_size(layer_item.tile_size());\n  layer_info.set_type_name(layer_item.type_name());\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(layer_info, database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::addLayer(const std::string& type_name, float grid_size, float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  proto::config::MapLayerItem item;\n  item.set_layer_id(layer_id);\n  item.set_type_name(type_name);\n  item.set_grid_size(grid_size);\n  item.set_tile_size(tile_size);\n\n  if (!addLayer(item)) {\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::save() {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->save();\n  }\n\n  return ret;\n}\n\nconst MapLayer& LidarMapOffline::getLayer(int layer_id) { return *(layers_[layer_id]); }\n\nconst MapLayer& LidarMapOffline::getLayer(const std::string& type_name, float grid_size,\n                                          float tile_size) {\n  int layer_id;\n  map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id);\n  return *(layers_[layer_id]);\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp"
		}
	}
]
I0402 15:52:27.905411  6334 json_parser.cpp:18] 
[
	28,
	{
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DROS_PACKAGE_NAME=\\\"v2_mapping\\\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-Dv2_mapping_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/usr/lib/openmpi/include",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dinertial_nav_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/python2.7",
			"-I/usr/include/vtk-6.2",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/pcl-1.7",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/freetype2",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DQT_CORE_LIB",
			"-I/usr/include/openni2",
			"-I/home/mr/Workspace/loc/src/v2/build/common/proto",
			"-I/usr/include/hdf5/openmpi",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-DQT_NO_DEBUG",
			"-Dcommon_io_EXPORTS",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\"common\\\"",
			"-Dcommon_proto_EXPORTS",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/usr/include/eigen3",
			"-I/usr/include/libxml2",
			"-I/opt/ros/kinetic/include",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-DDISABLE_PNG",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-Dcommon_geometry_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/home/mr/Workspace/loc/src/v2/third_party/thread_pool",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n\n#include \"lidar_map_offline.h\"\n#include \"lmdb_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nstd::shared_ptr<LocalDatabase> LidarMapOffline::database_ = nullptr;\nLocalDatabase::MODE LidarMapOffline::database_operation_mode_;\nproto::map::MapInfo LidarMapOffline::map_info_;\n\nbool LidarMapOffline::configure(LocalDatabase::MODE mode) {\n  database_ = std::shared_ptr<LmdbDatabase>(new LmdbDatabase);\n  database_operation_mode_ = mode;\n\n  if (!database_->open(database_path_, database_operation_mode_)) {\n    return false;\n  }\n\n  std::string map_info_data;\n  if (database_->get(\"MapInfo\", &map_info_data)) {\n    return false;\n  }\n\n  if (!map_info_.ParseFromString(map_info_data)) {\n    return false;\n  }\n\n  return true;\n}\n\nbool LidarMapOffline::initializeLayer(int layer_id) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-initialize\n  }\n\n  // find the layer infomation in database\n  int layer_info_index = -1;\n  for (int i = 0; i < map_info_.layer_infos_size(); ++i) {\n    if (layer_id == map_info_.layer_infos(i).layer_id()) {\n      layer_info_index = i;\n      break;\n    }\n  }\n  if (-1 == layer_info_index) {\n    return false;  // the specific layer_id do not exist in database\n  }\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(map_info_.layer_infos(layer_info_index), database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::initializeLayer(const std::string& type_name, float grid_size,\n                                     float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  if(!initializeLayer(layer_id)){\n    return -1;\n  }\n\n  return layer_id;\n\n}\n\nbool LidarMapOffline::load(const Eigen::Vector3f& pos) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->load(pos);\n  }\n\n  return ret;\n}\n\nbool LidarMapOffline::addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->addPointCloud(pointcloud);\n\n  return false;\n}\n\nbool LidarMapOffline::getMap(int layer_id, const MapScope& scope, bool blocking,\n                             std::shared_ptr<Ndt3Interface>* ndt3) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->getMap(scope, blocking, ndt3);\n\n  return false;\n}\n\nbool LidarMapOffline::addLayer(const proto::config::MapLayerItem& layer_item) {\n  // initializeLayer is only used in wrtie and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  int layer_id = layer_item.layer_id();\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-add\n  }\n\n  // construct a layer_info\n  proto::map::MapLayerInfo layer_info;\n  layer_info.set_layer_id(layer_item.layer_id());\n  layer_info.set_grid_size(layer_item.grid_size());\n  layer_info.set_tile_size(layer_item.tile_size());\n  layer_info.set_type_name(layer_item.type_name());\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(layer_info, database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::addLayer(const std::string& type_name, float grid_size, float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  proto::config::MapLayerItem item;\n  item.set_layer_id(layer_id);\n  item.set_type_name(type_name);\n  item.set_grid_size(grid_size);\n  item.set_tile_size(tile_size);\n\n  if (!addLayer(item)) {\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::save() {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->save();\n  }\n\n  return ret;\n}\n\nconst MapLayer& LidarMapOffline::getLayer(int layer_id) { return *(layers_[layer_id]); }\n\nconst MapLayer& LidarMapOffline::getLayer(const std::string& type_name, float grid_size,\n                                          float tile_size) {\n  int layer_id;\n  map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id);\n  return *(layers_[layer_id]);\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp"
		}
	}
]
I0402 15:52:28.424341  6334 json_parser.cpp:18] 
[
	29,
	{
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DROS_PACKAGE_NAME=\\\"v2_mapping\\\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-Dv2_mapping_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/usr/lib/openmpi/include",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dinertial_nav_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/python2.7",
			"-I/usr/include/vtk-6.2",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/pcl-1.7",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/freetype2",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DQT_CORE_LIB",
			"-I/usr/include/openni2",
			"-I/home/mr/Workspace/loc/src/v2/build/common/proto",
			"-I/usr/include/hdf5/openmpi",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-DQT_NO_DEBUG",
			"-Dcommon_io_EXPORTS",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\"common\\\"",
			"-Dcommon_proto_EXPORTS",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/usr/include/eigen3",
			"-I/usr/include/libxml2",
			"-I/opt/ros/kinetic/include",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-DDISABLE_PNG",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-Dcommon_geometry_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/home/mr/Workspace/loc/src/v2/third_party/thread_pool",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n\n#include \"lidar_map_offline.h\"\n#include \"lmdb_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nstd::shared_ptr<LocalDatabase> LidarMapOffline::database_ = nullptr;\nLocalDatabase::MODE LidarMapOffline::database_operation_mode_;\nproto::map::MapInfo LidarMapOffline::map_info_;\n\nbool LidarMapOffline::configure(LocalDatabase::MODE mode) {\n  database_ = std::shared_ptr<LmdbDatabase>(new LmdbDatabase);\n  database_operation_mode_ = mode;\n\n  if (!database_->open(database_path_, database_operation_mode_)) {\n    return false;\n  }\n\n  std::string map_info_data;\n  if (database_->get(\"MapInfo\", &map_info_data)) {\n    return false;\n  }\n\n  if (!map_info_.ParseFromString(map_info_data)) {\n    return false;\n  }\n\n  return true;\n}\n\nbool LidarMapOffline::initializeLayer(int layer_id) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-initialize\n  }\n\n  // find the layer infomation in database\n  int layer_info_index = -1;\n  for (int i = 0; i < map_info_.layer_infos_size(); ++i) {\n    if (layer_id == map_info_.layer_infos(i).layer_id()) {\n      layer_info_index = i;\n      break;\n    }\n  }\n  if (-1 == layer_info_index) {\n    return false;  // the specific layer_id do not exist in database\n  }\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(map_info_.layer_infos(layer_info_index), database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::initializeLayer(const std::string& type_name, float grid_size,\n                                     float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  if(!initializeLayer(layer_id)){\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::load(const Eigen::Vector3f& pos) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->load(pos);\n  }\n\n  return ret;\n}\n\nbool LidarMapOffline::addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->addPointCloud(pointcloud);\n\n  return false;\n}\n\nbool LidarMapOffline::getMap(int layer_id, const MapScope& scope, bool blocking,\n                             std::shared_ptr<Ndt3Interface>* ndt3) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->getMap(scope, blocking, ndt3);\n\n  return false;\n}\n\nbool LidarMapOffline::addLayer(const proto::config::MapLayerItem& layer_item) {\n  // initializeLayer is only used in wrtie and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  int layer_id = layer_item.layer_id();\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-add\n  }\n\n  // construct a layer_info\n  proto::map::MapLayerInfo layer_info;\n  layer_info.set_layer_id(layer_item.layer_id());\n  layer_info.set_grid_size(layer_item.grid_size());\n  layer_info.set_tile_size(layer_item.tile_size());\n  layer_info.set_type_name(layer_item.type_name());\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(layer_info, database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::addLayer(const std::string& type_name, float grid_size, float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  proto::config::MapLayerItem item;\n  item.set_layer_id(layer_id);\n  item.set_type_name(type_name);\n  item.set_grid_size(grid_size);\n  item.set_tile_size(tile_size);\n\n  if (!addLayer(item)) {\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::save() {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->save();\n  }\n\n  return ret;\n}\n\nconst MapLayer& LidarMapOffline::getLayer(int layer_id) { return *(layers_[layer_id]); }\n\nconst MapLayer& LidarMapOffline::getLayer(const std::string& type_name, float grid_size,\n                                          float tile_size) {\n  int layer_id;\n  map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id);\n  return *(layers_[layer_id]);\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp"
		}
	}
]
I0402 15:53:49.023222  6334 json_parser.cpp:18] 
[
	30,
	{
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DROS_PACKAGE_NAME=\\\"v2_mapping\\\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-Dv2_mapping_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/usr/lib/openmpi/include",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dinertial_nav_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/python2.7",
			"-I/usr/include/vtk-6.2",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/pcl-1.7",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/freetype2",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DQT_CORE_LIB",
			"-I/usr/include/openni2",
			"-I/home/mr/Workspace/loc/src/v2/build/common/proto",
			"-I/usr/include/hdf5/openmpi",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-DQT_NO_DEBUG",
			"-Dcommon_io_EXPORTS",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\"common\\\"",
			"-Dcommon_proto_EXPORTS",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/usr/include/eigen3",
			"-I/usr/include/libxml2",
			"-I/opt/ros/kinetic/include",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-DDISABLE_PNG",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-Dcommon_geometry_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/home/mr/Workspace/loc/src/v2/third_party/thread_pool",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n\n#include \"lidar_map_offline.h\"\n#include \"lmdb_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nstd::shared_ptr<LocalDatabase> LidarMapOffline::database_ = nullptr;\nLocalDatabase::MODE LidarMapOffline::database_operation_mode_;\nproto::map::MapInfo LidarMapOffline::map_info_;\n\nbool LidarMapOffline::configure(LocalDatabase::MODE mode) {\n  database_ = std::shared_ptr<LmdbDatabase>(new LmdbDatabase);\n  database_operation_mode_ = mode;\n\n  if (!database_->open(database_path_, database_operation_mode_)) {\n    return false;\n  }\n\n  std::string map_info_data;\n  if (database_->get(\"MapInfo\", &map_info_data)) {\n    return false;\n  }\n\n  if (!map_info_.ParseFromString(map_info_data)) {\n    return false;\n  }\n\n  return true;\n}\n\nbool LidarMapOffline::initializeLayer(int layer_id) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-initialize\n  }\n\n  // find the layer infomation in database\n  int layer_info_index = -1;\n  for (int i = 0; i < map_info_.layer_infos_size(); ++i) {\n    if (layer_id == map_info_.layer_infos(i).layer_id()) {\n      layer_info_index = i;\n      break;\n    }\n  }\n  if (-1 == layer_info_index) {\n    return false;  // the specific layer_id do not exist in database\n  }\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(map_info_.layer_infos(layer_info_index), database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::initializeLayer(const std::string& type_name, float grid_size,\n                                     float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  if(!initializeLayer(layer_id)){\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::load(const Eigen::Vector3f& pos) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->load(pos);\n  }\n\n  return ret;\n}\n\nbool LidarMapOffline::addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->addPointCloud(pointcloud);\n\n  return false;\n}\n\nbool LidarMapOffline::getMap(int layer_id, const MapScope& scope, bool blocking,\n                             std::shared_ptr<Ndt3Interface>* ndt3) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->getMap(scope, blocking, ndt3);\n\n  return false;\n}\n\nbool LidarMapOffline::addLayer(const proto::config::MapLayerItem& layer_item) {\n  // initializeLayer is only used in wrtie and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  int layer_id = layer_item.layer_id();\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-add\n  }\n\n  // construct a layer_info\n  proto::map::MapLayerInfo layer_info;\n  layer_info.set_layer_id(layer_item.layer_id());\n  layer_info.set_grid_size(layer_item.grid_size());\n  layer_info.set_tile_size(layer_item.tile_size());\n  layer_info.set_type_name(layer_item.type_name());\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(layer_info, database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::addLayer(const std::string& type_name, float grid_size, float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  proto::config::MapLayerItem item;\n  item.set_layer_id(layer_id);\n  item.set_type_name(type_name);\n  item.set_grid_size(grid_size);\n  item.set_tile_size(tile_size);\n\n  if (!addLayer(item)) {\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::save() {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->save();\n  }\n\n  return ret;\n}\n\nconst MapLayer& LidarMapOffline::getLayer(int layer_id) { return *(layers_[layer_id]); }\n\nconst MapLayer& LidarMapOffline::getLayer(const std::string& type_name, float grid_size,\n                                          float tile_size) {\n  int layer_id;\n  map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id);\n  return *(layers_[layer_id]);\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp"
		}
	}
]
I0402 15:53:49.029606  6334 json_parser.cpp:18] 
[
	31,
	{
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DROS_PACKAGE_NAME=\\\"v2_mapping\\\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-Dv2_mapping_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/usr/lib/openmpi/include",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dinertial_nav_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/python2.7",
			"-I/usr/include/vtk-6.2",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/pcl-1.7",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/freetype2",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DQT_CORE_LIB",
			"-I/usr/include/openni2",
			"-I/home/mr/Workspace/loc/src/v2/build/common/proto",
			"-I/usr/include/hdf5/openmpi",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-DQT_NO_DEBUG",
			"-Dcommon_io_EXPORTS",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\"common\\\"",
			"-Dcommon_proto_EXPORTS",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/usr/include/eigen3",
			"-I/usr/include/libxml2",
			"-I/opt/ros/kinetic/include",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-DDISABLE_PNG",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-Dcommon_geometry_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/home/mr/Workspace/loc/src/v2/third_party/thread_pool",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n\n#include \"lidar_map_offline.h\"\n#include \"lmdb_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nstd::shared_ptr<LocalDatabase> LidarMapOffline::database_ = nullptr;\nLocalDatabase::MODE LidarMapOffline::database_operation_mode_;\nproto::map::MapInfo LidarMapOffline::map_info_;\n\nbool LidarMapOffline::configure(LocalDatabase::MODE mode) {\n  database_ = std::shared_ptr<LmdbDatabase>(new LmdbDatabase);\n  database_operation_mode_ = mode;\n\n  if (!database_->open(database_path_, database_operation_mode_)) {\n    return false;\n  }\n\n  std::string map_info_data;\n  if (database_->get(\"MapInfo\", &map_info_data)) {\n    return false;\n  }\n\n  if (!map_info_.ParseFromString(map_info_data)) {\n    return false;\n  }\n\n  return true;\n}\n\nbool LidarMapOffline::initializeLayer(int layer_id) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-initialize\n  }\n\n  // find the layer infomation in database\n  int layer_info_index = -1;\n  for (int i = 0; i < map_info_.layer_infos_size(); ++i) {\n    if (layer_id == map_info_.layer_infos(i).layer_id()) {\n      layer_info_index = i;\n      break;\n    }\n  }\n  if (-1 == layer_info_index) {\n    return false;  // the specific layer_id do not exist in database\n  }\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(map_info_.layer_infos(layer_info_index), database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::initializeLayer(const std::string& type_name, float grid_size,\n                                     float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  if(!initializeLayer(layer_id)){\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::load(const Eigen::Vector3f& pos) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->load(pos);\n  }\n\n  return ret;\n}\n\nbool LidarMapOffline::addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->addPointCloud(pointcloud);\n\n  return false;\n}\n\nbool LidarMapOffline::getMap(int layer_id, const MapScope& scope, bool blocking,\n                             std::shared_ptr<Ndt3Interface>* ndt3) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->getMap(scope, blocking, ndt3);\n\n  return false;\n}\n\nbool LidarMapOffline::addLayer(const proto::config::MapLayerItem& layer_item) {\n  // initializeLayer is only used in wrtie and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  int layer_id = layer_item.layer_id();\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-add\n  }\n\n  // construct a layer_info\n  proto::map::MapLayerInfo layer_info;\n  layer_info.set_layer_id(layer_item.layer_id());\n  layer_info.set_grid_size(layer_item.grid_size());\n  layer_info.set_tile_size(layer_item.tile_size());\n  layer_info.set_type_name(layer_item.type_name());\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(layer_info, database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::addLayer(const std::string& type_name, float grid_size, float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  proto::config::MapLayerItem item;\n  item.set_layer_id(layer_id);\n  item.set_type_name(type_name);\n  item.set_grid_size(grid_size);\n  item.set_tile_size(tile_size);\n\n  if (!addLayer(item)) {\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::save() {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->save();\n  }\n\n  return ret;\n}\n\nconst MapLayer& LidarMapOffline::getLayer(int layer_id) { return *(layers_[layer_id]); }\n\nconst MapLayer& LidarMapOffline::getLayer(const std::string& type_name, float grid_size,\n                                          float tile_size) {\n  int layer_id;\n  map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id);\n  return *(layers_[layer_id]);\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp"
		}
	}
]
I0402 15:54:51.193982  6334 json_parser.cpp:18] 
[
	32,
	{
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DROS_PACKAGE_NAME=\\\"v2_mapping\\\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-Dv2_mapping_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/usr/lib/openmpi/include",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dinertial_nav_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/python2.7",
			"-I/usr/include/vtk-6.2",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/pcl-1.7",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/freetype2",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DQT_CORE_LIB",
			"-I/usr/include/openni2",
			"-I/home/mr/Workspace/loc/src/v2/build/common/proto",
			"-I/usr/include/hdf5/openmpi",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-DQT_NO_DEBUG",
			"-Dcommon_io_EXPORTS",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\"common\\\"",
			"-Dcommon_proto_EXPORTS",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/usr/include/eigen3",
			"-I/usr/include/libxml2",
			"-I/opt/ros/kinetic/include",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-DDISABLE_PNG",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-Dcommon_geometry_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/home/mr/Workspace/loc/src/v2/third_party/thread_pool",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n\n#include \"lidar_map_offline.h\"\n#include \"lmdb_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nstd::shared_ptr<LocalDatabase> LidarMapOffline::database_ = nullptr;\nLocalDatabase::MODE LidarMapOffline::database_operation_mode_;\nproto::map::MapInfo LidarMapOffline::map_info_;\n\nbool LidarMapOffline::configure(LocalDatabase::MODE mode) {\n  database_ = std::shared_ptr<LmdbDatabase>(new LmdbDatabase);\n  database_operation_mode_ = mode;\n\n  if (!database_->open(database_path_, database_operation_mode_)) {\n    return false;\n  }\n\n  std::string map_info_data;\n  if (database_->get(\"MapInfo\", &map_info_data)) {\n    return false;\n  }\n\n  if (!map_info_.ParseFromString(map_info_data)) {\n    return false;\n  }\n\n  return true;\n}\n\nbool LidarMapOffline::initializeLayer(int layer_id) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-initialize\n  }\n\n  // find the layer infomation in database\n  int layer_info_index = -1;\n  for (int i = 0; i < map_info_.layer_infos_size(); ++i) {\n    if (layer_id == map_info_.layer_infos(i).layer_id()) {\n      layer_info_index = i;\n      break;\n    }\n  }\n  if (-1 == layer_info_index) {\n    return false;  // the specific layer_id do not exist in database\n  }\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(map_info_.layer_infos(layer_info_index), database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::initializeLayer(const std::string& type_name, float grid_size,\n                                     float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  if(!initializeLayer(layer_id)){\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::load(const Eigen::Vector3f& pos) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->load(pos);\n  }\n\n  return ret;\n}\n\nbool LidarMapOffline::addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->addPointCloud(pointcloud);\n\n  return false;\n}\n\nbool LidarMapOffline::getMap(int layer_id, const MapScope& scope, bool blocking,\n                             std::shared_ptr<Ndt3Interface>* ndt3) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->getMap(scope, blocking, ndt3);\n\n  return false;\n}\n\nbool LidarMapOffline::addLayer(const proto::config::MapLayerItem& layer_item) {\n  // initializeLayer is only used in wrtie and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  int layer_id = layer_item.layer_id();\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-add\n  }\n\n  // construct a layer_info\n  proto::map::MapLayerInfo layer_info;\n  layer_info.set_layer_id(layer_item.layer_id());\n  layer_info.set_grid_size(layer_item.grid_size());\n  layer_info.set_tile_size(layer_item.tile_size());\n  layer_info.set_type_name(layer_item.type_name());\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(layer_info, database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::addLayer(const std::string& type_name, float grid_size, float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  proto::config::MapLayerItem item;\n  item.set_layer_id(layer_id);\n  item.set_type_name(type_name);\n  item.set_grid_size(grid_size);\n  item.set_tile_size(tile_size);\n\n  if (!addLayer(item)) {\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::save() {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->save();\n  }\n\n  return ret;\n}\n\nconst MapLayer& LidarMapOffline::getLayer(int layer_id) { return *(layers_[layer_id]); }\n\nconst MapLayer& LidarMapOffline::getLayer(const std::string& type_name, float grid_size,\n                                          float tile_size) {\n  int layer_id;\n  map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id);\n  return *(layers_[layer_id]);\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp"
		}
	}
]
I0402 15:54:52.420914  6334 json_parser.cpp:18] 
[
	33,
	{
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DROS_PACKAGE_NAME=\\\"v2_mapping\\\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-Dv2_mapping_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/usr/lib/openmpi/include",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dinertial_nav_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/python2.7",
			"-I/usr/include/vtk-6.2",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/pcl-1.7",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/freetype2",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DQT_CORE_LIB",
			"-I/usr/include/openni2",
			"-I/home/mr/Workspace/loc/src/v2/build/common/proto",
			"-I/usr/include/hdf5/openmpi",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-DQT_NO_DEBUG",
			"-Dcommon_io_EXPORTS",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\"common\\\"",
			"-Dcommon_proto_EXPORTS",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/usr/include/eigen3",
			"-I/usr/include/libxml2",
			"-I/opt/ros/kinetic/include",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-DDISABLE_PNG",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-Dcommon_geometry_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/home/mr/Workspace/loc/src/v2/third_party/thread_pool",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n\n#include \"lidar_map_offline.h\"\n#include \"lmdb_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nstd::shared_ptr<LocalDatabase> LidarMapOffline::database_ = nullptr;\nLocalDatabase::MODE LidarMapOffline::database_operation_mode_;\nproto::map::MapInfo LidarMapOffline::map_info_;\n\nbool LidarMapOffline::configure(LocalDatabase::MODE mode) {\n  database_ = std::shared_ptr<LmdbDatabase>(new LmdbDatabase);\n  database_operation_mode_ = mode;\n\n  if (!database_->open(database_path_, database_operation_mode_)) {\n    return false;\n  }\n\n  std::string map_info_data;\n  if (database_->get(\"MapInfo\", &map_info_data)) {\n    return false;\n  }\n\n  if (!map_info_.ParseFromString(map_info_data)) {\n    return false;\n  }\n\n  return true;\n}\n\nbool LidarMapOffline::initializeLayer(int layer_id) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-initialize\n  }\n\n  // find the layer infomation in database\n  int layer_info_index = -1;\n  for (int i = 0; i < map_info_.layer_infos_size(); ++i) {\n    if (layer_id == map_info_.layer_infos(i).layer_id()) {\n      layer_info_index = i;\n      break;\n    }\n  }\n  if (-1 == layer_info_index) {\n    return false;  // the specific layer_id do not exist in database\n  }\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(map_info_.layer_infos(layer_info_index), database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::initializeLayer(const std::string& type_name, float grid_size,\n                                     float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  if(!initializeLayer(layer_id)){\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::load(const Eigen::Vector3f& pos) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->load(pos);\n  }\n\n  return ret;\n}\n\nbool LidarMapOffline::addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->addPointCloud(pointcloud);\n\n  return false;\n}\n\nbool LidarMapOffline::getMap(int layer_id, const MapScope& scope, bool blocking,\n                             std::shared_ptr<Ndt3Interface>* ndt3) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->getMap(scope, blocking, ndt3);\n\n  return false;\n}\n\nbool LidarMapOffline::addLayer(const proto::config::MapLayerItem& layer_item) {\n  // initializeLayer is only used in wrtie and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  int layer_id = layer_item.layer_id();\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-add\n  }\n\n  // construct a layer_info\n  proto::map::MapLayerInfo layer_info;\n  layer_info.set_layer_id(layer_item.layer_id());\n  layer_info.set_grid_size(layer_item.grid_size());\n  layer_info.set_tile_size(layer_item.tile_size());\n  layer_info.set_type_name(layer_item.type_name());\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(layer_info, database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::addLayer(const std::string& type_name, float grid_size, float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  proto::config::MapLayerItem item;\n  item.set_layer_id(layer_id);\n  item.set_type_name(type_name);\n  item.set_grid_size(grid_size);\n  item.set_tile_size(tile_size);\n\n  if (!addLayer(item)) {\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::save() {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->save();\n  }\n\n  return ret;\n}\n\nconst MapLayer& LidarMapOffline::getLayer(int layer_id) { return *(layers_[layer_id]); }\n\nconst MapLayer& LidarMapOffline::getLayer(const std::string& type_name, float grid_size,\n                                          float tile_size) {\n  int layer_id;\n  map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id);\n  return *(layers_[layer_id]);\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp"
		}
	}
]
I0402 15:54:52.477982  6334 json_parser.cpp:18] 
[
	34,
	{
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DROS_PACKAGE_NAME=\\\"v2_mapping\\\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-Dv2_mapping_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/usr/lib/openmpi/include",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dinertial_nav_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/python2.7",
			"-I/usr/include/vtk-6.2",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/pcl-1.7",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/freetype2",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DQT_CORE_LIB",
			"-I/usr/include/openni2",
			"-I/home/mr/Workspace/loc/src/v2/build/common/proto",
			"-I/usr/include/hdf5/openmpi",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-DQT_NO_DEBUG",
			"-Dcommon_io_EXPORTS",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\"common\\\"",
			"-Dcommon_proto_EXPORTS",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/usr/include/eigen3",
			"-I/usr/include/libxml2",
			"-I/opt/ros/kinetic/include",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-DDISABLE_PNG",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-Dcommon_geometry_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/home/mr/Workspace/loc/src/v2/third_party/thread_pool",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n\n#include \"lidar_map_offline.h\"\n#include \"lmdb_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nstd::shared_ptr<LocalDatabase> LidarMapOffline::database_ = nullptr;\nLocalDatabase::MODE LidarMapOffline::database_operation_mode_;\nproto::map::MapInfo LidarMapOffline::map_info_;\n\nbool LidarMapOffline::configure(LocalDatabase::MODE mode) {\n  database_ = std::shared_ptr<LmdbDatabase>(new LmdbDatabase);\n  database_operation_mode_ = mode;\n\n  if (!database_->open(database_path_, database_operation_mode_)) {\n    return false;\n  }\n\n  std::string map_info_data;\n  if (database_->get(\"MapInfo\", &map_info_data)) {\n    return false;\n  }\n\n  if (!map_info_.ParseFromString(map_info_data)) {\n    return false;\n  }\n\n  return true;\n}\n\nbool LidarMapOffline::initializeLayer(int layer_id) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-initialize\n  }\n\n  // find the layer infomation in database\n  int layer_info_index = -1;\n  for (int i = 0; i < map_info_.layer_infos_size(); ++i) {\n    if (layer_id == map_info_.layer_infos(i).layer_id()) {\n      layer_info_index = i;\n      break;\n    }\n  }\n  if (-1 == layer_info_index) {\n    return false;  // the specific layer_id do not exist in database\n  }\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(map_info_.layer_infos(layer_info_index), database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::initializeLayer(const std::string& type_name, float grid_size,\n                                     float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  if(!initializeLayer(layer_id)){\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::load(const Eigen::Vector3f& pos) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->load(pos);\n  }\n\n  return ret;\n}\n\nbool LidarMapOffline::addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->addPointCloud(pointcloud);\n\n  return false;\n}\n\nbool LidarMapOffline::getMap(int layer_id, const MapScope& scope, bool blocking,\n                             std::shared_ptr<Ndt3Interface>* ndt3) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->getMap(scope, blocking, ndt3);\n\n  return false;\n}\n\nbool LidarMapOffline::addLayer(const proto::config::MapLayerItem& layer_item) {\n  // initializeLayer is only used in wrtie and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  int layer_id = layer_item.layer_id();\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-add\n  }\n\n  // construct a layer_info\n  proto::map::MapLayerInfo layer_info;\n  layer_info.set_layer_id(layer_item.layer_id());\n  layer_info.set_grid_size(layer_item.grid_size());\n  layer_info.set_tile_size(layer_item.tile_size());\n  layer_info.set_type_name(layer_item.type_name());\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(layer_info, database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::addLayer(const std::string& type_name, float grid_size, float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  proto::config::MapLayerItem item;\n  item.set_layer_id(layer_id);\n  item.set_type_name(type_name);\n  item.set_grid_size(grid_size);\n  item.set_tile_size(tile_size);\n\n  if (!addLayer(item)) {\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::save() {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->save();\n  }\n\n  return ret;\n}\n\nconst MapLayer& LidarMapOffline::getLayer(int layer_id) { return *(layers_[layer_id]); }\n\nconst MapLayer& LidarMapOffline::getLayer(const std::string& type_name, float grid_size,\n                                          float tile_size) {\n  int layer_id;\n  map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id);\n  return *(layers_[layer_id]);\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp"
		}
	}
]
I0402 15:54:52.484091  6334 json_parser.cpp:18] 
0
