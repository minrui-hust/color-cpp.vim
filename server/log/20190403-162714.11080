Log file created at: 2019/04/03 16:27:14
Running on machine: mr-pc
Log line format: [IWEF]mmdd hh:mm:ss.uuuuuu threadid file:line] msg
I0403 16:27:14.823448 11080 json_parser.cpp:18] 
[
	1,
	{
		"bufnr" : 3,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/lmdb_database.cpp",
		"flags" : 
		[
			"/usr/bin/c++",
			"-x",
			"c++",
			"-DDISABLE_PCAP",
			"-DDISABLE_PNG",
			"-DQT_CORE_LIB",
			"-DQT_GUI_LIB",
			"-DQT_NO_DEBUG",
			"-DQT_WIDGETS_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\"localization\"",
			"-Dv2_mapping_EXPORTS",
			"-DvtkFiltersFlowPaths_AUTOINIT=1(vtkFiltersParallelFlowPaths)",
			"-DvtkIOExodus_AUTOINIT=1(vtkIOParallelExodus)",
			"-DvtkIOGeometry_AUTOINIT=1(vtkIOMPIParallel)",
			"-DvtkIOImage_AUTOINIT=1(vtkIOMPIImage)",
			"-DvtkIOSQL_AUTOINIT=2(vtkIOMySQL,vtkIOPostgreSQL)",
			"-DvtkRenderingContext2D_AUTOINIT=1(vtkRenderingContextOpenGL)",
			"-DvtkRenderingCore_AUTOINIT=4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)",
			"-DvtkRenderingFreeType_AUTOINIT=2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)",
			"-DvtkRenderingLIC_AUTOINIT=1(vtkRenderingParallelLIC)",
			"-DvtkRenderingVolume_AUTOINIT=1(vtkRenderingVolumeOpenGL)",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/include/vtk-6.2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/lib/openmpi/include",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/usr/include/python2.7",
			"-I/usr/include/freetype2",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/hdf5/openmpi",
			"-I/usr/include/libxml2",
			"-I/usr/include/tcl",
			"-I/usr/include/pcl-1.7",
			"-I/usr/include/eigen3",
			"-I/usr/include/ni",
			"-I/usr/include/openni2",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/devel/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-std=c++14",
			"-march=native",
			"-pipe",
			"-O2",
			"-Wall",
			"-Wextra",
			"-fopenmp",
			"-fPIC",
			"-pthread",
			"-fPIC",
			"-fPIC",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#include \"lmdb_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nbool LmdbDatabase::open(const std::string& path, LocalDatabase::MODE mode) {}\nbool LmdbDatabase::isOpen() {}\nbool LmdbDatabase::close() {}\nbool LmdbDatabase::get(const std::string& key, std::string* value) {}\nbool LmdbDatabase::put(const std::string& key, const std::string& value) {}\nbool LmdbDatabase::exist(const std::string& key) {}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/lmdb_database.cpp"
		}
	}
]
I0403 16:27:16.799026 11080 json_parser.cpp:18] 
[
	2,
	{
		"bufnr" : 3,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/lmdb_database.cpp",
		"flags" : 
		[
			"/usr/bin/c++",
			"-x",
			"c++",
			"-DDISABLE_PCAP",
			"-DDISABLE_PNG",
			"-DQT_CORE_LIB",
			"-DQT_GUI_LIB",
			"-DQT_NO_DEBUG",
			"-DQT_WIDGETS_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\"localization\"",
			"-Dv2_mapping_EXPORTS",
			"-DvtkFiltersFlowPaths_AUTOINIT=1(vtkFiltersParallelFlowPaths)",
			"-DvtkIOExodus_AUTOINIT=1(vtkIOParallelExodus)",
			"-DvtkIOGeometry_AUTOINIT=1(vtkIOMPIParallel)",
			"-DvtkIOImage_AUTOINIT=1(vtkIOMPIImage)",
			"-DvtkIOSQL_AUTOINIT=2(vtkIOMySQL,vtkIOPostgreSQL)",
			"-DvtkRenderingContext2D_AUTOINIT=1(vtkRenderingContextOpenGL)",
			"-DvtkRenderingCore_AUTOINIT=4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)",
			"-DvtkRenderingFreeType_AUTOINIT=2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)",
			"-DvtkRenderingLIC_AUTOINIT=1(vtkRenderingParallelLIC)",
			"-DvtkRenderingVolume_AUTOINIT=1(vtkRenderingVolumeOpenGL)",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/include/vtk-6.2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/lib/openmpi/include",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/usr/include/python2.7",
			"-I/usr/include/freetype2",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/hdf5/openmpi",
			"-I/usr/include/libxml2",
			"-I/usr/include/tcl",
			"-I/usr/include/pcl-1.7",
			"-I/usr/include/eigen3",
			"-I/usr/include/ni",
			"-I/usr/include/openni2",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/devel/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-std=c++14",
			"-march=native",
			"-pipe",
			"-O2",
			"-Wall",
			"-Wextra",
			"-fopenmp",
			"-fPIC",
			"-pthread",
			"-fPIC",
			"-fPIC",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#include \"lmdb_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nbool LmdbDatabase::open(const std::string& path, LocalDatabase::MODE mode) {}\nbool LmdbDatabase::isOpen() {}\nbool LmdbDatabase::close() {}\nbool LmdbDatabase::get(const std::string& key, std::string* value) {}\nbool LmdbDatabase::put(const std::string& key, const std::string& value) {}\nbool LmdbDatabase::exist(const std::string& key) {}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/lmdb_database.cpp"
		}
	}
]
I0403 16:27:18.038092 11080 json_parser.cpp:18] 
[
	3,
	{
		"bufnr" : 3,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/lmdb_database.cpp",
		"flags" : 
		[
			"/usr/bin/c++",
			"-x",
			"c++",
			"-DDISABLE_PCAP",
			"-DDISABLE_PNG",
			"-DQT_CORE_LIB",
			"-DQT_GUI_LIB",
			"-DQT_NO_DEBUG",
			"-DQT_WIDGETS_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\"localization\"",
			"-Dv2_mapping_EXPORTS",
			"-DvtkFiltersFlowPaths_AUTOINIT=1(vtkFiltersParallelFlowPaths)",
			"-DvtkIOExodus_AUTOINIT=1(vtkIOParallelExodus)",
			"-DvtkIOGeometry_AUTOINIT=1(vtkIOMPIParallel)",
			"-DvtkIOImage_AUTOINIT=1(vtkIOMPIImage)",
			"-DvtkIOSQL_AUTOINIT=2(vtkIOMySQL,vtkIOPostgreSQL)",
			"-DvtkRenderingContext2D_AUTOINIT=1(vtkRenderingContextOpenGL)",
			"-DvtkRenderingCore_AUTOINIT=4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)",
			"-DvtkRenderingFreeType_AUTOINIT=2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)",
			"-DvtkRenderingLIC_AUTOINIT=1(vtkRenderingParallelLIC)",
			"-DvtkRenderingVolume_AUTOINIT=1(vtkRenderingVolumeOpenGL)",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/include/vtk-6.2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/lib/openmpi/include",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/usr/include/python2.7",
			"-I/usr/include/freetype2",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/hdf5/openmpi",
			"-I/usr/include/libxml2",
			"-I/usr/include/tcl",
			"-I/usr/include/pcl-1.7",
			"-I/usr/include/eigen3",
			"-I/usr/include/ni",
			"-I/usr/include/openni2",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/devel/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-std=c++14",
			"-march=native",
			"-pipe",
			"-O2",
			"-Wall",
			"-Wextra",
			"-fopenmp",
			"-fPIC",
			"-pthread",
			"-fPIC",
			"-fPIC",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#include \"lmdb_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nbool LmdbDatabase::open(const std::string& path, LocalDatabase::MODE mode) {}\nbool LmdbDatabase::isOpen() {}\nbool LmdbDatabase::close() {}\nbool LmdbDatabase::get(const std::string& key, std::string* value) {}\nbool LmdbDatabase::put(const std::string& key, const std::string& value) {}\nbool LmdbDatabase::exist(const std::string& key) {}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/lmdb_database.cpp"
		}
	}
]
I0403 16:27:18.152940 11080 json_parser.cpp:18] 
[
	4,
	{
		"bufnr" : 5,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/lmdb_database.h",
		"flags" : 
		[
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-Dndt_cpu_EXPORTS",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-Dndt_tku_EXPORTS",
			"-I/opt/ros/kinetic/include",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dlocalization_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-I/usr/include/pcl-1.7",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-I/usr/include/eigen3",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/vtk-6.2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-Dgnss_EXPORTS",
			"-Dv2_mapping_EXPORTS",
			"-DQT_GUI_LIB",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-DDISABLE_PNG",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-I/usr/include/tcl",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-DUSE_PCL_OPENMP",
			"-Dloc_geometry_EXPORTS",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-DDISABLE_PCAP",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-I/usr/include/freetype2",
			"-DQT_NO_DEBUG",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/x86_64-linux-gnu",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/usr/local/include",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-Dsensor_fusion_EXPORTS",
			"-Dinertial_nav_EXPORTS",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/usr/include/libxml2",
			"-Dloc_io_EXPORTS",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-I/usr/include/openni2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DQT_CORE_LIB",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-I/usr/include/python2.7",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include <string>\n\n#include \"local_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass LmdbDatabase : public LocalDatabase {\n public:\n  /// @brief implemention of LocalDatabase::open\n  /// @see LocalDatabase for more infomation\n  bool open(const std::string& path, LocalDatabase::MODE mode) override;\n\n  /// @brief implemention of LocalDatabase::isOpen\n  /// @see LocalDatabase for more infomation\n  bool isOpen() override;\n\n  /// @brief implemention of LocalDatabase::close\n  /// @see LocalDatabase for more infomation\n  bool close() override;\n\n  /// @brief implemention of LocalDatabase::get\n  /// @see LocalDatabase for more infomation\n  bool get(const std::string& key, std::string* value) override;\n\n  /// @brief implemention of LocalDatabase::put\n  /// @see LocalDatabase for more infomation\n  bool put(const std::string& key, const std::string& value) override;\n\n  /// @brief implemention of LocalDatabase::exist\n  /// @see LocalDatabase for more infomation\n  bool exist(const std::string& key) override;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/lmdb_database.h"
		}
	}
]
I0403 16:27:21.133975 11080 json_parser.cpp:18] 
[
	5,
	{
		"bufnr" : 5,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/lmdb_database.h",
		"flags" : 
		[
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-Dndt_cpu_EXPORTS",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-Dndt_tku_EXPORTS",
			"-I/opt/ros/kinetic/include",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dlocalization_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-I/usr/include/pcl-1.7",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-I/usr/include/eigen3",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/vtk-6.2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-Dgnss_EXPORTS",
			"-Dv2_mapping_EXPORTS",
			"-DQT_GUI_LIB",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-DDISABLE_PNG",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-I/usr/include/tcl",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-DUSE_PCL_OPENMP",
			"-Dloc_geometry_EXPORTS",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-DDISABLE_PCAP",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-I/usr/include/freetype2",
			"-DQT_NO_DEBUG",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/x86_64-linux-gnu",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/usr/local/include",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-Dsensor_fusion_EXPORTS",
			"-Dinertial_nav_EXPORTS",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/usr/include/libxml2",
			"-Dloc_io_EXPORTS",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-I/usr/include/openni2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DQT_CORE_LIB",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-I/usr/include/python2.7",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include <string>\n\n#include \"local_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass LmdbDatabase : public LocalDatabase {\n public:\n  /// @brief implemention of LocalDatabase::open\n  /// @see LocalDatabase for more infomation\n  bool open(const std::string& path, LocalDatabase::MODE mode) override;\n\n  /// @brief implemention of LocalDatabase::isOpen\n  /// @see LocalDatabase for more infomation\n  bool isOpen() override;\n\n  /// @brief implemention of LocalDatabase::close\n  /// @see LocalDatabase for more infomation\n  bool close() override;\n\n  /// @brief implemention of LocalDatabase::get\n  /// @see LocalDatabase for more infomation\n  bool get(const std::string& key, std::string* value) override;\n\n  /// @brief implemention of LocalDatabase::put\n  /// @see LocalDatabase for more infomation\n  bool put(const std::string& key, const std::string& value) override;\n\n  /// @brief implemention of LocalDatabase::exist\n  /// @see LocalDatabase for more infomation\n  bool exist(const std::string& key) override;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/lmdb_database.h"
		}
	}
]
I0403 16:27:21.185745 11080 json_parser.cpp:18] 
[
	6,
	{
		"bufnr" : 6,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/local_database.h",
		"flags" : 
		[
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-Dndt_cpu_EXPORTS",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-Dndt_tku_EXPORTS",
			"-I/opt/ros/kinetic/include",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dlocalization_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-I/usr/include/pcl-1.7",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-I/usr/include/eigen3",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/vtk-6.2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-Dgnss_EXPORTS",
			"-Dv2_mapping_EXPORTS",
			"-DQT_GUI_LIB",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-DDISABLE_PNG",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-I/usr/include/tcl",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-DUSE_PCL_OPENMP",
			"-Dloc_geometry_EXPORTS",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-DDISABLE_PCAP",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-I/usr/include/freetype2",
			"-DQT_NO_DEBUG",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/x86_64-linux-gnu",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/usr/local/include",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-Dsensor_fusion_EXPORTS",
			"-Dinertial_nav_EXPORTS",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/usr/include/libxml2",
			"-Dloc_io_EXPORTS",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-I/usr/include/openni2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DQT_CORE_LIB",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-I/usr/include/python2.7",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include <string>\n\nnamespace allride {\nnamespace mapping {\n\nclass LocalDatabase {\n public:\n  enum MODE { READ, WRITE, NEW };\n\n  /// @brief open the database\n  /// @param[in] the file path of the database file\n  /// @param[in] open mode\n  /// @return true on succeed, else false\n  virtual bool open(const std::string& path, MODE mode) = 0;\n\n  /// @brief check whether database is opened\n  /// @return true on opened, else false\n  virtual bool isOpen() = 0;\n\n  /// @brief close the database\n  /// @return true on succeed, else false\n  virtual bool close() = 0;\n\n  /// @brief get value from database\n  /// @param[in] key the key of the value to be got\n  /// @param[out] value stores the value got\n  /// @return true on succeed, else false\n  virtual bool get(const std::string& key, std::string* value) = 0;\n\n  /// @brief put key-value pair into database\n  /// @param[in] key the key of key-value pair\n  /// @param[out] value the value of key-value pair\n  /// @return true on succeed, else false\n  virtual bool put(const std::string& key, const std::string& value) = 0;\n\n  /// @brief check whether a key exist in database\n  /// @param[in] key the key to check\n  /// @return true on exist, else false\n  virtual bool exist(const std::string& key) = 0;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/local_database.h"
		}
	}
]
I0403 16:27:23.805871 11080 json_parser.cpp:18] 
[
	7,
	{
		"bufnr" : 6,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/local_database.h",
		"flags" : 
		[
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-Dndt_cpu_EXPORTS",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-Dndt_tku_EXPORTS",
			"-I/opt/ros/kinetic/include",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dlocalization_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-I/usr/include/pcl-1.7",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-I/usr/include/eigen3",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/vtk-6.2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-Dgnss_EXPORTS",
			"-Dv2_mapping_EXPORTS",
			"-DQT_GUI_LIB",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-DDISABLE_PNG",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-I/usr/include/tcl",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-DUSE_PCL_OPENMP",
			"-Dloc_geometry_EXPORTS",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-DDISABLE_PCAP",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-I/usr/include/freetype2",
			"-DQT_NO_DEBUG",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/x86_64-linux-gnu",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/usr/local/include",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-Dsensor_fusion_EXPORTS",
			"-Dinertial_nav_EXPORTS",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/usr/include/libxml2",
			"-Dloc_io_EXPORTS",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-I/usr/include/openni2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DQT_CORE_LIB",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-I/usr/include/python2.7",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include <string>\n\nnamespace allride {\nnamespace mapping {\n\nclass LocalDatabase {\n public:\n  enum MODE { READ, WRITE, NEW };\n\n  /// @brief open the database\n  /// @param[in] the file path of the database file\n  /// @param[in] open mode\n  /// @return true on succeed, else false\n  virtual bool open(const std::string& path, MODE mode) = 0;\n\n  /// @brief check whether database is opened\n  /// @return true on opened, else false\n  virtual bool isOpen() = 0;\n\n  /// @brief close the database\n  /// @return true on succeed, else false\n  virtual bool close() = 0;\n\n  /// @brief get value from database\n  /// @param[in] key the key of the value to be got\n  /// @param[out] value stores the value got\n  /// @return true on succeed, else false\n  virtual bool get(const std::string& key, std::string* value) = 0;\n\n  /// @brief put key-value pair into database\n  /// @param[in] key the key of key-value pair\n  /// @param[out] value the value of key-value pair\n  /// @return true on succeed, else false\n  virtual bool put(const std::string& key, const std::string& value) = 0;\n\n  /// @brief check whether a key exist in database\n  /// @param[in] key the key to check\n  /// @return true on exist, else false\n  virtual bool exist(const std::string& key) = 0;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/local_database.h"
		}
	}
]
I0403 16:27:23.856070 11080 json_parser.cpp:18] 
[
	8,
	{
		"bufnr" : 7,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/map_layer_dictionary_parser.cpp",
		"flags" : 
		[
			"/usr/bin/c++",
			"-x",
			"c++",
			"-DDISABLE_PCAP",
			"-DDISABLE_PNG",
			"-DQT_CORE_LIB",
			"-DQT_GUI_LIB",
			"-DQT_NO_DEBUG",
			"-DQT_WIDGETS_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\"localization\"",
			"-Dv2_mapping_EXPORTS",
			"-DvtkFiltersFlowPaths_AUTOINIT=1(vtkFiltersParallelFlowPaths)",
			"-DvtkIOExodus_AUTOINIT=1(vtkIOParallelExodus)",
			"-DvtkIOGeometry_AUTOINIT=1(vtkIOMPIParallel)",
			"-DvtkIOImage_AUTOINIT=1(vtkIOMPIImage)",
			"-DvtkIOSQL_AUTOINIT=2(vtkIOMySQL,vtkIOPostgreSQL)",
			"-DvtkRenderingContext2D_AUTOINIT=1(vtkRenderingContextOpenGL)",
			"-DvtkRenderingCore_AUTOINIT=4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)",
			"-DvtkRenderingFreeType_AUTOINIT=2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)",
			"-DvtkRenderingLIC_AUTOINIT=1(vtkRenderingParallelLIC)",
			"-DvtkRenderingVolume_AUTOINIT=1(vtkRenderingVolumeOpenGL)",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/include/vtk-6.2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/lib/openmpi/include",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/usr/include/python2.7",
			"-I/usr/include/freetype2",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/hdf5/openmpi",
			"-I/usr/include/libxml2",
			"-I/usr/include/tcl",
			"-I/usr/include/pcl-1.7",
			"-I/usr/include/eigen3",
			"-I/usr/include/ni",
			"-I/usr/include/openni2",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/devel/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-std=c++14",
			"-march=native",
			"-pipe",
			"-O2",
			"-Wall",
			"-Wextra",
			"-fopenmp",
			"-fPIC",
			"-pthread",
			"-fPIC",
			"-fPIC",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All rights reserved.\n// Authors: Yongjian Zhao (yongjian.zhao@allride.ai)\n\n#include <fstream>\n#include <iostream>\n#include <sstream>\n#include <vector>\n\n#include \"common/io/proto_io.h\"\n#include \"common/proto/config/config_map.pb.h\"\n#include \"map_layer_dictionary_parser.h\"\n\nnamespace allride {\nnamespace mapping {\n\nstatic const float grid_size_ratio = 1000.0f;  // convert from m to mm,\n\nbool MapLayerDictionaryParser::load(const std::string& dict_file) {\n  proto::config::MapLayerDictionary dict;\n  if (!common::ProtoIO::readProtoFromTextFile(dict_file, &dict)) {\n    std::cerr << \"MapLayerDictionaryParser: failed to load from dictionary file!\" << std::endl;\n    std::cerr << \"dict_file: \" << dict_file << std::endl;\n    return false;\n  }\n\n  for (const auto& item : dict.items()) {\n    int layer_id = item.layer_id();\n    std::string type_name = item.type_name();\n    float grid_size = item.grid_size();\n    float tile_size = item.tile_size();\n\n    // compose the key\n    std::string key;\n    composeKey(type_name, grid_size, tile_size, &key);\n\n    // set unordered_map\n    id_to_key_[layer_id] = key;\n    key_to_id_[key] = layer_id;\n  }\n\n  return true;\n}\n\nbool MapLayerDictionaryParser::getInfoById(const int layer_id, std::string* type_name,\n                                           float* grid_size, float* tile_size) {\n  if (id_to_key_.count(layer_id) == 0) {\n    return false;\n  }\n\n  analyseKey(id_to_key_[layer_id], type_name, grid_size, tile_size);\n  return true;\n}\n\nbool MapLayerDictionaryParser::getIdByInfo(const std::string& type_name, const float& grid_size,\n                                           const float& tile_size, int* layer_id) {\n  std::string key;\n  composeKey(type_name, grid_size, tile_size, &key);\n  if (key_to_id_.count(key) == 0) {\n    return false;\n  }\n\n  *layer_id = key_to_id_[key];\n  return true;\n}\n\nfloat MapLayerDictionaryParser::getGridSize(const int layer_id) {\n  float grid_size;\n  if (!getInfoById(layer_id, nullptr, &grid_size, nullptr)) {\n    return -1;  // return a negtive value for invalid layer_id\n  }\n\n  return grid_size;\n}\n\nfloat MapLayerDictionaryParser::getTileSize(const int layer_id) {\n  float tile_size;\n  if (!getInfoById(layer_id, nullptr, nullptr, &tile_size)) {\n    return -1;  // return a negtive value for invalid layer_id\n  }\n\n  return tile_size;\n}\n\nstd::string MapLayerDictionaryParser::getTypeName(const int layer_id) {\n  std::string type_name;\n  if (!getInfoById(layer_id, &type_name, nullptr, nullptr)) {\n    return std::string(\"\");  // return an empty string for invalid layer_id\n  }\n\n  return type_name;\n}\n\nbool MapLayerDictionaryParser::addItem(const int layer_id, const std::string& type_name,\n                                       const float grid_size, const float tile_size) {\n  if (id_to_key_.count(layer_id) == 1) {\n    std::cerr << \"failed to add item: layer_id \" << layer_id << \" has already exited in dictionary!\"\n              << std::endl;\n    return false;\n  }\n\n  std::string key;\n  composeKey(type_name, grid_size, tile_size, &key);\n  if (key_to_id_.count(key) == 1) {\n    std::cerr << \"failed to add item: layer configuration has already existed in dictionary!\"\n              << std::endl;\n    return false;\n  }\n\n  id_to_key_[layer_id] = key;\n  key_to_id_[key] = layer_id;\n  return true;\n}\n\nbool MapLayerDictionaryParser::save(const std::string& dict_file) {\n  // sort layer id\n  std::vector<int> layer_ids;\n  for (auto& pair : id_to_key_) {\n    layer_ids.emplace_back(pair.first);\n  }\n  std::sort(layer_ids.begin(), layer_ids.end());\n\n  // add item to dict\n  proto::config::MapLayerDictionary dict;\n  for (auto& id : layer_ids) {\n    // analyze key\n    std::string type_name;\n    float grid_size;\n    float tile_size;\n    analyseKey(id_to_key_[id], &type_name, &grid_size, &tile_size);\n\n    // add item\n    proto::config::MapLayerItem* item = dict.add_items();\n    item->set_layer_id(id);\n    item->set_type_name(type_name);\n    item->set_grid_size(grid_size);\n    item->set_tile_size(tile_size);\n  }\n\n  // write dict to file\n  return common::ProtoIO::writeProtoToTextFile(dict_file, dict);\n}\n\nvoid MapLayerDictionaryParser::composeKey(const std::string& type_name, const float& grid_size,\n                                          const float& tile_size, std::string* key) {\n  std::stringstream str_stream;\n  str_stream << type_name << \"_\" << static_cast<int>(grid_size * grid_size_ratio) << \"_\"\n             << static_cast<int>(tile_size);\n  *key = str_stream.str();\n}\n\nvoid MapLayerDictionaryParser::analyseKey(const std::string& key, std::string* type_name,\n                                          float* grid_size, float* tile_size) {\n  std::vector<std::string> substrs;\n  substrs.resize(3);\n\n  // achieve sub strings from key\n  size_t tail = key.size() - 1;\n  for (int i = 0; i < 2; i++) {\n    size_t pos = key.rfind('_', tail);\n    substrs[2 - i] = key.substr(pos + 1, tail - pos);\n    tail = pos - 1;\n  }\n  substrs[0] = key.substr(0, tail + 1);\n\n  // output\n  if (tile_size != nullptr) {\n    *tile_size = std::stof(substrs[2]);\n  }\n  if (grid_size != nullptr) {\n    *grid_size = std::stof(substrs[1]) / grid_size_ratio;\n  }\n  if (type_name != nullptr) {\n    *type_name = substrs[0];\n  }\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/map_layer_dictionary_parser.cpp"
		}
	}
]
I0403 16:27:26.566277 11080 json_parser.cpp:18] 
[
	9,
	{
		"bufnr" : 7,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/map_layer_dictionary_parser.cpp",
		"flags" : 
		[
			"/usr/bin/c++",
			"-x",
			"c++",
			"-DDISABLE_PCAP",
			"-DDISABLE_PNG",
			"-DQT_CORE_LIB",
			"-DQT_GUI_LIB",
			"-DQT_NO_DEBUG",
			"-DQT_WIDGETS_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\"localization\"",
			"-Dv2_mapping_EXPORTS",
			"-DvtkFiltersFlowPaths_AUTOINIT=1(vtkFiltersParallelFlowPaths)",
			"-DvtkIOExodus_AUTOINIT=1(vtkIOParallelExodus)",
			"-DvtkIOGeometry_AUTOINIT=1(vtkIOMPIParallel)",
			"-DvtkIOImage_AUTOINIT=1(vtkIOMPIImage)",
			"-DvtkIOSQL_AUTOINIT=2(vtkIOMySQL,vtkIOPostgreSQL)",
			"-DvtkRenderingContext2D_AUTOINIT=1(vtkRenderingContextOpenGL)",
			"-DvtkRenderingCore_AUTOINIT=4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)",
			"-DvtkRenderingFreeType_AUTOINIT=2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)",
			"-DvtkRenderingLIC_AUTOINIT=1(vtkRenderingParallelLIC)",
			"-DvtkRenderingVolume_AUTOINIT=1(vtkRenderingVolumeOpenGL)",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/include/vtk-6.2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/lib/openmpi/include",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/usr/include/python2.7",
			"-I/usr/include/freetype2",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/hdf5/openmpi",
			"-I/usr/include/libxml2",
			"-I/usr/include/tcl",
			"-I/usr/include/pcl-1.7",
			"-I/usr/include/eigen3",
			"-I/usr/include/ni",
			"-I/usr/include/openni2",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/devel/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-std=c++14",
			"-march=native",
			"-pipe",
			"-O2",
			"-Wall",
			"-Wextra",
			"-fopenmp",
			"-fPIC",
			"-pthread",
			"-fPIC",
			"-fPIC",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All rights reserved.\n// Authors: Yongjian Zhao (yongjian.zhao@allride.ai)\n\n#include <fstream>\n#include <iostream>\n#include <sstream>\n#include <vector>\n\n#include \"common/io/proto_io.h\"\n#include \"common/proto/config/config_map.pb.h\"\n#include \"map_layer_dictionary_parser.h\"\n\nnamespace allride {\nnamespace mapping {\n\nstatic const float grid_size_ratio = 1000.0f;  // convert from m to mm,\n\nbool MapLayerDictionaryParser::load(const std::string& dict_file) {\n  proto::config::MapLayerDictionary dict;\n  if (!common::ProtoIO::readProtoFromTextFile(dict_file, &dict)) {\n    std::cerr << \"MapLayerDictionaryParser: failed to load from dictionary file!\" << std::endl;\n    std::cerr << \"dict_file: \" << dict_file << std::endl;\n    return false;\n  }\n\n  for (const auto& item : dict.items()) {\n    int layer_id = item.layer_id();\n    std::string type_name = item.type_name();\n    float grid_size = item.grid_size();\n    float tile_size = item.tile_size();\n\n    // compose the key\n    std::string key;\n    composeKey(type_name, grid_size, tile_size, &key);\n\n    // set unordered_map\n    id_to_key_[layer_id] = key;\n    key_to_id_[key] = layer_id;\n  }\n\n  return true;\n}\n\nbool MapLayerDictionaryParser::getInfoById(const int layer_id, std::string* type_name,\n                                           float* grid_size, float* tile_size) {\n  if (id_to_key_.count(layer_id) == 0) {\n    return false;\n  }\n\n  analyseKey(id_to_key_[layer_id], type_name, grid_size, tile_size);\n  return true;\n}\n\nbool MapLayerDictionaryParser::getIdByInfo(const std::string& type_name, const float& grid_size,\n                                           const float& tile_size, int* layer_id) {\n  std::string key;\n  composeKey(type_name, grid_size, tile_size, &key);\n  if (key_to_id_.count(key) == 0) {\n    return false;\n  }\n\n  *layer_id = key_to_id_[key];\n  return true;\n}\n\nfloat MapLayerDictionaryParser::getGridSize(const int layer_id) {\n  float grid_size;\n  if (!getInfoById(layer_id, nullptr, &grid_size, nullptr)) {\n    return -1;  // return a negtive value for invalid layer_id\n  }\n\n  return grid_size;\n}\n\nfloat MapLayerDictionaryParser::getTileSize(const int layer_id) {\n  float tile_size;\n  if (!getInfoById(layer_id, nullptr, nullptr, &tile_size)) {\n    return -1;  // return a negtive value for invalid layer_id\n  }\n\n  return tile_size;\n}\n\nstd::string MapLayerDictionaryParser::getTypeName(const int layer_id) {\n  std::string type_name;\n  if (!getInfoById(layer_id, &type_name, nullptr, nullptr)) {\n    return std::string(\"\");  // return an empty string for invalid layer_id\n  }\n\n  return type_name;\n}\n\nbool MapLayerDictionaryParser::addItem(const int layer_id, const std::string& type_name,\n                                       const float grid_size, const float tile_size) {\n  if (id_to_key_.count(layer_id) == 1) {\n    std::cerr << \"failed to add item: layer_id \" << layer_id << \" has already exited in dictionary!\"\n              << std::endl;\n    return false;\n  }\n\n  std::string key;\n  composeKey(type_name, grid_size, tile_size, &key);\n  if (key_to_id_.count(key) == 1) {\n    std::cerr << \"failed to add item: layer configuration has already existed in dictionary!\"\n              << std::endl;\n    return false;\n  }\n\n  id_to_key_[layer_id] = key;\n  key_to_id_[key] = layer_id;\n  return true;\n}\n\nbool MapLayerDictionaryParser::save(const std::string& dict_file) {\n  // sort layer id\n  std::vector<int> layer_ids;\n  for (auto& pair : id_to_key_) {\n    layer_ids.emplace_back(pair.first);\n  }\n  std::sort(layer_ids.begin(), layer_ids.end());\n\n  // add item to dict\n  proto::config::MapLayerDictionary dict;\n  for (auto& id : layer_ids) {\n    // analyze key\n    std::string type_name;\n    float grid_size;\n    float tile_size;\n    analyseKey(id_to_key_[id], &type_name, &grid_size, &tile_size);\n\n    // add item\n    proto::config::MapLayerItem* item = dict.add_items();\n    item->set_layer_id(id);\n    item->set_type_name(type_name);\n    item->set_grid_size(grid_size);\n    item->set_tile_size(tile_size);\n  }\n\n  // write dict to file\n  return common::ProtoIO::writeProtoToTextFile(dict_file, dict);\n}\n\nvoid MapLayerDictionaryParser::composeKey(const std::string& type_name, const float& grid_size,\n                                          const float& tile_size, std::string* key) {\n  std::stringstream str_stream;\n  str_stream << type_name << \"_\" << static_cast<int>(grid_size * grid_size_ratio) << \"_\"\n             << static_cast<int>(tile_size);\n  *key = str_stream.str();\n}\n\nvoid MapLayerDictionaryParser::analyseKey(const std::string& key, std::string* type_name,\n                                          float* grid_size, float* tile_size) {\n  std::vector<std::string> substrs;\n  substrs.resize(3);\n\n  // achieve sub strings from key\n  size_t tail = key.size() - 1;\n  for (int i = 0; i < 2; i++) {\n    size_t pos = key.rfind('_', tail);\n    substrs[2 - i] = key.substr(pos + 1, tail - pos);\n    tail = pos - 1;\n  }\n  substrs[0] = key.substr(0, tail + 1);\n\n  // output\n  if (tile_size != nullptr) {\n    *tile_size = std::stof(substrs[2]);\n  }\n  if (grid_size != nullptr) {\n    *grid_size = std::stof(substrs[1]) / grid_size_ratio;\n  }\n  if (type_name != nullptr) {\n    *type_name = substrs[0];\n  }\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/map_layer_dictionary_parser.cpp"
		}
	}
]
I0403 16:27:26.686166 11080 json_parser.cpp:18] 
[
	10,
	{
		"bufnr" : 8,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/map_layer_dictionary_parser.h",
		"flags" : 
		[
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-Dndt_cpu_EXPORTS",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-Dndt_tku_EXPORTS",
			"-I/opt/ros/kinetic/include",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dlocalization_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-I/usr/include/pcl-1.7",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-I/usr/include/eigen3",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/vtk-6.2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-Dgnss_EXPORTS",
			"-Dv2_mapping_EXPORTS",
			"-DQT_GUI_LIB",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-DDISABLE_PNG",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-I/usr/include/tcl",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-DUSE_PCL_OPENMP",
			"-Dloc_geometry_EXPORTS",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-DDISABLE_PCAP",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-I/usr/include/freetype2",
			"-DQT_NO_DEBUG",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/x86_64-linux-gnu",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/usr/local/include",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-Dsensor_fusion_EXPORTS",
			"-Dinertial_nav_EXPORTS",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/usr/include/libxml2",
			"-Dloc_io_EXPORTS",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-I/usr/include/openni2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DQT_CORE_LIB",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-I/usr/include/python2.7",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All rights reserved.\n// Authors: Yongjian Zhao (yongjian.zhao@allride.ai)\n\n#pragma once\n\n#include <string>\n#include <unordered_map>\n\n#include \"common/proto/config/config_map.pb.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass MapLayerDictionaryParser {\n public:\n  MapLayerDictionaryParser() = default;\n  ~MapLayerDictionaryParser() = default;\n\n  // interface for using dictionary\n  bool load(const std::string& dict_file);\n\n  bool getInfoById(const int layer_id, std::string* type_name, float* grid_size, float* tile_size);\n\n  float getGridSize(const int layer_id);\n\n  float getTileSize(const int layer_id);\n\n  std::string getTypeName(const int layer_id);\n\n  bool getIdByInfo(const std::string& type_name, const float& grid_size, const float& tile_size,\n                   int* layer_id);\n\n  // interface for making dictionary,\n  bool addItem(const int layer_id, const std::string& type_name, const float grid_size,\n               const float tile_size);\n\n  bool save(const std::string& dict_file);\n\n private:\n  void composeKey(const std::string& type_name, const float& grid_size, const float& tile_size,\n                  std::string* key);\n\n  void analyseKey(const std::string& key, std::string* type_name, float* grid_size,\n                  float* tile_size);\n\n  std::unordered_map<int, std::string> id_to_key_;\n  std::unordered_map<std::string, int> key_to_id_;\n};\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/map_layer_dictionary_parser.h"
		}
	}
]
I0403 16:27:30.742571 11080 json_parser.cpp:18] 
[
	11,
	{
		"bufnr" : 8,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/map_layer_dictionary_parser.h",
		"flags" : 
		[
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-Dndt_cpu_EXPORTS",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-Dndt_tku_EXPORTS",
			"-I/opt/ros/kinetic/include",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dlocalization_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-I/usr/include/pcl-1.7",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-I/usr/include/eigen3",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/vtk-6.2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-Dgnss_EXPORTS",
			"-Dv2_mapping_EXPORTS",
			"-DQT_GUI_LIB",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-DDISABLE_PNG",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-I/usr/include/tcl",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-DUSE_PCL_OPENMP",
			"-Dloc_geometry_EXPORTS",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-DDISABLE_PCAP",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-I/usr/include/freetype2",
			"-DQT_NO_DEBUG",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/x86_64-linux-gnu",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/usr/local/include",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-Dsensor_fusion_EXPORTS",
			"-Dinertial_nav_EXPORTS",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/usr/include/libxml2",
			"-Dloc_io_EXPORTS",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-I/usr/include/openni2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DQT_CORE_LIB",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-I/usr/include/python2.7",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All rights reserved.\n// Authors: Yongjian Zhao (yongjian.zhao@allride.ai)\n\n#pragma once\n\n#include <string>\n#include <unordered_map>\n\n#include \"common/proto/config/config_map.pb.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass MapLayerDictionaryParser {\n public:\n  MapLayerDictionaryParser() = default;\n  ~MapLayerDictionaryParser() = default;\n\n  // interface for using dictionary\n  bool load(const std::string& dict_file);\n\n  bool getInfoById(const int layer_id, std::string* type_name, float* grid_size, float* tile_size);\n\n  float getGridSize(const int layer_id);\n\n  float getTileSize(const int layer_id);\n\n  std::string getTypeName(const int layer_id);\n\n  bool getIdByInfo(const std::string& type_name, const float& grid_size, const float& tile_size,\n                   int* layer_id);\n\n  // interface for making dictionary,\n  bool addItem(const int layer_id, const std::string& type_name, const float grid_size,\n               const float tile_size);\n\n  bool save(const std::string& dict_file);\n\n private:\n  void composeKey(const std::string& type_name, const float& grid_size, const float& tile_size,\n                  std::string* key);\n\n  void analyseKey(const std::string& key, std::string* type_name, float* grid_size,\n                  float* tile_size);\n\n  std::unordered_map<int, std::string> id_to_key_;\n  std::unordered_map<std::string, int> key_to_id_;\n};\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/map_layer_dictionary_parser.h"
		}
	}
]
I0403 16:27:37.733783 11080 json_parser.cpp:18] 
[
	12,
	{
		"bufnr" : 8,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/map_layer_dictionary_parser.h",
		"flags" : 
		[
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-Dndt_cpu_EXPORTS",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-Dndt_tku_EXPORTS",
			"-I/opt/ros/kinetic/include",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dlocalization_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-I/usr/include/pcl-1.7",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-I/usr/include/eigen3",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/vtk-6.2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-Dgnss_EXPORTS",
			"-Dv2_mapping_EXPORTS",
			"-DQT_GUI_LIB",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-DDISABLE_PNG",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-I/usr/include/tcl",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-DUSE_PCL_OPENMP",
			"-Dloc_geometry_EXPORTS",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-DDISABLE_PCAP",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-I/usr/include/freetype2",
			"-DQT_NO_DEBUG",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/x86_64-linux-gnu",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/usr/local/include",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-Dsensor_fusion_EXPORTS",
			"-Dinertial_nav_EXPORTS",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/usr/include/libxml2",
			"-Dloc_io_EXPORTS",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-I/usr/include/openni2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DQT_CORE_LIB",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-I/usr/include/python2.7",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All rights reserved.\n// Authors: Yongjian Zhao (yongjian.zhao@allride.ai)\n\n#pragma once\n\n#include <string>\n#include <unordered_map>\n\n#include \"common/proto/config/config_map.pb.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass MapLayerDictionaryParser {\n public:\n  MapLayerDictionaryParser() = default;\n  ~MapLayerDictionaryParser() = default;\n\n  // interface for using dictionary\n  bool load(const std::string& dict_file);\n\n  bool getInfoById(const int layer_id, std::string* type_name, float* grid_size, float* tile_size);\n\n  float getGridSize(const int layer_id);\n\n  float getTileSize(const int layer_id);\n\n  std::string getTypeName(const int layer_id);\n\n  bool getIdByInfo(const std::string& type_name, const float& grid_size, const float& tile_size,\n                   int* layer_id);\n\n  // interface for making dictionary,\n  bool addItem(const int layer_id, const std::string& type_name, const float grid_size,\n               const float tile_size);\n\n  bool save(const std::string& dict_file);\n\n private:\n  void composeKey(const std::string& type_name, const float& grid_size, const float& tile_size,\n                  std::string* key);\n\n  void analyseKey(const std::string& key, std::string* type_name, float* grid_size,\n                  float* tile_size);\n\n  std::unordered_map<int, std::string> id_to_key_;\n  std::unordered_map<std::string, int> key_to_id_;\n};\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/map_layer_dictionary_parser.h"
		}
	}
]
I0403 16:27:37.783820 11080 json_parser.cpp:18] 
[
	13,
	{
		"bufnr" : 9,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/map_scope.cpp",
		"flags" : 
		[
			"/usr/bin/c++",
			"-x",
			"c++",
			"-DDISABLE_PCAP",
			"-DDISABLE_PNG",
			"-DQT_CORE_LIB",
			"-DQT_GUI_LIB",
			"-DQT_NO_DEBUG",
			"-DQT_WIDGETS_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\"localization\"",
			"-Dv2_mapping_EXPORTS",
			"-DvtkFiltersFlowPaths_AUTOINIT=1(vtkFiltersParallelFlowPaths)",
			"-DvtkIOExodus_AUTOINIT=1(vtkIOParallelExodus)",
			"-DvtkIOGeometry_AUTOINIT=1(vtkIOMPIParallel)",
			"-DvtkIOImage_AUTOINIT=1(vtkIOMPIImage)",
			"-DvtkIOSQL_AUTOINIT=2(vtkIOMySQL,vtkIOPostgreSQL)",
			"-DvtkRenderingContext2D_AUTOINIT=1(vtkRenderingContextOpenGL)",
			"-DvtkRenderingCore_AUTOINIT=4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)",
			"-DvtkRenderingFreeType_AUTOINIT=2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)",
			"-DvtkRenderingLIC_AUTOINIT=1(vtkRenderingParallelLIC)",
			"-DvtkRenderingVolume_AUTOINIT=1(vtkRenderingVolumeOpenGL)",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/include/vtk-6.2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/lib/openmpi/include",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/usr/include/python2.7",
			"-I/usr/include/freetype2",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/hdf5/openmpi",
			"-I/usr/include/libxml2",
			"-I/usr/include/tcl",
			"-I/usr/include/pcl-1.7",
			"-I/usr/include/eigen3",
			"-I/usr/include/ni",
			"-I/usr/include/openni2",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/devel/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-std=c++14",
			"-march=native",
			"-pipe",
			"-O2",
			"-Wall",
			"-Wextra",
			"-fopenmp",
			"-fPIC",
			"-pthread",
			"-fPIC",
			"-fPIC",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#include \"map_scope.h\"\n\nnamespace allride {\nnamespace mapping {\n\nMapScope::MapScope() { corner_min.setZero(); }\n\nMapScope::MapScope(Eigen::Vector3f center, float range) {\n  corner_min = center - range / 2.0 * Eigen::Vector3f().setOnes();\n  corner_max = center + range / 2.0 * Eigen::Vector3f().setOnes();\n}\n\nMapScope::MapScope(Eigen::Vector3f corner0, Eigen::Vector3f corner1) {\n  float x_min = std::min(corner0.x(), corner1.x());\n  float y_min = std::min(corner0.y(), corner1.y());\n  float z_min = std::min(corner0.z(), corner1.z());\n\n  float x_max = std::max(corner0.x(), corner1.x());\n  float y_max = std::max(corner0.y(), corner1.y());\n  float z_max = std::max(corner0.z(), corner1.z());\n\n  corner_min = Eigen::Vector3f(x_min, y_min, z_min);\n  corner_max = Eigen::Vector3f(x_max, y_max, z_max);\n}\n\nconst Eigen::Vector3f& MapScope::getCornerMin() const { return corner_min; }\n\nconst Eigen::Vector3f& MapScope::getCornerMax() const { return corner_max; }\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/map_scope.cpp"
		}
	}
]
I0403 16:27:40.462615 11080 json_parser.cpp:18] 
[
	14,
	{
		"bufnr" : 9,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/map_scope.cpp",
		"flags" : 
		[
			"/usr/bin/c++",
			"-x",
			"c++",
			"-DDISABLE_PCAP",
			"-DDISABLE_PNG",
			"-DQT_CORE_LIB",
			"-DQT_GUI_LIB",
			"-DQT_NO_DEBUG",
			"-DQT_WIDGETS_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\"localization\"",
			"-Dv2_mapping_EXPORTS",
			"-DvtkFiltersFlowPaths_AUTOINIT=1(vtkFiltersParallelFlowPaths)",
			"-DvtkIOExodus_AUTOINIT=1(vtkIOParallelExodus)",
			"-DvtkIOGeometry_AUTOINIT=1(vtkIOMPIParallel)",
			"-DvtkIOImage_AUTOINIT=1(vtkIOMPIImage)",
			"-DvtkIOSQL_AUTOINIT=2(vtkIOMySQL,vtkIOPostgreSQL)",
			"-DvtkRenderingContext2D_AUTOINIT=1(vtkRenderingContextOpenGL)",
			"-DvtkRenderingCore_AUTOINIT=4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)",
			"-DvtkRenderingFreeType_AUTOINIT=2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)",
			"-DvtkRenderingLIC_AUTOINIT=1(vtkRenderingParallelLIC)",
			"-DvtkRenderingVolume_AUTOINIT=1(vtkRenderingVolumeOpenGL)",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/include/vtk-6.2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/lib/openmpi/include",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/usr/include/python2.7",
			"-I/usr/include/freetype2",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/hdf5/openmpi",
			"-I/usr/include/libxml2",
			"-I/usr/include/tcl",
			"-I/usr/include/pcl-1.7",
			"-I/usr/include/eigen3",
			"-I/usr/include/ni",
			"-I/usr/include/openni2",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/devel/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-std=c++14",
			"-march=native",
			"-pipe",
			"-O2",
			"-Wall",
			"-Wextra",
			"-fopenmp",
			"-fPIC",
			"-pthread",
			"-fPIC",
			"-fPIC",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#include \"map_scope.h\"\n\nnamespace allride {\nnamespace mapping {\n\nMapScope::MapScope() { corner_min.setZero(); }\n\nMapScope::MapScope(Eigen::Vector3f center, float range) {\n  corner_min = center - range / 2.0 * Eigen::Vector3f().setOnes();\n  corner_max = center + range / 2.0 * Eigen::Vector3f().setOnes();\n}\n\nMapScope::MapScope(Eigen::Vector3f corner0, Eigen::Vector3f corner1) {\n  float x_min = std::min(corner0.x(), corner1.x());\n  float y_min = std::min(corner0.y(), corner1.y());\n  float z_min = std::min(corner0.z(), corner1.z());\n\n  float x_max = std::max(corner0.x(), corner1.x());\n  float y_max = std::max(corner0.y(), corner1.y());\n  float z_max = std::max(corner0.z(), corner1.z());\n\n  corner_min = Eigen::Vector3f(x_min, y_min, z_min);\n  corner_max = Eigen::Vector3f(x_max, y_max, z_max);\n}\n\nconst Eigen::Vector3f& MapScope::getCornerMin() const { return corner_min; }\n\nconst Eigen::Vector3f& MapScope::getCornerMax() const { return corner_max; }\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/map_scope.cpp"
		}
	}
]
I0403 16:27:40.583052 11080 json_parser.cpp:18] 
[
	15,
	{
		"bufnr" : 10,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/map_scope.h",
		"flags" : 
		[
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-Dndt_cpu_EXPORTS",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-Dndt_tku_EXPORTS",
			"-I/opt/ros/kinetic/include",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dlocalization_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-I/usr/include/pcl-1.7",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-I/usr/include/eigen3",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/vtk-6.2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-Dgnss_EXPORTS",
			"-Dv2_mapping_EXPORTS",
			"-DQT_GUI_LIB",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-DDISABLE_PNG",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-I/usr/include/tcl",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-DUSE_PCL_OPENMP",
			"-Dloc_geometry_EXPORTS",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-DDISABLE_PCAP",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-I/usr/include/freetype2",
			"-DQT_NO_DEBUG",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/x86_64-linux-gnu",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/usr/local/include",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-Dsensor_fusion_EXPORTS",
			"-Dinertial_nav_EXPORTS",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/usr/include/libxml2",
			"-Dloc_io_EXPORTS",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-I/usr/include/openni2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DQT_CORE_LIB",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-I/usr/include/python2.7",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include \"common/math/eigen_types.h\"\n\nnamespace allride {\nnamespace mapping {\n\n/// @brief specify a three dimension region\nclass MapScope {\n public:\n  MapScope();\n  MapScope(Eigen::Vector3f center, float range);\n  MapScope(Eigen::Vector3f corner0, Eigen::Vector3f corner1);\n\n  const Eigen::Vector3f& getCornerMin() const;\n  const Eigen::Vector3f& getCornerMax() const;\n\n protected:\n  Eigen::Vector3f corner_min;\n  Eigen::Vector3f corner_max;\n};\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/map_scope.h"
		}
	}
]
I0403 16:27:43.229581 11080 json_parser.cpp:18] 
[
	16,
	{
		"bufnr" : 10,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/map_scope.h",
		"flags" : 
		[
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-Dndt_cpu_EXPORTS",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-Dndt_tku_EXPORTS",
			"-I/opt/ros/kinetic/include",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dlocalization_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-I/usr/include/pcl-1.7",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-I/usr/include/eigen3",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/vtk-6.2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-Dgnss_EXPORTS",
			"-Dv2_mapping_EXPORTS",
			"-DQT_GUI_LIB",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-DDISABLE_PNG",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-I/usr/include/tcl",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-DUSE_PCL_OPENMP",
			"-Dloc_geometry_EXPORTS",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-DDISABLE_PCAP",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-I/usr/include/freetype2",
			"-DQT_NO_DEBUG",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/x86_64-linux-gnu",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/usr/local/include",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-Dsensor_fusion_EXPORTS",
			"-Dinertial_nav_EXPORTS",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/usr/include/libxml2",
			"-Dloc_io_EXPORTS",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-I/usr/include/openni2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DQT_CORE_LIB",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-I/usr/include/python2.7",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include \"common/math/eigen_types.h\"\n\nnamespace allride {\nnamespace mapping {\n\n/// @brief specify a three dimension region\nclass MapScope {\n public:\n  MapScope();\n  MapScope(Eigen::Vector3f center, float range);\n  MapScope(Eigen::Vector3f corner0, Eigen::Vector3f corner1);\n\n  const Eigen::Vector3f& getCornerMin() const;\n  const Eigen::Vector3f& getCornerMax() const;\n\n protected:\n  Eigen::Vector3f corner_min;\n  Eigen::Vector3f corner_max;\n};\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/map_scope.h"
		}
	}
]
I0403 16:27:43.344544 11080 json_parser.cpp:18] 
[
	17,
	{
		"bufnr" : 11,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/ndt_map_builder.cpp",
		"flags" : 
		[
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-Dndt_cpu_EXPORTS",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-Dndt_tku_EXPORTS",
			"-I/opt/ros/kinetic/include",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dlocalization_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-I/usr/include/pcl-1.7",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-I/usr/include/eigen3",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/vtk-6.2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-Dgnss_EXPORTS",
			"-Dv2_mapping_EXPORTS",
			"-DQT_GUI_LIB",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-DDISABLE_PNG",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-I/usr/include/tcl",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-DUSE_PCL_OPENMP",
			"-Dloc_geometry_EXPORTS",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-DDISABLE_PCAP",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-I/usr/include/freetype2",
			"-DQT_NO_DEBUG",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/x86_64-linux-gnu",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/usr/local/include",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-Dsensor_fusion_EXPORTS",
			"-Dinertial_nav_EXPORTS",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/usr/include/libxml2",
			"-Dloc_io_EXPORTS",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-I/usr/include/openni2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DQT_CORE_LIB",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-I/usr/include/python2.7",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All rights reserved.\n// Authors: Yongjian Zhao (yongjian.zhao@allride.ai)\n\n#include <vector>\n\n#include <rosbag/bag.h>\n#include <rosbag/message_instance.h>\n#include <rosbag/view.h>\n#include <boost/filesystem.hpp>\n\n#include \"common/geometry/eigen_types.h\"\n#include \"common/geometry/se3.h\"\n#include \"ndt_map_builder.h\"\n\nbool NdtMapBuilder::initialize(const MappingParameter& param) {\n  param_ = param;\n\n  // check existence of rosbag file\n  boost::filesystem::path pcd_bag_path(param_.pcd_rosbag);\n  if (!pcd_bag_path.exists() || !pcd_bag_path.is_regular_file() ||\n      pcd_bag_path.extension() != \".bag\") {\n    std::cout << \"missing pcd_rosbag_file: \" << param_.pcd_rosbag << std::endl;\n    return false;\n  }\n  boost::filesystem::path pose_bag_path(param_.pose_rosbag);\n  if (!pose_bag_path.exists() || !pose_bag_path.is_regular_file() ||\n      pose_bag_path.extension() != \".bag\") {\n    std::cout << \"missing pose_rosbag_file: \" << param_.pose_rosbag << std::endl;\n    return false;\n  }\n\n  // load lidar pose\n  if (!loadLidarPose(param_.pose_rosbag, param_.pose_topic)) {\n    std::cout << \"failed to load lidar pose with topic: \" << param_.pose_topic << std::endl;\n    return false;\n  }\n\n  if (!param_.existing_ndt_map.empty() && !loadNdtMap()) {\n    std::cout << \"failed to load offline ndt map: \" << param_.existing_ndt_map << std::endl;\n    return false;\n  }\n\n  return true;\n}\n\nvoid NdtMapBuilder::buildNdtMap(const std::string& output_folder) {\n  rosbag::Bag bag;\n  bag.open(param_.pcd_rosbag);\n  std::vector<std::string> topics(1, param_.pcd_rosbag);\n  rosbag::View view(bag, rosbag::TopicQuery(topics));\n  for (const rosbag::MessageInstance& m : view) {\n    // get pcd from message\n    std::unique_ptr<PointCloudXYZIRT> pcd;\n\n    // point cloud preprocess\n    pcdPreProcess(param_.type, pcd.get());\n\n    // add pcd to map\n  }\n\n  // ndt map postprocess\n  ndtPosetProcess(param_.type);\n\n  // save map to database\n  saveNdtMap(output_folder);\n}\n\nvoid NdtMapBuilder::pcdPreProcess(const MapType& type, PointCloudXYZIRT* pcd) {\n  switch (type) {\n    case COMMON_NDT:\n\n      break;\n\n    case FEATURE_NDT:\n\n      break;\n\n    case INTENSITY:\n\n      break;\n  }\n}\n\nvoid NdtMapBuilder::ndtPostProcess(const MapType& type) {\n  switch (type) {\n    case COMMON_NDT:\n\n      break;\n\n    case FEATURE_NDT:\n\n      break;\n\n    case INTENSITY:\n\n      break;\n  }\n}\n\nbool NdtMapBuilder::loadLidarPose(const std::string& rosbag_name, const std::string& pose_topic) {\n  rosbag::Bag bag;\n  bag.open(rosbag_name);\n  std::vector<std::string> topics(1, pose_topic);\n  rosbag::View view(bag, rosbag::TopicQuery(topics));\n  for (const rosbag::MessageInstance& m : view) {\n    // get pose from message\n    Time stamp = 0;\n    common::geometry::SE3 pose;\n\n    lidar_poses_[stamp] = pose;\n  }\n\n  bag.close();\n\n  return !lidar_poses_.empty();\n}\n\nbool NdtMapBuilder::loadNdtMap(const std::string& existing_map) { return true; }\n\nbool NdtMapBuilder::saveNdtMap(const std::string& output_folder) { return true; }\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/ndt_map_builder.cpp"
		}
	}
]
I0403 16:28:02.645906 11080 json_parser.cpp:18] 
[
	18,
	{
		"bufnr" : 11,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/ndt_map_builder.cpp",
		"flags" : 
		[
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-Dndt_cpu_EXPORTS",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-Dndt_tku_EXPORTS",
			"-I/opt/ros/kinetic/include",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dlocalization_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-I/usr/include/pcl-1.7",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-I/usr/include/eigen3",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/vtk-6.2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-Dgnss_EXPORTS",
			"-Dv2_mapping_EXPORTS",
			"-DQT_GUI_LIB",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-DDISABLE_PNG",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-I/usr/include/tcl",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-DUSE_PCL_OPENMP",
			"-Dloc_geometry_EXPORTS",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-DDISABLE_PCAP",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-I/usr/include/freetype2",
			"-DQT_NO_DEBUG",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/x86_64-linux-gnu",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/usr/local/include",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-Dsensor_fusion_EXPORTS",
			"-Dinertial_nav_EXPORTS",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/usr/include/libxml2",
			"-Dloc_io_EXPORTS",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-I/usr/include/openni2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DQT_CORE_LIB",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-I/usr/include/python2.7",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All rights reserved.\n// Authors: Yongjian Zhao (yongjian.zhao@allride.ai)\n\n#include <vector>\n\n#include <rosbag/bag.h>\n#include <rosbag/message_instance.h>\n#include <rosbag/view.h>\n#include <boost/filesystem.hpp>\n\n#include \"common/geometry/eigen_types.h\"\n#include \"common/geometry/se3.h\"\n#include \"ndt_map_builder.h\"\n\nbool NdtMapBuilder::initialize(const MappingParameter& param) {\n  param_ = param;\n\n  // check existence of rosbag file\n  boost::filesystem::path pcd_bag_path(param_.pcd_rosbag);\n  if (!pcd_bag_path.exists() || !pcd_bag_path.is_regular_file() ||\n      pcd_bag_path.extension() != \".bag\") {\n    std::cout << \"missing pcd_rosbag_file: \" << param_.pcd_rosbag << std::endl;\n    return false;\n  }\n  boost::filesystem::path pose_bag_path(param_.pose_rosbag);\n  if (!pose_bag_path.exists() || !pose_bag_path.is_regular_file() ||\n      pose_bag_path.extension() != \".bag\") {\n    std::cout << \"missing pose_rosbag_file: \" << param_.pose_rosbag << std::endl;\n    return false;\n  }\n\n  // load lidar pose\n  if (!loadLidarPose(param_.pose_rosbag, param_.pose_topic)) {\n    std::cout << \"failed to load lidar pose with topic: \" << param_.pose_topic << std::endl;\n    return false;\n  }\n\n  if (!param_.existing_ndt_map.empty() && !loadNdtMap()) {\n    std::cout << \"failed to load offline ndt map: \" << param_.existing_ndt_map << std::endl;\n    return false;\n  }\n\n  return true;\n}\n\nvoid NdtMapBuilder::buildNdtMap(const std::string& output_folder) {\n  rosbag::Bag bag;\n  bag.open(param_.pcd_rosbag);\n  std::vector<std::string> topics(1, param_.pcd_rosbag);\n  rosbag::View view(bag, rosbag::TopicQuery(topics));\n  for (const rosbag::MessageInstance& m : view) {\n    // get pcd from message\n    std::unique_ptr<PointCloudXYZIRT> pcd;\n\n    // point cloud preprocess\n    pcdPreProcess(param_.type, pcd.get());\n\n    // add pcd to map\n  }\n\n  // ndt map postprocess\n  ndtPosetProcess(param_.type);\n\n  // save map to database\n  saveNdtMap(output_folder);\n}\n\nvoid NdtMapBuilder::pcdPreProcess(const MapType& type, PointCloudXYZIRT* pcd) {\n  switch (type) {\n    case COMMON_NDT:\n\n      break;\n\n    case FEATURE_NDT:\n\n      break;\n\n    case INTENSITY:\n\n      break;\n  }\n}\n\nvoid NdtMapBuilder::ndtPostProcess(const MapType& type) {\n  switch (type) {\n    case COMMON_NDT:\n\n      break;\n\n    case FEATURE_NDT:\n\n      break;\n\n    case INTENSITY:\n\n      break;\n  }\n}\n\nbool NdtMapBuilder::loadLidarPose(const std::string& rosbag_name, const std::string& pose_topic) {\n  rosbag::Bag bag;\n  bag.open(rosbag_name);\n  std::vector<std::string> topics(1, pose_topic);\n  rosbag::View view(bag, rosbag::TopicQuery(topics));\n  for (const rosbag::MessageInstance& m : view) {\n    // get pose from message\n    Time stamp = 0;\n    common::geometry::SE3 pose;\n\n    lidar_poses_[stamp] = pose;\n  }\n\n  bag.close();\n\n  return !lidar_poses_.empty();\n}\n\nbool NdtMapBuilder::loadNdtMap(const std::string& existing_map) { return true; }\n\nbool NdtMapBuilder::saveNdtMap(const std::string& output_folder) { return true; }\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/ndt_map_builder.cpp"
		}
	}
]
I0403 16:28:02.782021 11080 json_parser.cpp:18] 
[
	19,
	{
		"bufnr" : 12,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_cache.cpp",
		"flags" : 
		[
			"/usr/bin/c++",
			"-x",
			"c++",
			"-DDISABLE_PCAP",
			"-DDISABLE_PNG",
			"-DQT_CORE_LIB",
			"-DQT_GUI_LIB",
			"-DQT_NO_DEBUG",
			"-DQT_WIDGETS_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\"localization\"",
			"-Dv2_mapping_EXPORTS",
			"-DvtkFiltersFlowPaths_AUTOINIT=1(vtkFiltersParallelFlowPaths)",
			"-DvtkIOExodus_AUTOINIT=1(vtkIOParallelExodus)",
			"-DvtkIOGeometry_AUTOINIT=1(vtkIOMPIParallel)",
			"-DvtkIOImage_AUTOINIT=1(vtkIOMPIImage)",
			"-DvtkIOSQL_AUTOINIT=2(vtkIOMySQL,vtkIOPostgreSQL)",
			"-DvtkRenderingContext2D_AUTOINIT=1(vtkRenderingContextOpenGL)",
			"-DvtkRenderingCore_AUTOINIT=4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)",
			"-DvtkRenderingFreeType_AUTOINIT=2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)",
			"-DvtkRenderingLIC_AUTOINIT=1(vtkRenderingParallelLIC)",
			"-DvtkRenderingVolume_AUTOINIT=1(vtkRenderingVolumeOpenGL)",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/include/vtk-6.2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/lib/openmpi/include",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/usr/include/python2.7",
			"-I/usr/include/freetype2",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/hdf5/openmpi",
			"-I/usr/include/libxml2",
			"-I/usr/include/tcl",
			"-I/usr/include/pcl-1.7",
			"-I/usr/include/eigen3",
			"-I/usr/include/ni",
			"-I/usr/include/openni2",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/devel/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-std=c++14",
			"-march=native",
			"-pipe",
			"-O2",
			"-Wall",
			"-Wextra",
			"-fopenmp",
			"-fPIC",
			"-pthread",
			"-fPIC",
			"-fPIC",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#include \"tile_cache.h\"\n#include <future>\n\nnamespace allride {\nnamespace mapping {\n\nTileCache::TileCache(size_t range, size_t water_mark, std::shared_ptr<TileClient> tile_client) {\n  range_ = range;\n  water_mark_ = water_mark;\n  tile_client_ = tile_client;\n}\n\nbool TileCache::load(Tiler::TileID center) {\n  if (!loading_lock_.try_lock()) {\n    return false;  // other loading task is on-going\n  }\n\n  std::future<bool> async_res =\n      std::async(std::launch::async, &TileCache::cacheLoadTask, this, TileScope(center, range_));\n\n  return async_res.get();\n}\n\nbool TileCache::getTiles(const TileScope& scope, bool blocking,\n                         std::shared_ptr<TileStorageHash>* tiles) {\n  TileScope current_scope;\n  cache_lock_.lock();\n  current_scope = current_scope_;\n  cache_lock_.unlock();\n\n  bool prefetch = false;\n  bool miss = false;\n  if (!current_scope.contain(scope, water_mark_)) {\n    prefetch = true;\n    if (!current_scope.contain(scope)) {\n      miss = true;\n    }\n  }\n\n  // emit a async loading task\n  std::future<bool> async_res;\n  if (prefetch) {\n    if (loading_lock_.try_lock()) {\n      async_res = std::async(std::launch::async, &TileCache::cacheLoadTask, this,\n                             TileScope(scope.getCenterTileID(), range_));\n      // if miss happens and blocking is set, we should wait for loading complete\n      if (miss && blocking) {\n        async_res.wait();\n      }\n    }\n  }\n\n  *tiles = std::shared_ptr<TileStorageHash>(new TileStorageHash());\n\n  cache_lock_.lock();\n  for (const auto& tile_id : *(scope.getTilesIDs())) {\n    auto it = tile_pool_.find(tile_id);\n    if (tile_pool_.end() != it) {\n      (*(*tiles))[tile_id] = it->second;\n    }\n  }\n  cache_lock_.unlock();\n\n  return miss && !blocking;\n}\n\nbool TileCache::cacheLoadTask(const TileScope& scope) {\n  std::unordered_set<Tiler::TileID> tiles_required;\n  for (const auto& tile_id : *(scope.getTilesIDs())) {\n    tiles_required.insert(tile_id);\n  }\n\n  std::vector<Tiler::TileID> tiles_to_del;\n  std::vector<Tiler::TileID> tiles_to_load;\n\n  for (const auto& pair : tile_pool_) {\n    if (tiles_required.find(pair.first) == tiles_required.end()) {\n      tiles_to_del.emplace_back(pair.first);\n    }\n  }\n\n  for (const auto& tile_id : tiles_required) {\n    if (tile_pool_.find(tile_id) == tile_pool_.end()) {\n      tiles_to_load.emplace_back(tile_id);\n    }\n  }\n\n  std::map<Tiler::TileID, std::shared_ptr<TileDataStorage>> tiles_loaded;\n  for (const auto& tile_id : tiles_to_load) {\n    std::shared_ptr<TileDataStorage> tile;\n    if (tile_client_->get(tile_id, &tile)) {\n      tiles_loaded[tile_id] = tile;\n    }\n  }\n\n  cache_lock_.lock();\n  for (const auto& tile_id : tiles_to_del) {\n    tile_pool_.erase(tile_id);\n  }\n  for (const auto& pair : tiles_loaded) {\n    tile_pool_.insert(pair);\n  }\n  cache_lock_.unlock();\n\n  loading_lock_.unlock();\n  return true;\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_cache.cpp"
		}
	}
]
I0403 16:28:14.130280 11080 json_parser.cpp:18] 
[
	20,
	{
		"bufnr" : 12,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_cache.cpp",
		"flags" : 
		[
			"/usr/bin/c++",
			"-x",
			"c++",
			"-DDISABLE_PCAP",
			"-DDISABLE_PNG",
			"-DQT_CORE_LIB",
			"-DQT_GUI_LIB",
			"-DQT_NO_DEBUG",
			"-DQT_WIDGETS_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\"localization\"",
			"-Dv2_mapping_EXPORTS",
			"-DvtkFiltersFlowPaths_AUTOINIT=1(vtkFiltersParallelFlowPaths)",
			"-DvtkIOExodus_AUTOINIT=1(vtkIOParallelExodus)",
			"-DvtkIOGeometry_AUTOINIT=1(vtkIOMPIParallel)",
			"-DvtkIOImage_AUTOINIT=1(vtkIOMPIImage)",
			"-DvtkIOSQL_AUTOINIT=2(vtkIOMySQL,vtkIOPostgreSQL)",
			"-DvtkRenderingContext2D_AUTOINIT=1(vtkRenderingContextOpenGL)",
			"-DvtkRenderingCore_AUTOINIT=4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)",
			"-DvtkRenderingFreeType_AUTOINIT=2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)",
			"-DvtkRenderingLIC_AUTOINIT=1(vtkRenderingParallelLIC)",
			"-DvtkRenderingVolume_AUTOINIT=1(vtkRenderingVolumeOpenGL)",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/include/vtk-6.2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/lib/openmpi/include",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/usr/include/python2.7",
			"-I/usr/include/freetype2",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/hdf5/openmpi",
			"-I/usr/include/libxml2",
			"-I/usr/include/tcl",
			"-I/usr/include/pcl-1.7",
			"-I/usr/include/eigen3",
			"-I/usr/include/ni",
			"-I/usr/include/openni2",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/devel/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-std=c++14",
			"-march=native",
			"-pipe",
			"-O2",
			"-Wall",
			"-Wextra",
			"-fopenmp",
			"-fPIC",
			"-pthread",
			"-fPIC",
			"-fPIC",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#include \"tile_cache.h\"\n#include <future>\n\nnamespace allride {\nnamespace mapping {\n\nTileCache::TileCache(size_t range, size_t water_mark, std::shared_ptr<TileClient> tile_client) {\n  range_ = range;\n  water_mark_ = water_mark;\n  tile_client_ = tile_client;\n}\n\nbool TileCache::load(Tiler::TileID center) {\n  if (!loading_lock_.try_lock()) {\n    return false;  // other loading task is on-going\n  }\n\n  std::future<bool> async_res =\n      std::async(std::launch::async, &TileCache::cacheLoadTask, this, TileScope(center, range_));\n\n  return async_res.get();\n}\n\nbool TileCache::getTiles(const TileScope& scope, bool blocking,\n                         std::shared_ptr<TileStorageHash>* tiles) {\n  TileScope current_scope;\n  cache_lock_.lock();\n  current_scope = current_scope_;\n  cache_lock_.unlock();\n\n  bool prefetch = false;\n  bool miss = false;\n  if (!current_scope.contain(scope, water_mark_)) {\n    prefetch = true;\n    if (!current_scope.contain(scope)) {\n      miss = true;\n    }\n  }\n\n  // emit a async loading task\n  std::future<bool> async_res;\n  if (prefetch) {\n    if (loading_lock_.try_lock()) {\n      async_res = std::async(std::launch::async, &TileCache::cacheLoadTask, this,\n                             TileScope(scope.getCenterTileID(), range_));\n      // if miss happens and blocking is set, we should wait for loading complete\n      if (miss && blocking) {\n        async_res.wait();\n      }\n    }\n  }\n\n  *tiles = std::shared_ptr<TileStorageHash>(new TileStorageHash());\n\n  cache_lock_.lock();\n  for (const auto& tile_id : *(scope.getTilesIDs())) {\n    auto it = tile_pool_.find(tile_id);\n    if (tile_pool_.end() != it) {\n      (*(*tiles))[tile_id] = it->second;\n    }\n  }\n  cache_lock_.unlock();\n\n  return miss && !blocking;\n}\n\nbool TileCache::cacheLoadTask(const TileScope& scope) {\n  std::unordered_set<Tiler::TileID> tiles_required;\n  for (const auto& tile_id : *(scope.getTilesIDs())) {\n    tiles_required.insert(tile_id);\n  }\n\n  std::vector<Tiler::TileID> tiles_to_del;\n  std::vector<Tiler::TileID> tiles_to_load;\n\n  for (const auto& pair : tile_pool_) {\n    if (tiles_required.find(pair.first) == tiles_required.end()) {\n      tiles_to_del.emplace_back(pair.first);\n    }\n  }\n\n  for (const auto& tile_id : tiles_required) {\n    if (tile_pool_.find(tile_id) == tile_pool_.end()) {\n      tiles_to_load.emplace_back(tile_id);\n    }\n  }\n\n  std::map<Tiler::TileID, std::shared_ptr<TileDataStorage>> tiles_loaded;\n  for (const auto& tile_id : tiles_to_load) {\n    std::shared_ptr<TileDataStorage> tile;\n    if (tile_client_->get(tile_id, &tile)) {\n      tiles_loaded[tile_id] = tile;\n    }\n  }\n\n  cache_lock_.lock();\n  for (const auto& tile_id : tiles_to_del) {\n    tile_pool_.erase(tile_id);\n  }\n  for (const auto& pair : tiles_loaded) {\n    tile_pool_.insert(pair);\n  }\n  cache_lock_.unlock();\n\n  loading_lock_.unlock();\n  return true;\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_cache.cpp"
		}
	}
]
I0403 16:28:14.217512 11080 json_parser.cpp:18] 
[
	21,
	{
		"bufnr" : 13,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_cache.h",
		"flags" : 
		[
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-Dndt_cpu_EXPORTS",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-Dndt_tku_EXPORTS",
			"-I/opt/ros/kinetic/include",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dlocalization_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-I/usr/include/pcl-1.7",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-I/usr/include/eigen3",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/vtk-6.2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-Dgnss_EXPORTS",
			"-Dv2_mapping_EXPORTS",
			"-DQT_GUI_LIB",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-DDISABLE_PNG",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-I/usr/include/tcl",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-DUSE_PCL_OPENMP",
			"-Dloc_geometry_EXPORTS",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-DDISABLE_PCAP",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-I/usr/include/freetype2",
			"-DQT_NO_DEBUG",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/x86_64-linux-gnu",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/usr/local/include",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-Dsensor_fusion_EXPORTS",
			"-Dinertial_nav_EXPORTS",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/usr/include/libxml2",
			"-Dloc_io_EXPORTS",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-I/usr/include/openni2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DQT_CORE_LIB",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-I/usr/include/python2.7",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include \"local_database.h\"\n#include \"ndt3interface.h\"\n#include \"ndt3tile.h\"\n#include \"tile_client.h\"\n#include \"tile_scope.h\"\n#include \"tiler.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass TileCache {\n public:\n  typedef std::unordered_map<Tiler::TileID, std::shared_ptr<TileDataStorage>> TileStorageHash;\n\n  TileCache(size_t range, size_t water_mark, std::shared_ptr<TileClient> tile_client);\n\n  bool load(Tiler::TileID center);\n\n  bool getTiles(const TileScope& scope, bool blocking, std::shared_ptr<TileStorageHash>* tiles);\n\n private:\n  bool cacheLoadTask(const TileScope& scope);\n\n  std::shared_ptr<TileClient> tile_client_;\n  TileStorageHash tile_pool_;\n  TileScope current_scope_;\n  size_t range_;\n  size_t water_mark_;\n  std::mutex loading_lock_;\n  std::mutex cache_lock_;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_cache.h"
		}
	}
]
I0403 16:28:19.796397 11080 json_parser.cpp:18] 
[
	22,
	{
		"bufnr" : 13,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_cache.h",
		"flags" : 
		[
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-Dndt_cpu_EXPORTS",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-Dndt_tku_EXPORTS",
			"-I/opt/ros/kinetic/include",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dlocalization_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-I/usr/include/pcl-1.7",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-I/usr/include/eigen3",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/vtk-6.2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-Dgnss_EXPORTS",
			"-Dv2_mapping_EXPORTS",
			"-DQT_GUI_LIB",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-DDISABLE_PNG",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-I/usr/include/tcl",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-DUSE_PCL_OPENMP",
			"-Dloc_geometry_EXPORTS",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-DDISABLE_PCAP",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-I/usr/include/freetype2",
			"-DQT_NO_DEBUG",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/x86_64-linux-gnu",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/usr/local/include",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-Dsensor_fusion_EXPORTS",
			"-Dinertial_nav_EXPORTS",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/usr/include/libxml2",
			"-Dloc_io_EXPORTS",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-I/usr/include/openni2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DQT_CORE_LIB",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-I/usr/include/python2.7",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include \"local_database.h\"\n#include \"ndt3interface.h\"\n#include \"ndt3tile.h\"\n#include \"tile_client.h\"\n#include \"tile_scope.h\"\n#include \"tiler.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass TileCache {\n public:\n  typedef std::unordered_map<Tiler::TileID, std::shared_ptr<TileDataStorage>> TileStorageHash;\n\n  TileCache(size_t range, size_t water_mark, std::shared_ptr<TileClient> tile_client);\n\n  bool load(Tiler::TileID center);\n\n  bool getTiles(const TileScope& scope, bool blocking, std::shared_ptr<TileStorageHash>* tiles);\n\n private:\n  bool cacheLoadTask(const TileScope& scope);\n\n  std::shared_ptr<TileClient> tile_client_;\n  TileStorageHash tile_pool_;\n  TileScope current_scope_;\n  size_t range_;\n  size_t water_mark_;\n  std::mutex loading_lock_;\n  std::mutex cache_lock_;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_cache.h"
		}
	}
]
I0403 16:28:19.855460 11080 json_parser.cpp:18] 
[
	23,
	{
		"bufnr" : 14,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_client.cpp",
		"flags" : 
		[
			"/usr/bin/c++",
			"-x",
			"c++",
			"-DDISABLE_PCAP",
			"-DDISABLE_PNG",
			"-DQT_CORE_LIB",
			"-DQT_GUI_LIB",
			"-DQT_NO_DEBUG",
			"-DQT_WIDGETS_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\"localization\"",
			"-Dv2_mapping_EXPORTS",
			"-DvtkFiltersFlowPaths_AUTOINIT=1(vtkFiltersParallelFlowPaths)",
			"-DvtkIOExodus_AUTOINIT=1(vtkIOParallelExodus)",
			"-DvtkIOGeometry_AUTOINIT=1(vtkIOMPIParallel)",
			"-DvtkIOImage_AUTOINIT=1(vtkIOMPIImage)",
			"-DvtkIOSQL_AUTOINIT=2(vtkIOMySQL,vtkIOPostgreSQL)",
			"-DvtkRenderingContext2D_AUTOINIT=1(vtkRenderingContextOpenGL)",
			"-DvtkRenderingCore_AUTOINIT=4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)",
			"-DvtkRenderingFreeType_AUTOINIT=2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)",
			"-DvtkRenderingLIC_AUTOINIT=1(vtkRenderingParallelLIC)",
			"-DvtkRenderingVolume_AUTOINIT=1(vtkRenderingVolumeOpenGL)",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/include/vtk-6.2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/lib/openmpi/include",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/usr/include/python2.7",
			"-I/usr/include/freetype2",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/hdf5/openmpi",
			"-I/usr/include/libxml2",
			"-I/usr/include/tcl",
			"-I/usr/include/pcl-1.7",
			"-I/usr/include/eigen3",
			"-I/usr/include/ni",
			"-I/usr/include/openni2",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/devel/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-std=c++14",
			"-march=native",
			"-pipe",
			"-O2",
			"-Wall",
			"-Wextra",
			"-fopenmp",
			"-fPIC",
			"-pthread",
			"-fPIC",
			"-fPIC",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#include \"tile_client.h\"\n\nnamespace allride {\nnamespace mapping {\n\nTileClient::TileClient(int layer_id, std::shared_ptr<LocalDatabase> database) {\n  layer_id_ = layer_id;\n  database_ = database;\n}\n\nbool TileClient::get(Tiler::TileID tile_id, std::shared_ptr<TileDataStorage>* tile) {\n  if (!tile || !database_) {\n    return false;\n  }\n\n  std::string data;\n  if (!database_->get(getKey(tile_id), &data)) {\n    return false;\n  }\n\n  *tile = std::shared_ptr<TileDataStorage>(new TileDataStorage);\n\n  return (*tile)->unpackFromString(data);\n}\n\nbool TileClient::put(Tiler::TileID tile_id,\n                     const std::shared_ptr<const TileDataStorage>& tile) const {\n  if (!database_) {\n    return false;\n  }\n\n  std::string data;\n  tile->packToString(&data);\n  return database_->put(getKey(tile_id), data);\n}\n\nbool TileClient::exist(Tiler::TileID tile_id) const {\n  if (!database_) {\n    return false;\n  }\n\n  return database_->exist(getKey(tile_id));\n}\n\nstd::string TileClient::getKey(Tiler::TileID) const { return \"keytest\"; }\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_client.cpp"
		}
	}
]
I0403 16:28:22.382777 11080 json_parser.cpp:18] 
[
	24,
	{
		"bufnr" : 14,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_client.cpp",
		"flags" : 
		[
			"/usr/bin/c++",
			"-x",
			"c++",
			"-DDISABLE_PCAP",
			"-DDISABLE_PNG",
			"-DQT_CORE_LIB",
			"-DQT_GUI_LIB",
			"-DQT_NO_DEBUG",
			"-DQT_WIDGETS_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\"localization\"",
			"-Dv2_mapping_EXPORTS",
			"-DvtkFiltersFlowPaths_AUTOINIT=1(vtkFiltersParallelFlowPaths)",
			"-DvtkIOExodus_AUTOINIT=1(vtkIOParallelExodus)",
			"-DvtkIOGeometry_AUTOINIT=1(vtkIOMPIParallel)",
			"-DvtkIOImage_AUTOINIT=1(vtkIOMPIImage)",
			"-DvtkIOSQL_AUTOINIT=2(vtkIOMySQL,vtkIOPostgreSQL)",
			"-DvtkRenderingContext2D_AUTOINIT=1(vtkRenderingContextOpenGL)",
			"-DvtkRenderingCore_AUTOINIT=4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)",
			"-DvtkRenderingFreeType_AUTOINIT=2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)",
			"-DvtkRenderingLIC_AUTOINIT=1(vtkRenderingParallelLIC)",
			"-DvtkRenderingVolume_AUTOINIT=1(vtkRenderingVolumeOpenGL)",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/include/vtk-6.2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/lib/openmpi/include",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/usr/include/python2.7",
			"-I/usr/include/freetype2",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/hdf5/openmpi",
			"-I/usr/include/libxml2",
			"-I/usr/include/tcl",
			"-I/usr/include/pcl-1.7",
			"-I/usr/include/eigen3",
			"-I/usr/include/ni",
			"-I/usr/include/openni2",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/devel/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-std=c++14",
			"-march=native",
			"-pipe",
			"-O2",
			"-Wall",
			"-Wextra",
			"-fopenmp",
			"-fPIC",
			"-pthread",
			"-fPIC",
			"-fPIC",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#include \"tile_client.h\"\n\nnamespace allride {\nnamespace mapping {\n\nTileClient::TileClient(int layer_id, std::shared_ptr<LocalDatabase> database) {\n  layer_id_ = layer_id;\n  database_ = database;\n}\n\nbool TileClient::get(Tiler::TileID tile_id, std::shared_ptr<TileDataStorage>* tile) {\n  if (!tile || !database_) {\n    return false;\n  }\n\n  std::string data;\n  if (!database_->get(getKey(tile_id), &data)) {\n    return false;\n  }\n\n  *tile = std::shared_ptr<TileDataStorage>(new TileDataStorage);\n\n  return (*tile)->unpackFromString(data);\n}\n\nbool TileClient::put(Tiler::TileID tile_id,\n                     const std::shared_ptr<const TileDataStorage>& tile) const {\n  if (!database_) {\n    return false;\n  }\n\n  std::string data;\n  tile->packToString(&data);\n  return database_->put(getKey(tile_id), data);\n}\n\nbool TileClient::exist(Tiler::TileID tile_id) const {\n  if (!database_) {\n    return false;\n  }\n\n  return database_->exist(getKey(tile_id));\n}\n\nstd::string TileClient::getKey(Tiler::TileID) const { return \"keytest\"; }\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_client.cpp"
		}
	}
]
I0403 16:28:22.424845 11080 json_parser.cpp:18] 
[
	25,
	{
		"bufnr" : 13,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_cache.h",
		"flags" : 
		[
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-Dndt_cpu_EXPORTS",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-Dndt_tku_EXPORTS",
			"-I/opt/ros/kinetic/include",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dlocalization_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-I/usr/include/pcl-1.7",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-I/usr/include/eigen3",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/vtk-6.2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-Dgnss_EXPORTS",
			"-Dv2_mapping_EXPORTS",
			"-DQT_GUI_LIB",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-DDISABLE_PNG",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-I/usr/include/tcl",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-DUSE_PCL_OPENMP",
			"-Dloc_geometry_EXPORTS",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-DDISABLE_PCAP",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-I/usr/include/freetype2",
			"-DQT_NO_DEBUG",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/x86_64-linux-gnu",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/usr/local/include",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-Dsensor_fusion_EXPORTS",
			"-Dinertial_nav_EXPORTS",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/usr/include/libxml2",
			"-Dloc_io_EXPORTS",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-I/usr/include/openni2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DQT_CORE_LIB",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-I/usr/include/python2.7",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include \"local_database.h\"\n#include \"ndt3interface.h\"\n#include \"ndt3tile.h\"\n#include \"tile_client.h\"\n#include \"tile_scope.h\"\n#include \"tiler.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass TileCache {\n public:\n  typedef std::unordered_map<Tiler::TileID, std::shared_ptr<TileDataStorage>> TileStorageHash;\n\n  TileCache(size_t range, size_t water_mark, std::shared_ptr<TileClient> tile_client);\n\n  bool load(Tiler::TileID center);\n\n  bool getTiles(const TileScope& scope, bool blocking, std::shared_ptr<TileStorageHash>* tiles);\n\n private:\n  bool cacheLoadTask(const TileScope& scope);\n\n  std::shared_ptr<TileClient> tile_client_;\n  TileStorageHash tile_pool_;\n  TileScope current_scope_;\n  size_t range_;\n  size_t water_mark_;\n  std::mutex loading_lock_;\n  std::mutex cache_lock_;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_cache.h"
		}
	}
]
I0403 16:28:24.060796 11080 json_parser.cpp:18] 
[
	26,
	{
		"bufnr" : 13,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_cache.h",
		"flags" : 
		[
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-Dndt_cpu_EXPORTS",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-Dndt_tku_EXPORTS",
			"-I/opt/ros/kinetic/include",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dlocalization_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-I/usr/include/pcl-1.7",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-I/usr/include/eigen3",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/vtk-6.2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-Dgnss_EXPORTS",
			"-Dv2_mapping_EXPORTS",
			"-DQT_GUI_LIB",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-DDISABLE_PNG",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-I/usr/include/tcl",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-DUSE_PCL_OPENMP",
			"-Dloc_geometry_EXPORTS",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-DDISABLE_PCAP",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-I/usr/include/freetype2",
			"-DQT_NO_DEBUG",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/x86_64-linux-gnu",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/usr/local/include",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-Dsensor_fusion_EXPORTS",
			"-Dinertial_nav_EXPORTS",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/usr/include/libxml2",
			"-Dloc_io_EXPORTS",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-I/usr/include/openni2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DQT_CORE_LIB",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-I/usr/include/python2.7",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include \"local_database.h\"\n#include \"ndt3interface.h\"\n#include \"ndt3tile.h\"\n#include \"tile_client.h\"\n#include \"tile_scope.h\"\n#include \"tiler.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass TileCache {\n public:\n  typedef std::unordered_map<Tiler::TileID, std::shared_ptr<TileDataStorage>> TileStorageHash;\n\n  TileCache(size_t range, size_t water_mark, std::shared_ptr<TileClient> tile_client);\n\n  bool load(Tiler::TileID center);\n\n  bool getTiles(const TileScope& scope, bool blocking, std::shared_ptr<TileStorageHash>* tiles);\n\n private:\n  bool cacheLoadTask(const TileScope& scope);\n\n  std::shared_ptr<TileClient> tile_client_;\n  TileStorageHash tile_pool_;\n  TileScope current_scope_;\n  size_t range_;\n  size_t water_mark_;\n  std::mutex loading_lock_;\n  std::mutex cache_lock_;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_cache.h"
		}
	}
]
I0403 16:28:24.119385 11080 json_parser.cpp:18] 
[
	27,
	{
		"bufnr" : 14,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_client.cpp",
		"flags" : 
		[
			"/usr/bin/c++",
			"-x",
			"c++",
			"-DDISABLE_PCAP",
			"-DDISABLE_PNG",
			"-DQT_CORE_LIB",
			"-DQT_GUI_LIB",
			"-DQT_NO_DEBUG",
			"-DQT_WIDGETS_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\"localization\"",
			"-Dv2_mapping_EXPORTS",
			"-DvtkFiltersFlowPaths_AUTOINIT=1(vtkFiltersParallelFlowPaths)",
			"-DvtkIOExodus_AUTOINIT=1(vtkIOParallelExodus)",
			"-DvtkIOGeometry_AUTOINIT=1(vtkIOMPIParallel)",
			"-DvtkIOImage_AUTOINIT=1(vtkIOMPIImage)",
			"-DvtkIOSQL_AUTOINIT=2(vtkIOMySQL,vtkIOPostgreSQL)",
			"-DvtkRenderingContext2D_AUTOINIT=1(vtkRenderingContextOpenGL)",
			"-DvtkRenderingCore_AUTOINIT=4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)",
			"-DvtkRenderingFreeType_AUTOINIT=2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)",
			"-DvtkRenderingLIC_AUTOINIT=1(vtkRenderingParallelLIC)",
			"-DvtkRenderingVolume_AUTOINIT=1(vtkRenderingVolumeOpenGL)",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/include/vtk-6.2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/lib/openmpi/include",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/usr/include/python2.7",
			"-I/usr/include/freetype2",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/hdf5/openmpi",
			"-I/usr/include/libxml2",
			"-I/usr/include/tcl",
			"-I/usr/include/pcl-1.7",
			"-I/usr/include/eigen3",
			"-I/usr/include/ni",
			"-I/usr/include/openni2",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/devel/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-std=c++14",
			"-march=native",
			"-pipe",
			"-O2",
			"-Wall",
			"-Wextra",
			"-fopenmp",
			"-fPIC",
			"-pthread",
			"-fPIC",
			"-fPIC",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#include \"tile_client.h\"\n\nnamespace allride {\nnamespace mapping {\n\nTileClient::TileClient(int layer_id, std::shared_ptr<LocalDatabase> database) {\n  layer_id_ = layer_id;\n  database_ = database;\n}\n\nbool TileClient::get(Tiler::TileID tile_id, std::shared_ptr<TileDataStorage>* tile) {\n  if (!tile || !database_) {\n    return false;\n  }\n\n  std::string data;\n  if (!database_->get(getKey(tile_id), &data)) {\n    return false;\n  }\n\n  *tile = std::shared_ptr<TileDataStorage>(new TileDataStorage);\n\n  return (*tile)->unpackFromString(data);\n}\n\nbool TileClient::put(Tiler::TileID tile_id,\n                     const std::shared_ptr<const TileDataStorage>& tile) const {\n  if (!database_) {\n    return false;\n  }\n\n  std::string data;\n  tile->packToString(&data);\n  return database_->put(getKey(tile_id), data);\n}\n\nbool TileClient::exist(Tiler::TileID tile_id) const {\n  if (!database_) {\n    return false;\n  }\n\n  return database_->exist(getKey(tile_id));\n}\n\nstd::string TileClient::getKey(Tiler::TileID) const { return \"keytest\"; }\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_client.cpp"
		}
	}
]
I0403 16:28:26.912904 11080 json_parser.cpp:18] 
[
	28,
	{
		"bufnr" : 14,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_client.cpp",
		"flags" : 
		[
			"/usr/bin/c++",
			"-x",
			"c++",
			"-DDISABLE_PCAP",
			"-DDISABLE_PNG",
			"-DQT_CORE_LIB",
			"-DQT_GUI_LIB",
			"-DQT_NO_DEBUG",
			"-DQT_WIDGETS_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\"localization\"",
			"-Dv2_mapping_EXPORTS",
			"-DvtkFiltersFlowPaths_AUTOINIT=1(vtkFiltersParallelFlowPaths)",
			"-DvtkIOExodus_AUTOINIT=1(vtkIOParallelExodus)",
			"-DvtkIOGeometry_AUTOINIT=1(vtkIOMPIParallel)",
			"-DvtkIOImage_AUTOINIT=1(vtkIOMPIImage)",
			"-DvtkIOSQL_AUTOINIT=2(vtkIOMySQL,vtkIOPostgreSQL)",
			"-DvtkRenderingContext2D_AUTOINIT=1(vtkRenderingContextOpenGL)",
			"-DvtkRenderingCore_AUTOINIT=4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)",
			"-DvtkRenderingFreeType_AUTOINIT=2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)",
			"-DvtkRenderingLIC_AUTOINIT=1(vtkRenderingParallelLIC)",
			"-DvtkRenderingVolume_AUTOINIT=1(vtkRenderingVolumeOpenGL)",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/include/vtk-6.2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/lib/openmpi/include",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/usr/include/python2.7",
			"-I/usr/include/freetype2",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/hdf5/openmpi",
			"-I/usr/include/libxml2",
			"-I/usr/include/tcl",
			"-I/usr/include/pcl-1.7",
			"-I/usr/include/eigen3",
			"-I/usr/include/ni",
			"-I/usr/include/openni2",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/devel/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-std=c++14",
			"-march=native",
			"-pipe",
			"-O2",
			"-Wall",
			"-Wextra",
			"-fopenmp",
			"-fPIC",
			"-pthread",
			"-fPIC",
			"-fPIC",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#include \"tile_client.h\"\n\nnamespace allride {\nnamespace mapping {\n\nTileClient::TileClient(int layer_id, std::shared_ptr<LocalDatabase> database) {\n  layer_id_ = layer_id;\n  database_ = database;\n}\n\nbool TileClient::get(Tiler::TileID tile_id, std::shared_ptr<TileDataStorage>* tile) {\n  if (!tile || !database_) {\n    return false;\n  }\n\n  std::string data;\n  if (!database_->get(getKey(tile_id), &data)) {\n    return false;\n  }\n\n  *tile = std::shared_ptr<TileDataStorage>(new TileDataStorage);\n\n  return (*tile)->unpackFromString(data);\n}\n\nbool TileClient::put(Tiler::TileID tile_id,\n                     const std::shared_ptr<const TileDataStorage>& tile) const {\n  if (!database_) {\n    return false;\n  }\n\n  std::string data;\n  tile->packToString(&data);\n  return database_->put(getKey(tile_id), data);\n}\n\nbool TileClient::exist(Tiler::TileID tile_id) const {\n  if (!database_) {\n    return false;\n  }\n\n  return database_->exist(getKey(tile_id));\n}\n\nstd::string TileClient::getKey(Tiler::TileID) const { return \"keytest\"; }\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_client.cpp"
		}
	}
]
I0403 16:28:27.040199 11080 json_parser.cpp:18] 
[
	29,
	{
		"bufnr" : 15,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_client.h",
		"flags" : 
		[
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-Dndt_cpu_EXPORTS",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-Dndt_tku_EXPORTS",
			"-I/opt/ros/kinetic/include",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dlocalization_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-I/usr/include/pcl-1.7",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-I/usr/include/eigen3",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/vtk-6.2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-Dgnss_EXPORTS",
			"-Dv2_mapping_EXPORTS",
			"-DQT_GUI_LIB",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-DDISABLE_PNG",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-I/usr/include/tcl",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-DUSE_PCL_OPENMP",
			"-Dloc_geometry_EXPORTS",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-DDISABLE_PCAP",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-I/usr/include/freetype2",
			"-DQT_NO_DEBUG",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/x86_64-linux-gnu",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/usr/local/include",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-Dsensor_fusion_EXPORTS",
			"-Dinertial_nav_EXPORTS",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/usr/include/libxml2",
			"-Dloc_io_EXPORTS",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-I/usr/include/openni2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DQT_CORE_LIB",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-I/usr/include/python2.7",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include \"local_database.h\"\n#include \"tile_data_storage.h\"\n#include \"tiler.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass TileClient {\n public:\n  /// @brief construct a tile client with layer name and database\n  /// @param[in] layer_id spccify the layer that this tile client manages\n  /// @param[in] database is a reference to a database shared by many layers\n  TileClient(int layer_id, std::shared_ptr<LocalDatabase> database);\n\n  /// @brief get the tile data specific by tile id;\n  /// @param[in] tile_id specifies which tile to get\n  /// @param[out] tile stores the tile data got\n  /// @return true on succeed, else false\n  bool get(Tiler::TileID tile_id, std::shared_ptr<TileDataStorage>* tile);\n\n  /// @brief put the specific tile data into database;\n  /// @param[in] tile_id specifies the tile id of the tile to put\n  /// @param[in] tile stores the tile data to put\n  /// @return true on succeed, else false\n  bool put(Tiler::TileID tile_id, const std::shared_ptr<const TileDataStorage>& tile) const;\n\n  /// @brief check if a tile exist in database\n  /// @param[in] the tile id to check\n  /// @return true on exist, else false\n  bool exist(Tiler::TileID tile_id) const;\n\n private:\n  std::string getKey(Tiler::TileID) const;\n\n  int layer_id_;\n  std::shared_ptr<LocalDatabase> database_;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_client.h"
		}
	}
]
I0403 16:28:30.432778 11080 json_parser.cpp:18] 
[
	30,
	{
		"bufnr" : 15,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_client.h",
		"flags" : 
		[
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-Dndt_cpu_EXPORTS",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-Dndt_tku_EXPORTS",
			"-I/opt/ros/kinetic/include",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dlocalization_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-I/usr/include/pcl-1.7",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-I/usr/include/eigen3",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/vtk-6.2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-Dgnss_EXPORTS",
			"-Dv2_mapping_EXPORTS",
			"-DQT_GUI_LIB",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-DDISABLE_PNG",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-I/usr/include/tcl",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-DUSE_PCL_OPENMP",
			"-Dloc_geometry_EXPORTS",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-DDISABLE_PCAP",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-I/usr/include/freetype2",
			"-DQT_NO_DEBUG",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/x86_64-linux-gnu",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/usr/local/include",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-Dsensor_fusion_EXPORTS",
			"-Dinertial_nav_EXPORTS",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/usr/include/libxml2",
			"-Dloc_io_EXPORTS",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-I/usr/include/openni2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DQT_CORE_LIB",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-I/usr/include/python2.7",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include \"local_database.h\"\n#include \"tile_data_storage.h\"\n#include \"tiler.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass TileClient {\n public:\n  /// @brief construct a tile client with layer name and database\n  /// @param[in] layer_id spccify the layer that this tile client manages\n  /// @param[in] database is a reference to a database shared by many layers\n  TileClient(int layer_id, std::shared_ptr<LocalDatabase> database);\n\n  /// @brief get the tile data specific by tile id;\n  /// @param[in] tile_id specifies which tile to get\n  /// @param[out] tile stores the tile data got\n  /// @return true on succeed, else false\n  bool get(Tiler::TileID tile_id, std::shared_ptr<TileDataStorage>* tile);\n\n  /// @brief put the specific tile data into database;\n  /// @param[in] tile_id specifies the tile id of the tile to put\n  /// @param[in] tile stores the tile data to put\n  /// @return true on succeed, else false\n  bool put(Tiler::TileID tile_id, const std::shared_ptr<const TileDataStorage>& tile) const;\n\n  /// @brief check if a tile exist in database\n  /// @param[in] the tile id to check\n  /// @return true on exist, else false\n  bool exist(Tiler::TileID tile_id) const;\n\n private:\n  std::string getKey(Tiler::TileID) const;\n\n  int layer_id_;\n  std::shared_ptr<LocalDatabase> database_;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_client.h"
		}
	}
]
I0403 16:28:30.551072 11080 json_parser.cpp:18] 
[
	31,
	{
		"bufnr" : 16,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tiler.cpp",
		"flags" : 
		[
			"/usr/bin/c++",
			"-x",
			"c++",
			"-DDISABLE_PCAP",
			"-DDISABLE_PNG",
			"-DQT_CORE_LIB",
			"-DQT_GUI_LIB",
			"-DQT_NO_DEBUG",
			"-DQT_WIDGETS_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\"localization\"",
			"-Dv2_mapping_EXPORTS",
			"-DvtkFiltersFlowPaths_AUTOINIT=1(vtkFiltersParallelFlowPaths)",
			"-DvtkIOExodus_AUTOINIT=1(vtkIOParallelExodus)",
			"-DvtkIOGeometry_AUTOINIT=1(vtkIOMPIParallel)",
			"-DvtkIOImage_AUTOINIT=1(vtkIOMPIImage)",
			"-DvtkIOSQL_AUTOINIT=2(vtkIOMySQL,vtkIOPostgreSQL)",
			"-DvtkRenderingContext2D_AUTOINIT=1(vtkRenderingContextOpenGL)",
			"-DvtkRenderingCore_AUTOINIT=4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)",
			"-DvtkRenderingFreeType_AUTOINIT=2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)",
			"-DvtkRenderingLIC_AUTOINIT=1(vtkRenderingParallelLIC)",
			"-DvtkRenderingVolume_AUTOINIT=1(vtkRenderingVolumeOpenGL)",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/include/vtk-6.2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/lib/openmpi/include",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/usr/include/python2.7",
			"-I/usr/include/freetype2",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/hdf5/openmpi",
			"-I/usr/include/libxml2",
			"-I/usr/include/tcl",
			"-I/usr/include/pcl-1.7",
			"-I/usr/include/eigen3",
			"-I/usr/include/ni",
			"-I/usr/include/openni2",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/devel/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-std=c++14",
			"-march=native",
			"-pipe",
			"-O2",
			"-Wall",
			"-Wextra",
			"-fopenmp",
			"-fPIC",
			"-pthread",
			"-fPIC",
			"-fPIC",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#include \"tiler.h\"\n\nnamespace allride {\nnamespace mapping {\n\nint Tiler::getTileIDX(Tiler::TileID tile_id) {\n  TileIDHelper helper;\n  helper.data = tile_id;\n  return helper.fields.id_x;\n}\n\nint Tiler::getTileIDY(Tiler::TileID tile_id) {\n  TileIDHelper helper;\n  helper.data = tile_id;\n  return helper.fields.id_y;\n}\n\nint Tiler::getTileIDZ(Tiler::TileID tile_id) {\n  TileIDHelper helper;\n  helper.data = tile_id;\n  return helper.fields.id_z;\n}\n\nTiler::TileID Tiler::getTileID(int id_x, int id_y, int id_z) {\n  TileIDHelper helper;\n  helper.fields.id_x = id_x;\n  helper.fields.id_y = id_y;\n  helper.fields.id_z = id_z;\n  helper.fields.pad = 0;\n  return helper.data;\n}\n\nTiler::TileID Tiler::getTileID(const Eigen::Vector3f& pos) const {\n  int id_x = floor((pos.x() + 0.5 * tile_size_) / tile_size_);\n  int id_y = floor((pos.y() + 0.5 * tile_size_) / tile_size_);\n  int id_z = floor((pos.z() + 0.5 * tile_size_) / tile_size_);\n  return getTileID(id_x, id_y, id_z);\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tiler.cpp"
		}
	}
]
I0403 16:28:35.240635 11080 json_parser.cpp:18] 
[
	32,
	{
		"bufnr" : 16,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tiler.cpp",
		"flags" : 
		[
			"/usr/bin/c++",
			"-x",
			"c++",
			"-DDISABLE_PCAP",
			"-DDISABLE_PNG",
			"-DQT_CORE_LIB",
			"-DQT_GUI_LIB",
			"-DQT_NO_DEBUG",
			"-DQT_WIDGETS_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\"localization\"",
			"-Dv2_mapping_EXPORTS",
			"-DvtkFiltersFlowPaths_AUTOINIT=1(vtkFiltersParallelFlowPaths)",
			"-DvtkIOExodus_AUTOINIT=1(vtkIOParallelExodus)",
			"-DvtkIOGeometry_AUTOINIT=1(vtkIOMPIParallel)",
			"-DvtkIOImage_AUTOINIT=1(vtkIOMPIImage)",
			"-DvtkIOSQL_AUTOINIT=2(vtkIOMySQL,vtkIOPostgreSQL)",
			"-DvtkRenderingContext2D_AUTOINIT=1(vtkRenderingContextOpenGL)",
			"-DvtkRenderingCore_AUTOINIT=4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)",
			"-DvtkRenderingFreeType_AUTOINIT=2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)",
			"-DvtkRenderingLIC_AUTOINIT=1(vtkRenderingParallelLIC)",
			"-DvtkRenderingVolume_AUTOINIT=1(vtkRenderingVolumeOpenGL)",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/include/vtk-6.2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/lib/openmpi/include",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/usr/include/python2.7",
			"-I/usr/include/freetype2",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/hdf5/openmpi",
			"-I/usr/include/libxml2",
			"-I/usr/include/tcl",
			"-I/usr/include/pcl-1.7",
			"-I/usr/include/eigen3",
			"-I/usr/include/ni",
			"-I/usr/include/openni2",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/devel/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-std=c++14",
			"-march=native",
			"-pipe",
			"-O2",
			"-Wall",
			"-Wextra",
			"-fopenmp",
			"-fPIC",
			"-pthread",
			"-fPIC",
			"-fPIC",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#include \"tiler.h\"\n\nnamespace allride {\nnamespace mapping {\n\nint Tiler::getTileIDX(Tiler::TileID tile_id) {\n  TileIDHelper helper;\n  helper.data = tile_id;\n  return helper.fields.id_x;\n}\n\nint Tiler::getTileIDY(Tiler::TileID tile_id) {\n  TileIDHelper helper;\n  helper.data = tile_id;\n  return helper.fields.id_y;\n}\n\nint Tiler::getTileIDZ(Tiler::TileID tile_id) {\n  TileIDHelper helper;\n  helper.data = tile_id;\n  return helper.fields.id_z;\n}\n\nTiler::TileID Tiler::getTileID(int id_x, int id_y, int id_z) {\n  TileIDHelper helper;\n  helper.fields.id_x = id_x;\n  helper.fields.id_y = id_y;\n  helper.fields.id_z = id_z;\n  helper.fields.pad = 0;\n  return helper.data;\n}\n\nTiler::TileID Tiler::getTileID(const Eigen::Vector3f& pos) const {\n  int id_x = floor((pos.x() + 0.5 * tile_size_) / tile_size_);\n  int id_y = floor((pos.y() + 0.5 * tile_size_) / tile_size_);\n  int id_z = floor((pos.z() + 0.5 * tile_size_) / tile_size_);\n  return getTileID(id_x, id_y, id_z);\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tiler.cpp"
		}
	}
]
I0403 16:28:35.364413 11080 json_parser.cpp:18] 
[
	33,
	{
		"bufnr" : 17,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_data_storage.h",
		"flags" : 
		[
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-Dndt_cpu_EXPORTS",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-Dndt_tku_EXPORTS",
			"-I/opt/ros/kinetic/include",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dlocalization_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-I/usr/include/pcl-1.7",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-I/usr/include/eigen3",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/include/vtk-6.2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-Dgnss_EXPORTS",
			"-Dv2_mapping_EXPORTS",
			"-DQT_GUI_LIB",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-DDISABLE_PNG",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-I/usr/include/tcl",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-DUSE_PCL_OPENMP",
			"-Dloc_geometry_EXPORTS",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-DDISABLE_PCAP",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/ni",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-I/usr/include/freetype2",
			"-DQT_NO_DEBUG",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/x86_64-linux-gnu",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/usr/local/include",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-Dsensor_fusion_EXPORTS",
			"-Dinertial_nav_EXPORTS",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/usr/include/libxml2",
			"-Dloc_io_EXPORTS",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-I/usr/include/openni2",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DQT_CORE_LIB",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-I/usr/include/python2.7",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include <Eigen/Core>\n#include <iostream