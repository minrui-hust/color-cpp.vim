Log file created at: 2019/04/03 12:59:00
Running on machine: mr-pc
Log line format: [IWEF]mmdd hh:mm:ss.uuuuuu threadid file:line] msg
I0403 12:59:00.226748 29929 json_parser.cpp:18] 
[
	1,
	{
		"bufnr" : 1,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#include <fstream>\n\n#include \"common/proto/config/config_map.pb.h\"\n#include \"lidar_map.h\"\n\nnamespace allride {\nnamespace mapping {\n\nMapLayerDictionaryParser LidarMap::map_layer_dict_;\nstd::string LidarMap::database_path_;\nint LidarMap::cache_range_;\nint LidarMap::cache_margin_;\n\nbool LidarMap::configure(const std::string& config_file) {\n  std::ifstream map_config_ifs(config_file);\n  proto::config::ConfigMap map_config;\n  if (!map_config.ParseFromIstream(&map_config_ifs)) {\n    return false;\n  }\n\n  if (!map_layer_dict_.load(map_config.maplayer_dict_path())) {\n    return false;\n  }\n\n  database_path_ = map_config.database_path();\n\n  cache_range_ = map_config.cache_range();\n\n  cache_margin_ = map_config.cache_margin();\n\n  return true;\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map.cpp"
		}
	}
]
I0403 12:59:11.271970 29929 json_parser.cpp:18] 
[
	2,
	{
		"bufnr" : 1,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#include <fstream>\n\n#include \"common/proto/config/config_map.pb.h\"\n#include \"lidar_map.h\"\n\nnamespace allride {\nnamespace mapping {\n\nMapLayerDictionaryParser LidarMap::map_layer_dict_;\nstd::string LidarMap::database_path_;\nint LidarMap::cache_range_;\nint LidarMap::cache_margin_;\n\nbool LidarMap::configure(const std::string& config_file) {\n  std::ifstream map_config_ifs(config_file);\n  proto::config::ConfigMap map_config;\n  if (!map_config.ParseFromIstream(&map_config_ifs)) {\n    return false;\n  }\n\n  if (!map_layer_dict_.load(map_config.maplayer_dict_path())) {\n    return false;\n  }\n\n  database_path_ = map_config.database_path();\n\n  cache_range_ = map_config.cache_range();\n\n  cache_margin_ = map_config.cache_margin();\n\n  return true;\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map.cpp"
		}
	}
]
I0403 12:59:11.330735 29929 json_parser.cpp:18] 
[
	3,
	{
		"bufnr" : 3,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include \"common/math/point_types.h\"\n#include \"map_layer_dictionary_parser.h\"\n#include \"ndt3interface.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass LidarMap {\n public:\n  /// @brief configure the LidarMap class, mainly LayerID to resolution map, database path,\n  /// which are shared by all LidarMap and its decents\n  ///\n  /// @param config_file[in] the path to config file\n  ///\n  /// @return true on succeed, else false\n  ///\n  /// @note this should be called first before any operation about LidarMap\n  static bool configure(const std::string& config_file);\n\n  /// @brief initialize a layer before using it\n  ///\n  /// @param layer_id[in] specify which layer to initialize\n  ///\n  /// @return true on succeed, else false\n  virtual bool initializeLayer(int layer_id) = 0;\n\n  /// @brief add point to LidarMap on specific layer\n  ///\n  /// @param layer_id[in] specify which layer to add point cloud\n  /// @param pointcloud[in] the cloud point to add\n  ///\n  /// @return true on succeed, else false\n  virtual bool addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) = 0;\n\n protected:\n  static MapLayerDictionaryParser map_layer_dict_;\n  static std::string database_path_;\n  static int cache_range_;\n  static int cache_margin_;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map.h"
		}
	}
]
I0403 12:59:15.874137 29929 json_parser.cpp:18] 
[
	4,
	{
		"bufnr" : 3,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include \"common/math/point_types.h\"\n#include \"map_layer_dictionary_parser.h\"\n#include \"ndt3interface.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass LidarMap {\n public:\n  /// @brief configure the LidarMap class, mainly LayerID to resolution map, database path,\n  /// which are shared by all LidarMap and its decents\n  ///\n  /// @param config_file[in] the path to config file\n  ///\n  /// @return true on succeed, else false\n  ///\n  /// @note this should be called first before any operation about LidarMap\n  static bool configure(const std::string& config_file);\n\n  /// @brief initialize a layer before using it\n  ///\n  /// @param layer_id[in] specify which layer to initialize\n  ///\n  /// @return true on succeed, else false\n  virtual bool initializeLayer(int layer_id) = 0;\n\n  /// @brief add point to LidarMap on specific layer\n  ///\n  /// @param layer_id[in] specify which layer to add point cloud\n  /// @param pointcloud[in] the cloud point to add\n  ///\n  /// @return true on succeed, else false\n  virtual bool addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) = 0;\n\n protected:\n  static MapLayerDictionaryParser map_layer_dict_;\n  static std::string database_path_;\n  static int cache_range_;\n  static int cache_margin_;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map.h"
		}
	}
]
I0403 12:59:15.989526 29929 json_parser.cpp:18] 
[
	5,
	{
		"bufnr" : 4,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n\n#include \"lidar_map_offline.h\"\n#include \"lmdb_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nstd::shared_ptr<LocalDatabase> LidarMapOffline::database_ = nullptr;\nLocalDatabase::MODE LidarMapOffline::database_operation_mode_;\nproto::map::MapInfo LidarMapOffline::map_info_;\n\nbool LidarMapOffline::configure(LocalDatabase::MODE mode) {\n  database_ = std::shared_ptr<LmdbDatabase>(new LmdbDatabase);\n  database_operation_mode_ = mode;\n\n  if (!database_->open(database_path_, database_operation_mode_)) {\n    return false;\n  }\n\n  std::string map_info_data;\n  if (database_->get(\"MapInfo\", &map_info_data)) {\n    return false;\n  }\n\n  if (!map_info_.ParseFromString(map_info_data)) {\n    return false;\n  }\n\n  return true;\n}\n\nbool LidarMapOffline::initializeLayer(int layer_id) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-initialize\n  }\n\n  // find the layer infomation in database\n  int layer_info_index = -1;\n  for (int i = 0; i < map_info_.layer_infos_size(); ++i) {\n    if (layer_id == map_info_.layer_infos(i).layer_id()) {\n      layer_info_index = i;\n      break;\n    }\n  }\n  if (-1 == layer_info_index) {\n    return false;  // the specific layer_id do not exist in database\n  }\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(map_info_.layer_infos(layer_info_index), database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::initializeLayer(const std::string& type_name, float grid_size,\n                                     float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  if (!initializeLayer(layer_id)) {\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::load(const Eigen::Vector3f& pos) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->load(pos);\n  }\n\n  return ret;\n}\n\nbool LidarMapOffline::addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->addPointCloud(pointcloud);\n\n  return false;\n}\n\nbool LidarMapOffline::getMap(int layer_id, const MapScope& scope, bool blocking,\n                             std::shared_ptr<Ndt3Interface>* ndt3) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->getMap(scope, blocking, ndt3);\n\n  return false;\n}\n\nbool LidarMapOffline::addLayer(const proto::config::MapLayerItem& layer_item) {\n  // initializeLayer is only used in wrtie and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  int layer_id = layer_item.layer_id();\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-add\n  }\n\n  // construct a layer_info\n  proto::map::MapLayerInfo layer_info;\n  layer_info.set_layer_id(layer_item.layer_id());\n  layer_info.set_grid_size(layer_item.grid_size());\n  layer_info.set_tile_size(layer_item.tile_size());\n  layer_info.set_type_name(layer_item.type_name());\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(layer_info, database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::addLayer(const std::string& type_name, float grid_size, float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  proto::config::MapLayerItem item;\n  item.set_layer_id(layer_id);\n  item.set_type_name(type_name);\n  item.set_grid_size(grid_size);\n  item.set_tile_size(tile_size);\n\n  if (!addLayer(item)) {\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::save() {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->save();\n  }\n\n  return ret;\n}\n\nstd::shared_ptr<const MapLayer> LidarMapOffline::getLayer(int layer_id) {\n  auto iter = layers_.find(layer_id);\n  if (iter != layers_.end()) {\n    return iter->second;\n  } else {\n    return nullptr;\n  }\n}\n\nstd::shared_ptr<const MapLayer> LidarMapOffline::getLayer(const std::string& type_name,\n                                                          float grid_size, float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return nullptr;\n  }\n  return getLayer(layer_id);\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp"
		}
	}
]
I0403 12:59:21.860172 29929 json_parser.cpp:18] 
[
	6,
	{
		"bufnr" : 4,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n\n#include \"lidar_map_offline.h\"\n#include \"lmdb_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nstd::shared_ptr<LocalDatabase> LidarMapOffline::database_ = nullptr;\nLocalDatabase::MODE LidarMapOffline::database_operation_mode_;\nproto::map::MapInfo LidarMapOffline::map_info_;\n\nbool LidarMapOffline::configure(LocalDatabase::MODE mode) {\n  database_ = std::shared_ptr<LmdbDatabase>(new LmdbDatabase);\n  database_operation_mode_ = mode;\n\n  if (!database_->open(database_path_, database_operation_mode_)) {\n    return false;\n  }\n\n  std::string map_info_data;\n  if (database_->get(\"MapInfo\", &map_info_data)) {\n    return false;\n  }\n\n  if (!map_info_.ParseFromString(map_info_data)) {\n    return false;\n  }\n\n  return true;\n}\n\nbool LidarMapOffline::initializeLayer(int layer_id) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-initialize\n  }\n\n  // find the layer infomation in database\n  int layer_info_index = -1;\n  for (int i = 0; i < map_info_.layer_infos_size(); ++i) {\n    if (layer_id == map_info_.layer_infos(i).layer_id()) {\n      layer_info_index = i;\n      break;\n    }\n  }\n  if (-1 == layer_info_index) {\n    return false;  // the specific layer_id do not exist in database\n  }\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(map_info_.layer_infos(layer_info_index), database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::initializeLayer(const std::string& type_name, float grid_size,\n                                     float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  if (!initializeLayer(layer_id)) {\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::load(const Eigen::Vector3f& pos) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->load(pos);\n  }\n\n  return ret;\n}\n\nbool LidarMapOffline::addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->addPointCloud(pointcloud);\n\n  return false;\n}\n\nbool LidarMapOffline::getMap(int layer_id, const MapScope& scope, bool blocking,\n                             std::shared_ptr<Ndt3Interface>* ndt3) {\n  // initializeLayer is only used in read mode\n  if (database_operation_mode_ != LocalDatabase::READ) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  auto it = layers_.find(layer_id);\n  if (it == layers_.end()) {\n    return false;  // layer not exist\n  }\n\n  it->second->getMap(scope, blocking, ndt3);\n\n  return false;\n}\n\nbool LidarMapOffline::addLayer(const proto::config::MapLayerItem& layer_item) {\n  // initializeLayer is only used in wrtie and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  int layer_id = layer_item.layer_id();\n  auto it = layers_.find(layer_id);\n  if (it != layers_.end()) {\n    return false;  // re-add\n  }\n\n  // construct a layer_info\n  proto::map::MapLayerInfo layer_info;\n  layer_info.set_layer_id(layer_item.layer_id());\n  layer_info.set_grid_size(layer_item.grid_size());\n  layer_info.set_tile_size(layer_item.tile_size());\n  layer_info.set_type_name(layer_item.type_name());\n\n  auto new_layer = std::shared_ptr<MapLayer>(new MapLayer);\n  if (!new_layer->initialize(layer_info, database_)) {\n    return false;\n  }\n\n  layers_[layer_id] = new_layer;\n\n  return false;\n}\n\nint LidarMapOffline::addLayer(const std::string& type_name, float grid_size, float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return -1;\n  }\n\n  proto::config::MapLayerItem item;\n  item.set_layer_id(layer_id);\n  item.set_type_name(type_name);\n  item.set_grid_size(grid_size);\n  item.set_tile_size(tile_size);\n\n  if (!addLayer(item)) {\n    return -1;\n  }\n\n  return layer_id;\n}\n\nbool LidarMapOffline::save() {\n  // initializeLayer is only used in write and create mode\n  if (database_operation_mode_ != LocalDatabase::WRITE &&\n      database_operation_mode_ != LocalDatabase::NEW) {\n    return false;\n  }\n\n  // database not set\n  if (nullptr == database_) {\n    return false;\n  }\n\n  bool ret = true;\n  for (auto& pair : layers_) {\n    ret &= pair.second->save();\n  }\n\n  return ret;\n}\n\nstd::shared_ptr<const MapLayer> LidarMapOffline::getLayer(int layer_id) {\n  auto iter = layers_.find(layer_id);\n  if (iter != layers_.end()) {\n    return iter->second;\n  } else {\n    return nullptr;\n  }\n}\n\nstd::shared_ptr<const MapLayer> LidarMapOffline::getLayer(const std::string& type_name,\n                                                          float grid_size, float tile_size) {\n  int layer_id;\n  if (!map_layer_dict_.getIdByInfo(type_name, grid_size, tile_size, &layer_id)) {\n    return nullptr;\n  }\n  return getLayer(layer_id);\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_offline.cpp"
		}
	}
]
I0403 12:59:21.938918 29929 json_parser.cpp:18] 
[
	7,
	{
		"bufnr" : 5,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map_online.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n\n#include \"lidar_map_online.h\"\n\nnamespace allride {\nnamespace mapping {\n\nvoid LidarMapOnline::setMapOrigin(const common::geometry::SE3& Tx_MP_map) { origin_ = Tx_MP_map; }\n\ncommon::geometry::SE3 LidarMapOnline::getMapOrigin() { return origin_; }\n\nvoid LidarMapOnline::resetMapRegion(const common::geometry::SE3& Tx_MP_V, double radius) {\n  common::geometry::SE3 Tx_delta /* = origin_.inverseCompose(Tx_MP_V) */;  // waiting for api\n\n  // first get all keys\n  std::vector<int> all_layer_ids;\n  for (const auto& pair : ndt3_pool_) {\n    all_layer_ids.emplace_back(pair.first);\n  }\n\n  // update ndt3 data of all layers\n  for (const auto& layer_id : all_layer_ids) {\n    std::shared_ptr<Ndt3Tile> new_ndt3 =\n        std::shared_ptr<Ndt3Tile>(new Ndt3Tile(map_layer_dict_.getGridSize(layer_id)));\n    ndt3_pool_[layer_id]->copyAndTransform(Tx_delta, radius, new_ndt3.get());\n    ndt3_pool_[layer_id] = new_ndt3;\n  }\n}\n\nbool LidarMapOnline::initializeLayer(int layer_id) {\n  auto ndt3_pool_it = ndt3_pool_.find(layer_id);\n  if (ndt3_pool_it != ndt3_pool_.end()) {\n    return false;  // re-initialize\n  }\n\n  float grid_size;\n  if (!map_layer_dict_.getInfoById(layer_id, nullptr, &grid_size, nullptr)) {\n    return false;\n  }\n\n  ndt3_pool_[layer_id] = std::shared_ptr<Ndt3Tile>(new Ndt3Tile(grid_size));\n\n  return true;\n}\n\nbool LidarMapOnline::addPointCloud(int layer_id, const common::PointCloudXYZI& pointcloud) {\n  auto ndt3_pool_it = ndt3_pool_.find(layer_id);\n  if (ndt3_pool_it == ndt3_pool_.end()) {\n    return false;  // layer not exist\n  }\n\n  // add sample to ndt3\n  for (const auto& sample : pointcloud) {\n    ndt3_pool_it->second->addSample(sample);\n  }\n\n  return false;\n}\n\nbool LidarMapOnline::getMap(int layer_id, std::shared_ptr<Ndt3Interface>* ndt3) {\n  if (!ndt3) {\n    return false;\n  }\n\n  auto ndt3_pool_it = ndt3_pool_.find(layer_id);\n  if (ndt3_pool_it == ndt3_pool_.end()) {\n    return false;  // layer n