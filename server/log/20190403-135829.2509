Log file created at: 2019/04/03 13:58:29
Running on machine: mr-pc
Log line format: [IWEF]mmdd hh:mm:ss.uuuuuu threadid file:line] msg
I0403 13:58:29.173208  2509 json_parser.cpp:18] 
[
	1,
	{
		"bufnr" : 3,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#include <fstream>\n\n#include \"common/proto/config/config_map.pb.h\"\n#include \"lidar_map.h\"\n\nnamespace allride {\nnamespace mapping {\n\nMapLayerDictionaryParser LidarMap::map_layer_dict_;\nstd::string LidarMap::database_path_;\nint LidarMap::cache_range_;\nint LidarMap::cache_margin_;\n\nbool LidarMap::configure(const std::string& config_file) {\n  std::ifstream map_config_ifs(config_file);\n  proto::config::ConfigMap map_config;\n  if (!map_config.ParseFromIstream(&map_config_ifs)) {\n    return false;\n  }\n\n  if (!map_layer_dict_.load(map_config.maplayer_dict_path())) {\n    return false;\n  }\n\n  database_path_ = map_config.database_path();\n\n  cache_range_ = map_config.cache_range();\n\n  cache_margin_ = map_config.cache_margin();\n\n  return true;\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map.cpp"
		}
	}
]
I0403 13:58:34.562996  2509 json_parser.cpp:18] 
[
	2,
	{
		"bufnr" : 3,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#include <fstream>\n\n#include \"common/proto/config/config_map.pb.h\"\n#include \"lidar_map.h\"\n\nnamespace allride {\nnamespace mapping {\n\nMapLayerDictionaryParser LidarMap::map_layer_dict_;\nstd::string LidarMap::database_path_;\nint LidarMap::cache_range_;\nint LidarMap::cache_margin_;\n\nbool LidarMap::configure(const std::string& config_file) {\n  std::ifstream map_config_ifs(config_file);\n  proto::config::ConfigMap map_config;\n  if (!map_config.ParseFromIstream(&map_config_ifs)) {\n    return false;\n  }\n\n  if (!map_layer_dict_.load(map_config.maplayer_dict_path())) {\n    return false;\n  }\n\n  database_path_ = map_config.database_path();\n\n  cache_range_ = map_config.cache_range();\n\n  cache_margin_ = map_config.cache_margin();\n\n  return true;\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map.cpp"
		}
	}
]
I0403 13:58:37.413416  2509 json_parser.cpp:18] 
[
	3,
	{
		"bufnr" : 3,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map.cpp",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#include <fstream>\n\n#include \"common/proto/config/config_map.pb.h\"\n#include \"lidar_map.h\"\n\nnamespace allride {\nnamespace mapping {\n\nMapLayerDictionaryParser LidarMap::map_layer_dict_;\nstd::string LidarMap::database_path_;\nint LidarMap::cache_range_;\nint LidarMap::cache_margin_;\n\nbool LidarMap::configure(const std::string& config_file) {\n  std::ifstream map_config_ifs(config_file);\n  proto::config::ConfigMap map_config;\n  if (!map_config.ParseFromIstream(&map_config_ifs)) {\n    return false;\n  }\n\n  if (!map_layer_dict_.load(map_config.maplayer_dict_path())) {\n    return false;\n  }\n\n  database_path_ = map_config.database_path();\n\n  cache_range_ = map_config.cache_range();\n\n  cache_margin_ = map_config.cache_margin();\n\n  return true;\n}\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/lidar_map.cpp"
		}
	}
]
I0403 13:58:37.527084  2509 json_parser.cpp:18] 
[
	4,
	{
		"bufnr" : 5,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/ndt3tile.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include <unordered_map>\n#include <unordered_set>\n\n#include \"common/geometry/se3.h\"\n#include \"common/geometry/so3.h\"\n#include \"common/math/eigen_types.h\"\n#include \"common/math/point_types.h\"\n#include \"sensor_msgs/PointCloud2.h\"\n\n#include \"ndt3interface.h\"\n#include \"tile_data_storage.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass Ndt3TileMulti;\n\nclass Ndt3Tile : public Ndt3Interface {\n public:\n  enum NormalType { Plane = 0, Line };\n\n  friend class Ndt3TileMulti;\n\n  /// @brief construct a Ndt3Tile given grid_size\n  Ndt3Tile(float grid_size);\n\n  /// @brief construct a Ndt3Tile given grid_size and storage\n  Ndt3Tile(float grid_size, std::shared_ptr<TileDataStorage> storage);\n\n  /// @brief implemention of the Ndt3Interface::getMeans\n  std::shared_ptr<MapMatrixArray> getMeans() const override;\n\n  /// @brief implemention of the Ndt3Interface::getCovariances\n  std::shared_ptr<MapMatrixArray> getCovariances() const override;\n\n  /// @brief implemention of the Ndt3Interface::getCounts\n  std::shared_ptr<MapMatrixArray> getCounts() const override;\n\n  /// @brief implemention of the Ndt3Interface::getScales\n  std::shared_ptr<MapMatrixArray> getScales() const override;\n\n  /// @brief implemention of the Ndt3Interface::getNormals\n  std::shared_ptr<MapMatrixArray> getNormals() const override;\n\n  /// @brief implemention of the Ndt3Interface::getEigenvalues\n  std::shared_ptr<MapMatrixArray> getEigenvalues() const override;\n\n  /// @brief implemention of the Ndt3Interface::getIntensities\n  std::shared_ptr<MapMatrixArray> getIntensities() const override;\n\n  /// @brief implemention of the Ndt3Interface::getMean\n  bool getMean(const Eigen::Vector3f& pos, Eigen::Vector3f* mean) const override;\n\n  /// @brief implemention of the Ndt3Interface::getCovariance\n  bool getCovariance(const Eigen::Vector3f& pos, Eigen::Matrix3f* cov) const override;\n\n  /// @brief implemention of the Ndt3Interface::getCount\n  bool getCount(const Eigen::Vector3f& pos, float* count) const override;\n\n  /// @brief implemention of the Ndt3Interface::getScale\n  bool getScale(const Eigen::Vector3f& pos, float* scale) const override;\n\n  /// @brief implemention of the Ndt3Interface::getNormal\n  bool getNormal(const Eigen::Vector3f& pos, Eigen::Vector3f* normal) const override;\n\n  /// @brief implemention of the Ndt3Interface::getEigenvalue\n  bool getEigenvalue(const Eigen::Vector3f& pos, Eigen::Vector3f* eigen) const override;\n\n  /// @brief implemention of the Ndt3Interface::getIntensity\n  bool getIntensity(const Eigen::Vector3f& pos, float* intensity) const override;\n\n  /// @brief add a sample\n  ///\n  /// @param sample[in] sample contains x,y,z,intensity\n  void addSample(const common::PointXYZI& sample);\n\n  /// @brief add(merge) a already exist gaussian distribution\n  ///\n  /// @param mean[in] position mean\n  /// @param covariance[in] position covariance\n  /// @param count[in] number of sample\n  /// @param intensity[in] average intensity\n  void addGaussian(const Eigen::Vector3f& mean, const Eigen::Matrix3f& covariance, int count,\n                   float intensity);\n\n  /// @brief Deserialize from protobuf string\n  ///\n  /// @param packeded_string[in] store the serialized string\n  ///\n  /// @return true on succeed, else false\n  bool unpackFromString(const std::string& packeded_string);\n\n  /// @brief Serialize to protobuf string\n  ///\n  /// @param packed_string[out] store the serialized string\n  ///\n  /// @return true on succeed, else false\n  bool packToString(std::string* packed_string) const;\n\n  /// @brief build the grid_id to index mapping\n  ///\n  /// @return true on succeed, else false\n  // bool buildGridIndexMapping();\n\n  /// @brief\n  ///\n  /// @param sensor_noise_var\n  void computeAllNormalsAndEigenvalues(double sensor_noise_var);\n\n  /// @brief\n  ///\n  /// @param sensor_noise_var\n  void computeAllPrincipalAxisAndEigenvalues(double sensor_noise_var);\n\n  /// @brief\n  ///\n  /// @param Tx_MP_V\n  /// @param radius\n  void resetRegion(const common::geometry::SE3& Tx_MP_V, double radius);\n\n  /// @brief get the internal storage\n  ///\n  /// @return the internal storage got\n  std::shared_ptr<const TileDataStorage> getStorage() { return storage_; }\n\n  /// @brief copy from other Ndt3Tile\n  ///\n  /// @param copy_data[in] the other Ndt3Tile\n  void copy(Ndt3Tile* copy_data) const;\n\n  /// @brief copy from other Ndt3Tile in specific region\n  ///\n  /// @param Tx[in] specify the region center\n  /// @param radius[in] specify the region range\n  /// @param copy_data[in] the other Ndt3Tile\n  void copyAndTransform(const common::geometry::SE3& Tx, double radius, Ndt3Tile* copy_data) const;\n\n  /* temporary comment out for compilation\n  bool toRosMsgPointCloud2(const std::string& frame, const Time& time,\n                           sensor_msgs::PointCloud2* point_cloud,\n                           const geometry::SE3& Tx = geometry::SE3()) const;\n                           */\n\n private:\n  TileDataStorage::GridID getGridID(const Eigen::Vector3f& pos) const;\n\n  TileDataStorage::GridID getGridID(const Eigen::Vector3f& pos, float scale) const;\n\n  bool getIndex(const Eigen::Vector3f& pos, int* index) const;\n\n  TileDataStorage::MapMatrix getMeansInner() const;\n\n  TileDataStorage::MapMatrix getCovariancesInner() const;\n\n  TileDataStorage::MapMatrix getCountsInner() const;\n\n  TileDataStorage::MapMatrix getScalesInner() const;\n\n  TileDataStorage::MapMatrix getNormalsInner() const;\n\n  TileDataStorage::MapMatrix getEigenvaluesInner() const;\n\n  TileDataStorage::MapMatrix getIntensitiesInner() const;\n\n  Eigen::Vector3f getMean(int index) const;\n\n  Eigen::Matrix3f getCovariance(int index) const;\n\n  float getCount(int index) const;\n\n  float getScale(int index) const;\n\n  Eigen::Vector3f getNormal(int index) const;\n\n  Eigen::Vector3f getEigenvalue(int index) const;\n\n  float getIntensity(int index) const;\n\n  bool setMean(int index, const Eigen::Vector3f& mean);\n\n  bool setCovariance(int index, const Eigen::Matrix3f& covariance);\n\n  bool setCount(int index, float count);\n\n  bool setScale(int index, float scale);\n\n  bool setNormal(int index, const Eigen::Vector3f& normal);\n\n  bool setEigenvalue(int index, const Eigen::Vector3f& eigenvalue);\n\n  bool setIntensity(int index, float intensity);\n\n  void initializeGaussian(const Eigen::Vector3f& mean, const Eigen::Matrix3f& covariance, int count,\n                          float scale);\n\n  void computeNormalAndEigenvalues(int index, double sensor_noise_var,\n                                   NormalType normal_type = Plane);\n\n  static const std::vector<TileDataStorage::NameSizePair> kChannelNameAndSize;\n\n  static const int kTotalNumberOfRows;\n\n  std::unordered_set<int> indices_to_compute_normal_;\n\n  std::shared_ptr<TileDataStorage> storage_;\n\n  float grid_size_;\n};\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/ndt3tile.h"
		}
	}
]
I0403 13:58:43.149549  2509 json_parser.cpp:18] 
[
	5,
	{
		"bufnr" : 5,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/ndt3tile.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include <unordered_map>\n#include <unordered_set>\n\n#include \"common/geometry/se3.h\"\n#include \"common/geometry/so3.h\"\n#include \"common/math/eigen_types.h\"\n#include \"common/math/point_types.h\"\n#include \"sensor_msgs/PointCloud2.h\"\n\n#include \"ndt3interface.h\"\n#include \"tile_data_storage.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass Ndt3TileMulti;\n\nclass Ndt3Tile : public Ndt3Interface {\n public:\n  enum NormalType { Plane = 0, Line };\n\n  friend class Ndt3TileMulti;\n\n  /// @brief construct a Ndt3Tile given grid_size\n  Ndt3Tile(float grid_size);\n\n  /// @brief construct a Ndt3Tile given grid_size and storage\n  Ndt3Tile(float grid_size, std::shared_ptr<TileDataStorage> storage);\n\n  /// @brief implemention of the Ndt3Interface::getMeans\n  std::shared_ptr<MapMatrixArray> getMeans() const override;\n\n  /// @brief implemention of the Ndt3Interface::getCovariances\n  std::shared_ptr<MapMatrixArray> getCovariances() const override;\n\n  /// @brief implemention of the Ndt3Interface::getCounts\n  std::shared_ptr<MapMatrixArray> getCounts() const override;\n\n  /// @brief implemention of the Ndt3Interface::getScales\n  std::shared_ptr<MapMatrixArray> getScales() const override;\n\n  /// @brief implemention of the Ndt3Interface::getNormals\n  std::shared_ptr<MapMatrixArray> getNormals() const override;\n\n  /// @brief implemention of the Ndt3Interface::getEigenvalues\n  std::shared_ptr<MapMatrixArray> getEigenvalues() const override;\n\n  /// @brief implemention of the Ndt3Interface::getIntensities\n  std::shared_ptr<MapMatrixArray> getIntensities() const override;\n\n  /// @brief implemention of the Ndt3Interface::getMean\n  bool getMean(const Eigen::Vector3f& pos, Eigen::Vector3f* mean) const override;\n\n  /// @brief implemention of the Ndt3Interface::getCovariance\n  bool getCovariance(const Eigen::Vector3f& pos, Eigen::Matrix3f* cov) const override;\n\n  /// @brief implemention of the Ndt3Interface::getCount\n  bool getCount(const Eigen::Vector3f& pos, float* count) const override;\n\n  /// @brief implemention of the Ndt3Interface::getScale\n  bool getScale(const Eigen::Vector3f& pos, float* scale) const override;\n\n  /// @brief implemention of the Ndt3Interface::getNormal\n  bool getNormal(const Eigen::Vector3f& pos, Eigen::Vector3f* normal) const override;\n\n  /// @brief implemention of the Ndt3Interface::getEigenvalue\n  bool getEigenvalue(const Eigen::Vector3f& pos, Eigen::Vector3f* eigen) const override;\n\n  /// @brief implemention of the Ndt3Interface::getIntensity\n  bool getIntensity(const Eigen::Vector3f& pos, float* intensity) const override;\n\n  /// @brief add a sample\n  ///\n  /// @param sample[in] sample contains x,y,z,intensity\n  void addSample(const common::PointXYZI& sample);\n\n  /// @brief add(merge) a already exist gaussian distribution\n  ///\n  /// @param mean[in] position mean\n  /// @param covariance[in] position covariance\n  /// @param count[in] number of sample\n  /// @param intensity[in] average intensity\n  void addGaussian(const Eigen::Vector3f& mean, const Eigen::Matrix3f& covariance, int count,\n                   float intensity);\n\n  /// @brief Deserialize from protobuf string\n  ///\n  /// @param packeded_string[in] store the serialized string\n  ///\n  /// @return true on succeed, else false\n  bool unpackFromString(const std::string& packeded_string);\n\n  /// @brief Serialize to protobuf string\n  ///\n  /// @param packed_string[out] store the serialized string\n  ///\n  /// @return true on succeed, else false\n  bool packToString(std::string* packed_string) const;\n\n  /// @brief build the grid_id to index mapping\n  ///\n  /// @return true on succeed, else false\n  // bool buildGridIndexMapping();\n\n  /// @brief\n  ///\n  /// @param sensor_noise_var\n  void computeAllNormalsAndEigenvalues(double sensor_noise_var);\n\n  /// @brief\n  ///\n  /// @param sensor_noise_var\n  void computeAllPrincipalAxisAndEigenvalues(double sensor_noise_var);\n\n  /// @brief\n  ///\n  /// @param Tx_MP_V\n  /// @param radius\n  void resetRegion(const common::geometry::SE3& Tx_MP_V, double radius);\n\n  /// @brief get the internal storage\n  ///\n  /// @return the internal storage got\n  std::shared_ptr<const TileDataStorage> getStorage() { return storage_; }\n\n  /// @brief copy from other Ndt3Tile\n  ///\n  /// @param copy_data[in] the other Ndt3Tile\n  void copy(Ndt3Tile* copy_data) const;\n\n  /// @brief copy from other Ndt3Tile in specific region\n  ///\n  /// @param Tx[in] specify the region center\n  /// @param radius[in] specify the region range\n  /// @param copy_data[in] the other Ndt3Tile\n  void copyAndTransform(const common::geometry::SE3& Tx, double radius, Ndt3Tile* copy_data) const;\n\n  /* temporary comment out for compilation\n  bool toRosMsgPointCloud2(const std::string& frame, const Time& time,\n                           sensor_msgs::PointCloud2* point_cloud,\n                           const geometry::SE3& Tx = geometry::SE3()) const;\n                           */\n\n private:\n  TileDataStorage::GridID getGridID(const Eigen::Vector3f& pos) const;\n\n  TileDataStorage::GridID getGridID(const Eigen::Vector3f& pos, float scale) const;\n\n  bool getIndex(const Eigen::Vector3f& pos, int* index) const;\n\n  TileDataStorage::MapMatrix getMeansInner() const;\n\n  TileDataStorage::MapMatrix getCovariancesInner() const;\n\n  TileDataStorage::MapMatrix getCountsInner() const;\n\n  TileDataStorage::MapMatrix getScalesInner() const;\n\n  TileDataStorage::MapMatrix getNormalsInner() const;\n\n  TileDataStorage::MapMatrix getEigenvaluesInner() const;\n\n  TileDataStorage::MapMatrix getIntensitiesInner() const;\n\n  Eigen::Vector3f getMean(int index) const;\n\n  Eigen::Matrix3f getCovariance(int index) const;\n\n  float getCount(int index) const;\n\n  float getScale(int index) const;\n\n  Eigen::Vector3f getNormal(int index) const;\n\n  Eigen::Vector3f getEigenvalue(int index) const;\n\n  float getIntensity(int index) const;\n\n  bool setMean(int index, const Eigen::Vector3f& mean);\n\n  bool setCovariance(int index, const Eigen::Matrix3f& covariance);\n\n  bool setCount(int index, float count);\n\n  bool setScale(int index, float scale);\n\n  bool setNormal(int index, const Eigen::Vector3f& normal);\n\n  bool setEigenvalue(int index, const Eigen::Vector3f& eigenvalue);\n\n  bool setIntensity(int index, float intensity);\n\n  void initializeGaussian(const Eigen::Vector3f& mean, const Eigen::Matrix3f& covariance, int count,\n                          float scale);\n\n  void computeNormalAndEigenvalues(int index, double sensor_noise_var,\n                                   NormalType normal_type = Plane);\n\n  static const std::vector<TileDataStorage::NameSizePair> kChannelNameAndSize;\n\n  static const int kTotalNumberOfRows;\n\n  std::unordered_set<int> indices_to_compute_normal_;\n\n  std::shared_ptr<TileDataStorage> storage_;\n\n  float grid_size_;\n};\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/ndt3tile.h"
		}
	}
]
I0403 13:58:43.238415  2509 json_parser.cpp:18] 
[
	6,
	{
		"bufnr" : 6,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/ndt3tile_multi.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include \"common/math/eigen_types.h\"\n\n#include \"ndt3interface.h\"\n#include \"ndt3tile.h\"\n#include \"tile_cache.h\"\n#include \"tile_data_storage.h\"\n#include \"tiler.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass Ndt3TileMulti : public Ndt3Interface {\n public:\n  typedef std::unordered_map<Tiler::TileID, std::shared_ptr<Ndt3Tile>> Ndt3Hash;\n\n  /// @brief construct from a TileHash\n  Ndt3TileMulti(const std::shared_ptr<Ndt3Hash>& tiles, float tile_size);\n\n  /// @brief implemention of the Ndt3Interface::getMeans\n  std::shared_ptr<MapMatrixArray> getMeans() const override;\n\n  /// @brief implemention of the Ndt3Interface::getCovariances\n  std::shared_ptr<MapMatrixArray> getCovariances() const override;\n\n  /// @brief implemention of the Ndt3Interface::getCounts\n  std::shared_ptr<MapMatrixArray> getCounts() const override;\n\n  /// @brief implemention of the Ndt3Interface::getScales\n  std::shared_ptr<MapMatrixArray> getScales() const override;\n\n  /// @brief implemention of the Ndt3Interface::getNormals\n  std::shared_ptr<MapMatrixArray> getNormals() const override;\n\n  /// @brief implemention of the Ndt3Interface::getEigenvalues\n  std::shared_ptr<MapMatrixArray> getEigenvalues() const override;\n\n  /// @brief implemention of the Ndt3Interface::getIntensities\n  std::shared_ptr<MapMatrixArray> getIntensities() const override;\n\n  /// @brief implemention of the Ndt3Interface::getMean\n  bool getMean(const Eigen::Vector3f& pos, Eigen::Vector3f* mean) const override;\n\n  /// @brief implemention of the Ndt3Interface::getCovariance\n  bool getCovariance(const Eigen::Vector3f& pos, Eigen::Matrix3f* cov) const override;\n\n  /// @brief implemention of the Ndt3Interface::getCount\n  bool getCount(const Eigen::Vector3f& pos, float* count) const override;\n\n  /// @brief implemention of the Ndt3Interface::getScale\n  bool getScale(const Eigen::Vector3f& pos, float* scale) const override;\n\n  /// @brief implemention of the Ndt3Interface::getNormal\n  bool getNormal(const Eigen::Vector3f& pos, Eigen::Vector3f* normal) const override;\n\n  /// @brief implemention of the Ndt3Interface::getEigenvalue\n  bool getEigenvalue(const Eigen::Vector3f& pos, Eigen::Vector3f* eigen) const override;\n\n  /// @brief implemention of the Ndt3Interface::getIntensity\n  bool getIntensity(const Eigen::Vector3f& pos, float* intensity) const override;\n\n private:\n  std::shared_ptr<Ndt3Hash> tiles_hash_;  /// an std::unordered_map\n  std::unique_ptr<Tiler> tiler_;\n};\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/ndt3tile_multi.h"
		}
	}
]
I0403 13:59:43.058557  2509 json_parser.cpp:18] 
[
	7,
	{
		"bufnr" : 6,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/ndt3tile_multi.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include \"common/math/eigen_types.h\"\n\n#include \"ndt3interface.h\"\n#include \"ndt3tile.h\"\n#include \"tile_cache.h\"\n#include \"tile_data_storage.h\"\n#include \"tiler.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass Ndt3TileMulti : public Ndt3Interface {\n public:\n  typedef std::unordered_map<Tiler::TileID, std::shared_ptr<Ndt3Tile>> Ndt3Hash;\n\n  /// @brief construct from a TileHash\n  Ndt3TileMulti(const std::shared_ptr<Ndt3Hash>& tiles, float tile_size);\n\n  /// @brief implemention of the Ndt3Interface::getMeans\n  std::shared_ptr<MapMatrixArray> getMeans() const override;\n\n  /// @brief implemention of the Ndt3Interface::getCovariances\n  std::shared_ptr<MapMatrixArray> getCovariances() const override;\n\n  /// @brief implemention of the Ndt3Interface::getCounts\n  std::shared_ptr<MapMatrixArray> getCounts() const override;\n\n  /// @brief implemention of the Ndt3Interface::getScales\n  std::shared_ptr<MapMatrixArray> getScales() const override;\n\n  /// @brief implemention of the Ndt3Interface::getNormals\n  std::shared_ptr<MapMatrixArray> getNormals() const override;\n\n  /// @brief implemention of the Ndt3Interface::getEigenvalues\n  std::shared_ptr<MapMatrixArray> getEigenvalues() const override;\n\n  /// @brief implemention of the Ndt3Interface::getIntensities\n  std::shared_ptr<MapMatrixArray> getIntensities() const override;\n\n  /// @brief implemention of the Ndt3Interface::getMean\n  bool getMean(const Eigen::Vector3f& pos, Eigen::Vector3f* mean) const override;\n\n  /// @brief implemention of the Ndt3Interface::getCovariance\n  bool getCovariance(const Eigen::Vector3f& pos, Eigen::Matrix3f* cov) const override;\n\n  /// @brief implemention of the Ndt3Interface::getCount\n  bool getCount(const Eigen::Vector3f& pos, float* count) const override;\n\n  /// @brief implemention of the Ndt3Interface::getScale\n  bool getScale(const Eigen::Vector3f& pos, float* scale) const override;\n\n  /// @brief implemention of the Ndt3Interface::getNormal\n  bool getNormal(const Eigen::Vector3f& pos, Eigen::Vector3f* normal) const override;\n\n  /// @brief implemention of the Ndt3Interface::getEigenvalue\n  bool getEigenvalue(const Eigen::Vector3f& pos, Eigen::Vector3f* eigen) const override;\n\n  /// @brief implemention of the Ndt3Interface::getIntensity\n  bool getIntensity(const Eigen::Vector3f& pos, float* intensity) const override;\n\n private:\n  std::shared_ptr<Ndt3Hash> tiles_hash_;  /// an std::unordered_map\n  std::unique_ptr<Tiler> tiler_;\n};\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/ndt3tile_multi.h"
		}
	}
]
I0403 13:59:43.173526  2509 json_parser.cpp:18] 
[
	8,
	{
		"bufnr" : 7,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/map_scope.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include \"common/math/eigen_types.h\"\n\nnamespace allride {\nnamespace mapping {\n\n/// @brief specify a three dimension region\nclass MapScope {\n public:\n  MapScope();\n  MapScope(Eigen::Vector3f center, float range);\n  MapScope(Eigen::Vector3f corner0, Eigen::Vector3f corner1);\n\n  const Eigen::Vector3f& getCornerMin() const;\n  const Eigen::Vector3f& getCornerMax() const;\n\n protected:\n  Eigen::Vector3f corner_min;\n  Eigen::Vector3f corner_max;\n};\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/map_scope.h"
		}
	}
]
I0403 13:59:54.599843  2509 json_parser.cpp:18] 
[
	9,
	{
		"bufnr" : 7,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/map_scope.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include \"common/math/eigen_types.h\"\n\nnamespace allride {\nnamespace mapping {\n\n/// @brief specify a three dimension region\nclass MapScope {\n public:\n  MapScope();\n  MapScope(Eigen::Vector3f center, float range);\n  MapScope(Eigen::Vector3f corner0, Eigen::Vector3f corner1);\n\n  const Eigen::Vector3f& getCornerMin() const;\n  const Eigen::Vector3f& getCornerMax() const;\n\n protected:\n  Eigen::Vector3f corner_min;\n  Eigen::Vector3f corner_max;\n};\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/map_scope.h"
		}
	}
]
I0403 13:59:54.714514  2509 json_parser.cpp:18] 
[
	10,
	{
		"bufnr" : 8,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/ndt_map_builder.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All rights reserved.\n// Authors: Yongjian Zhao (yongjian.zhao@allride.ai)\n\n#pragma once\n\n#include <map>\n#include <memory>\n#include <string>\n#include <unordered_map>\n\n#include \"common/math/point_types.h\"\n#include \"local_database.h\"\n#include \"tile_data_storage.h\"\n#include \"tiler.h\"\n\nnamespace allride {\nnamespace mapping {\n\nenum MapType { COMMON_NDT = 0, FEATURE_NDT, INTENSITY };\n\ntypedef uint64_t Time;\n\nstruct MappingParameter {\n  MapType type;\n  float grid_size;\n  float tile_size;\n\n  std::stirng pcd_rosbag;\n  std::string pcd_topic;\n  std::string pose_rosbag;\n  std::string pose_topic;\n\n  std::string existing_ndt_map;\n};\n\nclass NdtMapBuilder {\n public:\n  NdtMapBuilder() = default;\n  ~NdtMapBuilder() = default;\n\n  bool initialize(const MappingParameter& param);\n\n  void buildNdtMap(const std::string& output_folder);\n\n protected:\n  MappingParameter param_;\n  std::unordered_map<Tiler::TileID, std::unique_ptr<TileDataStorage>> ndt_map_data_;\n\n private:\n  void pcdPreProcess(const MapType& type, PointCloudXYZIRT* pcd);\n\n  void ndtPostProcess(const MapType& type);\n\n  bool saveNdtMap(const std::string& output_folder);\n\n  bool loadLidarPose(const std::string& rosbag_name, const std::string& pose_topic);\n\n  bool loadNdtMap(const std::string& existing_map);\n\n  std::map<Time, common::geometry::SE3, Eigen::allocator_aligned<common::geometry::SE3>>\n      lidar_poses_;\n};\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/ndt_map_builder.h"
		}
	}
]
I0403 14:00:12.751643  2509 json_parser.cpp:18] 
[
	11,
	{
		"bufnr" : 8,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/ndt_map_builder.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All rights reserved.\n// Authors: Yongjian Zhao (yongjian.zhao@allride.ai)\n\n#pragma once\n\n#include <map>\n#include <memory>\n#include <string>\n#include <unordered_map>\n\n#include \"common/math/point_types.h\"\n#include \"local_database.h\"\n#include \"tile_data_storage.h\"\n#include \"tiler.h\"\n\nnamespace allride {\nnamespace mapping {\n\nenum MapType { COMMON_NDT = 0, FEATURE_NDT, INTENSITY };\n\ntypedef uint64_t Time;\n\nstruct MappingParameter {\n  MapType type;\n  float grid_size;\n  float tile_size;\n\n  std::stirng pcd_rosbag;\n  std::string pcd_topic;\n  std::string pose_rosbag;\n  std::string pose_topic;\n\n  std::string existing_ndt_map;\n};\n\nclass NdtMapBuilder {\n public:\n  NdtMapBuilder() = default;\n  ~NdtMapBuilder() = default;\n\n  bool initialize(const MappingParameter& param);\n\n  void buildNdtMap(const std::string& output_folder);\n\n protected:\n  MappingParameter param_;\n  std::unordered_map<Tiler::TileID, std::unique_ptr<TileDataStorage>> ndt_map_data_;\n\n private:\n  void pcdPreProcess(const MapType& type, PointCloudXYZIRT* pcd);\n\n  void ndtPostProcess(const MapType& type);\n\n  bool saveNdtMap(const std::string& output_folder);\n\n  bool loadLidarPose(const std::string& rosbag_name, const std::string& pose_topic);\n\n  bool loadNdtMap(const std::string& existing_map);\n\n  std::map<Time, common::geometry::SE3, Eigen::allocator_aligned<common::geometry::SE3>>\n      lidar_poses_;\n};\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/ndt_map_builder.h"
		}
	}
]
I0403 14:00:19.630215  2509 json_parser.cpp:18] 
[
	12,
	{
		"bufnr" : 8,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/ndt_map_builder.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All rights reserved.\n// Authors: Yongjian Zhao (yongjian.zhao@allride.ai)\n\n#pragma once\n\n#include <map>\n#include <memory>\n#include <string>\n#include <unordered_map>\n\n#include \"common/math/point_types.h\"\n#include \"local_database.h\"\n#include \"tile_data_storage.h\"\n#include \"tiler.h\"\n\nnamespace allride {\nnamespace mapping {\n\nenum MapType { COMMON_NDT = 0, FEATURE_NDT, INTENSITY };\n\ntypedef uint64_t Time;\n\nstruct MappingParameter {\n  MapType type;\n  float grid_size;\n  float tile_size;\n\n  std::stirng pcd_rosbag;\n  std::string pcd_topic;\n  std::string pose_rosbag;\n  std::string pose_topic;\n\n  std::string existing_ndt_map;\n};\n\nclass NdtMapBuilder {\n public:\n  NdtMapBuilder() = default;\n  ~NdtMapBuilder() = default;\n\n  bool initialize(const MappingParameter& param);\n\n  void buildNdtMap(const std::string& output_folder);\n\n protected:\n  MappingParameter param_;\n  std::unordered_map<Tiler::TileID, std::unique_ptr<TileDataStorage>> ndt_map_data_;\n\n private:\n  void pcdPreProcess(const MapType& type, PointCloudXYZIRT* pcd);\n\n  void ndtPostProcess(const MapType& type);\n\n  bool saveNdtMap(const std::string& output_folder);\n\n  bool loadLidarPose(const std::string& rosbag_name, const std::string& pose_topic);\n\n  bool loadNdtMap(const std::string& existing_map);\n\n  std::map<Time, common::geometry::SE3, Eigen::allocator_aligned<common::geometry::SE3>>\n      lidar_poses_;\n};\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/ndt_map_builder.h"
		}
	}
]
I0403 14:00:23.476363  2509 json_parser.cpp:18] 
[
	13,
	{
		"bufnr" : 8,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/ndt_map_builder.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All rights reserved.\n// Authors: Yongjian Zhao (yongjian.zhao@allride.ai)\n\n#pragma once\n\n#include <map>\n#include <memory>\n#include <string>\n#include <unordered_map>\n\n#include \"common/math/point_types.h\"\n#include \"local_database.h\"\n#include \"tile_data_storage.h\"\n#include \"tiler.h\"\n\nnamespace allride {\nnamespace mapping {\n\nenum MapType { COMMON_NDT = 0, FEATURE_NDT, INTENSITY };\n\ntypedef uint64_t Time;\n\nstruct MappingParameter {\n  MapType type;\n  float grid_size;\n  float tile_size;\n\n  std::stirng pcd_rosbag;\n  std::string pcd_topic;\n  std::string pose_rosbag;\n  std::string pose_topic;\n\n  std::string existing_ndt_map;\n};\n\nclass NdtMapBuilder {\n public:\n  NdtMapBuilder() = default;\n  ~NdtMapBuilder() = default;\n\n  bool initialize(const MappingParameter& param);\n\n  void buildNdtMap(const std::string& output_folder);\n\n protected:\n  MappingParameter param_;\n  std::unordered_map<Tiler::TileID, std::unique_ptr<TileDataStorage>> ndt_map_data_;\n\n private:\n  void pcdPreProcess(const MapType& type, PointCloudXYZIRT* pcd);\n\n  void ndtPostProcess(const MapType& type);\n\n  bool saveNdtMap(const std::string& output_folder);\n\n  bool loadLidarPose(const std::string& rosbag_name, const std::string& pose_topic);\n\n  bool loadNdtMap(const std::string& existing_map);\n\n  std::map<Time, common::geometry::SE3, Eigen::allocator_aligned<common::geometry::SE3>>\n      lidar_poses_;\n};\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/ndt_map_builder.h"
		}
	}
]
I0403 14:00:23.597704  2509 json_parser.cpp:18] 
[
	14,
	{
		"bufnr" : 11,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_cache.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include \"local_database.h\"\n#include \"ndt3interface.h\"\n#include \"ndt3tile.h\"\n#include \"tile_client.h\"\n#include \"tile_scope.h\"\n#include \"tiler.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass TileCache {\n public:\n  typedef std::unordered_map<Tiler::TileID, std::shared_ptr<TileDataStorage>> TileStorageHash;\n\n  TileCache(size_t range, size_t water_mark, std::shared_ptr<TileClient> tile_client);\n\n  bool load(Tiler::TileID center);\n\n  bool getTiles(const TileScope& scope, bool blocking, std::shared_ptr<TileStorageHash>* tiles);\n\n private:\n  bool cacheLoadTask(const TileScope& scope);\n\n  std::shared_ptr<TileClient> tile_client_;\n  TileStorageHash tile_pool_;\n  TileScope current_scope_;\n  size_t range_;\n  size_t water_mark_;\n  std::mutex loading_lock_;\n  std::mutex cache_lock_;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_cache.h"
		}
	}
]
I0403 14:00:46.045416  2509 json_parser.cpp:18] 
[
	15,
	{
		"bufnr" : 11,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_cache.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include \"local_database.h\"\n#include \"ndt3interface.h\"\n#include \"ndt3tile.h\"\n#include \"tile_client.h\"\n#include \"tile_scope.h\"\n#include \"tiler.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass TileCache {\n public:\n  typedef std::unordered_map<Tiler::TileID, std::shared_ptr<TileDataStorage>> TileStorageHash;\n\n  TileCache(size_t range, size_t water_mark, std::shared_ptr<TileClient> tile_client);\n\n  bool load(Tiler::TileID center);\n\n  bool getTiles(const TileScope& scope, bool blocking, std::shared_ptr<TileStorageHash>* tiles);\n\n private:\n  bool cacheLoadTask(const TileScope& scope);\n\n  std::shared_ptr<TileClient> tile_client_;\n  TileStorageHash tile_pool_;\n  TileScope current_scope_;\n  size_t range_;\n  size_t water_mark_;\n  std::mutex loading_lock_;\n  std::mutex cache_lock_;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_cache.h"
		}
	}
]
I0403 14:00:46.163817  2509 json_parser.cpp:18] 
[
	16,
	{
		"bufnr" : 12,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_client.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include \"local_database.h\"\n#include \"tile_data_storage.h\"\n#include \"tiler.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass TileClient {\n public:\n  /// @brief construct a tile client with layer name and database\n  /// @param[in] layer_id spccify the layer that this tile client manages\n  /// @param[in] database is a reference to a database shared by many layers\n  TileClient(int layer_id, std::shared_ptr<LocalDatabase> database);\n\n  /// @brief get the tile data specific by tile id;\n  /// @param[in] tile_id specifies which tile to get\n  /// @param[out] tile stores the tile data got\n  /// @return true on succeed, else false\n  bool get(Tiler::TileID tile_id, std::shared_ptr<TileDataStorage>* tile);\n\n  /// @brief put the specific tile data into database;\n  /// @param[in] tile_id specifies the tile id of the tile to put\n  /// @param[in] tile stores the tile data to put\n  /// @return true on succeed, else false\n  bool put(Tiler::TileID tile_id, const std::shared_ptr<const TileDataStorage>& tile) const;\n\n  /// @brief check if a tile exist in database\n  /// @param[in] the tile id to check\n  /// @return true on exist, else false\n  bool exist(Tiler::TileID tile_id) const;\n\n private:\n  std::string getKey(Tiler::TileID) const;\n\n  int layer_id_;\n  std::shared_ptr<LocalDatabase> database_;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_client.h"
		}
	}
]
I0403 14:00:59.254783  2509 json_parser.cpp:18] 
[
	17,
	{
		"bufnr" : 12,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_client.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include \"local_database.h\"\n#include \"tile_data_storage.h\"\n#include \"tiler.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass TileClient {\n public:\n  /// @brief construct a tile client with layer name and database\n  /// @param[in] layer_id spccify the layer that this tile client manages\n  /// @param[in] database is a reference to a database shared by many layers\n  TileClient(int layer_id, std::shared_ptr<LocalDatabase> database);\n\n  /// @brief get the tile data specific by tile id;\n  /// @param[in] tile_id specifies which tile to get\n  /// @param[out] tile stores the tile data got\n  /// @return true on succeed, else false\n  bool get(Tiler::TileID tile_id, std::shared_ptr<TileDataStorage>* tile);\n\n  /// @brief put the specific tile data into database;\n  /// @param[in] tile_id specifies the tile id of the tile to put\n  /// @param[in] tile stores the tile data to put\n  /// @return true on succeed, else false\n  bool put(Tiler::TileID tile_id, const std::shared_ptr<const TileDataStorage>& tile) const;\n\n  /// @brief check if a tile exist in database\n  /// @param[in] the tile id to check\n  /// @return true on exist, else false\n  bool exist(Tiler::TileID tile_id) const;\n\n private:\n  std::string getKey(Tiler::TileID) const;\n\n  int layer_id_;\n  std::shared_ptr<LocalDatabase> database_;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_client.h"
		}
	}
]
I0403 14:00:59.366459  2509 json_parser.cpp:18] 
[
	18,
	{
		"bufnr" : 13,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_data_storage.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include <Eigen/Core>\n#include <iostream>\n#include <map>\n#include <memory>\n#include <vector>\n\n#include \"common/proto/map/map_storage.pb.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass TileDataStorage {\n public:\n  typedef uint64_t GridID;\n\n  typedef std::pair<std::string, int> NameSizePair;\n\n  typedef Eigen::Map<const Eigen::MatrixXf, Eigen::Unaligned, Eigen::OuterStride<>> MapMatrix;\n\n  typedef Eigen::Map<Eigen::MatrixXf, Eigen::Unaligned, Eigen::OuterStride<>> MutableMapMatrix;\n\n  TileDataStorage();\n\n  TileDataStorage(const std::vector<NameSizePair>& channel_list);\n\n  virtual ~TileDataStorage() = default;\n\n  virtual void resize(int new_size, float value);\n\n  void clear();\n\n  bool addVector(const Eigen::Ref<Eigen::VectorXf>& data);\n\n  bool addMatrix(const Eigen::Ref<Eigen::MatrixXf>& data);\n\n  bool addTileDataStorage(const TileDataStorage& other);\n\n  bool getChannelList(std::vector<NameSizePair>* channel_list) const;\n\n  bool getChannel(const std::string& channel_name, MapMatrix* data) const;\n\n  bool getChannel(int row_index, int channel_size, MapMatrix* data) const;\n\n  bool getMutableChannel(const std::string& channel_name, MutableMapMatrix* data);\n\n  bool getMutableChannel(int row_index, int channel_size, MutableMapMatrix* data);\n\n  int getColumnSize() const { return column_size_; };\n\n  bool packToString(std::string* packed_string) const;\n\n  bool unpackFromString(const std::string& packed_string);\n\n  std::unordered_map<GridID, int>& gridToIndexMapping();\n\n protected:\n  typedef std::pair<int, int> RowSizePair;\n\n  int row_size_;\n\n  int column_size_;\n\n  std::unique_ptr<proto::map::TileDataStorage> data_;\n\n  std::map<std::string, RowSizePair> channel_infos_;\n\n  /// GridID(calculated by getGridID) to Index(col num in MapMatrix)\n  std::unordered_map<GridID, int> grid_to_index_mapping_;\n};\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_data_storage.h"
		}
	}
]
I0403 14:01:09.592273  2509 json_parser.cpp:18] 
[
	19,
	{
		"bufnr" : 13,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_data_storage.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include <Eigen/Core>\n#include <iostream>\n#include <map>\n#include <memory>\n#include <vector>\n\n#include \"common/proto/map/map_storage.pb.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass TileDataStorage {\n public:\n  typedef uint64_t GridID;\n\n  typedef std::pair<std::string, int> NameSizePair;\n\n  typedef Eigen::Map<const Eigen::MatrixXf, Eigen::Unaligned, Eigen::OuterStride<>> MapMatrix;\n\n  typedef Eigen::Map<Eigen::MatrixXf, Eigen::Unaligned, Eigen::OuterStride<>> MutableMapMatrix;\n\n  TileDataStorage();\n\n  TileDataStorage(const std::vector<NameSizePair>& channel_list);\n\n  virtual ~TileDataStorage() = default;\n\n  virtual void resize(int new_size, float value);\n\n  void clear();\n\n  bool addVector(const Eigen::Ref<Eigen::VectorXf>& data);\n\n  bool addMatrix(const Eigen::Ref<Eigen::MatrixXf>& data);\n\n  bool addTileDataStorage(const TileDataStorage& other);\n\n  bool getChannelList(std::vector<NameSizePair>* channel_list) const;\n\n  bool getChannel(const std::string& channel_name, MapMatrix* data) const;\n\n  bool getChannel(int row_index, int channel_size, MapMatrix* data) const;\n\n  bool getMutableChannel(const std::string& channel_name, MutableMapMatrix* data);\n\n  bool getMutableChannel(int row_index, int channel_size, MutableMapMatrix* data);\n\n  int getColumnSize() const { return column_size_; };\n\n  bool packToString(std::string* packed_string) const;\n\n  bool unpackFromString(const std::string& packed_string);\n\n  std::unordered_map<GridID, int>& gridToIndexMapping();\n\n protected:\n  typedef std::pair<int, int> RowSizePair;\n\n  int row_size_;\n\n  int column_size_;\n\n  std::unique_ptr<proto::map::TileDataStorage> data_;\n\n  std::map<std::string, RowSizePair> channel_infos_;\n\n  /// GridID(calculated by getGridID) to Index(col num in MapMatrix)\n  std::unordered_map<GridID, int> grid_to_index_mapping_;\n};\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_data_storage.h"
		}
	}
]
I0403 14:01:09.712270  2509 json_parser.cpp:18] 
[
	20,
	{
		"bufnr" : 14,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_scope.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include <memory>\n\n#include \"map_scope.h\"\n#include \"tiler.h\"\n\nnamespace allride {\nnamespace mapping {\n\n/// @brief specify a three dimension region a tile sapce\nclass TileScope {\n public:\n  /// @brief construct a empty scope\n  TileScope();\n\n  /// @brief construct a scope by specify the center tile id and the range(in tile numbers)\n  TileScope(Tiler::TileID center, int range);\n\n  /// @brief construct a TileScope give a MapScope and the tile size\n  TileScope(const MapScope& map_scope, float tile_size);\n\n  /// @brief construct a TileScope give a MapScope and a tiler\n  TileScope(const MapScope& map_scope, const Tiler& tiler);\n\n  /// @brief construct a TileScope give two corner tile id\n  TileScope(Tiler::TileID tile_id0, Tiler::TileID tile_id1);\n\n  /// @brief check if other TileScope can be contained in\n  ///\n  /// @param other[in] the other TileScope\n  ///\n  /// @return true if can be contained\n  bool contain(const TileScope& other);\n\n  /// @brief like contain(other), but with an addtional margin\n  bool contain(const TileScope& other, int margin);\n\n  /// @brief get the tile id of this scope contains\n  std::shared_ptr<std::vector<Tiler::TileID>> getTilesIDs() const;\n\n  /// @brief get the tile id of scope center\n  Tiler::TileID getCenterTileID() const;\n\n  Tiler::TileID getTileIDMin() const;\n\n  Tiler::TileID getTileIDMax() const;\n\n protected:\n  Tiler::TileID tile_id_min_;\n  Tiler::TileID tile_id_max_;\n};\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_scope.h"
		}
	}
]
I0403 14:01:18.530899  2509 json_parser.cpp:18] 
[
	21,
	{
		"bufnr" : 14,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_scope.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include <memory>\n\n#include \"map_scope.h\"\n#include \"tiler.h\"\n\nnamespace allride {\nnamespace mapping {\n\n/// @brief specify a three dimension region a tile sapce\nclass TileScope {\n public:\n  /// @brief construct a empty scope\n  TileScope();\n\n  /// @brief construct a scope by specify the center tile id and the range(in tile numbers)\n  TileScope(Tiler::TileID center, int range);\n\n  /// @brief construct a TileScope give a MapScope and the tile size\n  TileScope(const MapScope& map_scope, float tile_size);\n\n  /// @brief construct a TileScope give a MapScope and a tiler\n  TileScope(const MapScope& map_scope, const Tiler& tiler);\n\n  /// @brief construct a TileScope give two corner tile id\n  TileScope(Tiler::TileID tile_id0, Tiler::TileID tile_id1);\n\n  /// @brief check if other TileScope can be contained in\n  ///\n  /// @param other[in] the other TileScope\n  ///\n  /// @return true if can be contained\n  bool contain(const TileScope& other);\n\n  /// @brief like contain(other), but with an addtional margin\n  bool contain(const TileScope& other, int margin);\n\n  /// @brief get the tile id of this scope contains\n  std::shared_ptr<std::vector<Tiler::TileID>> getTilesIDs() const;\n\n  /// @brief get the tile id of scope center\n  Tiler::TileID getCenterTileID() const;\n\n  Tiler::TileID getTileIDMin() const;\n\n  Tiler::TileID getTileIDMax() const;\n\n protected:\n  Tiler::TileID tile_id_min_;\n  Tiler::TileID tile_id_max_;\n};\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_scope.h"
		}
	}
]
I0403 14:01:18.643870  2509 json_parser.cpp:18] 
[
	22,
	{
		"bufnr" : 15,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/ndt3interface.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include \"common/math/eigen_types.h\"\n#include \"tile_data_storage.h\"\n\nnamespace allride {\nnamespace mapping {\n\n/// @brief Define the interface to utilize the Ndt3Data(s).\nclass Ndt3Interface {\n public:\n  typedef std::vector<TileDataStorage::MapMatrix,\n                      Eigen::aligned_allocator<TileDataStorage::MapMatrix>>\n      MapMatrixArray;\n\n  /// @brief get the means of all existing grids in the Ndt3Data(s)\n  ///\n  /// @return an array of the means stored in an Eigen::map\n  virtual std::shared_ptr<MapMatrixArray> getMeans() const = 0;\n\n  /// @brief get the covariances of all existing grids in the Ndt3Data(s)\n  ///\n  /// @return an array of the covariances stored in an Eigen::map\n  virtual std::shared_ptr<MapMatrixArray> getCovariances() const = 0;\n\n  /// @brief get the counts of all existing grids in the Ndt3Data(s)\n  ///\n  /// @return an array of the counts stored in an Eigen::map\n  virtual std::shared_ptr<MapMatrixArray> getCounts() const = 0;\n\n  /// @brief get the scales of all existing grids in the Ndt3Data(s)\n  ///\n  /// @return an array of the scales stored in an Eigen::map\n  virtual std::shared_ptr<MapMatrixArray> getScales() const = 0;\n\n  /// @brief get the normals of all existing grids in the Ndt3Data(s)\n  ///\n  /// @return an array of the normals stored in an Eigen::map\n  virtual std::shared_ptr<MapMatrixArray> getNormals() const = 0;\n\n  /// @brief get the eigen values of all existing grids in the Ndt3Data(s)\n  ///\n  /// @return an array of the eigen values stored in an Eigen::map\n  virtual std::shared_ptr<MapMatrixArray> getEigenvalues() const = 0;\n\n  /// @brief get the intensities of all existing grids in the Ndt3Data(s)\n  ///\n  /// @return an array of the intensities stored in an Eigen::map\n  virtual std::shared_ptr<MapMatrixArray> getIntensities() const = 0;\n\n  /// @brief get the mean of a grid specified by a position\n  ///\n  /// @param[in] pos the point which the querying grid contains\n  /// @param[out] mean stores the mean got\n  ///\n  /// @return true if the querying grid exists, else false\n  virtual bool getMean(const Eigen::Vector3f& pos, Eigen::Vector3f* mean) const = 0;\n\n  /// @brief get the covariance of a grid specified by a position\n  ///\n  /// @param[in] pos the point which the querying grid contains\n  /// @param[out] cov stores the covariance got\n  ///\n  /// @return true if the querying grid exists, else false\n  virtual bool getCovariance(const Eigen::Vector3f& pos, Eigen::Matrix3f* cov) const = 0;\n\n  /// @brief get the covariance of a grid specified by a position\n  ///\n  /// @param[in] pos the point which the querying grid contains\n  /// @param[out] cov stores the covariance got\n  ///\n  /// @return true if the querying grid exists, else false\n  virtual bool getCount(const Eigen::Vector3f& pos, float* count) const = 0;\n\n  /// @brief get the covariance of a grid specified by a position\n  ///\n  /// @param[in] pos the point which the querying grid contains\n  /// @param[out] cov stores the covariance got\n  ///\n  /// @return true if the querying grid exists, else false\n  virtual bool getScale(const Eigen::Vector3f& pos, float* scale) const = 0;\n\n  /// @brief get the normal of a grid specified by a position\n  ///\n  /// @param[in] pos the point which the querying grid contains\n  /// @param[out] cov stores the normal got\n  ///\n  /// @return true if the querying grid exists, else false\n  virtual bool getNormal(const Eigen::Vector3f& pos, Eigen::Vector3f* normal) const = 0;\n\n  /// @brief get the eigen value of a grid specified by a position\n  ///\n  /// @param[in] pos the point which the querying grid contains\n  /// @param[out] cov stores the eigen value got\n  ///\n  /// @return true if the querying grid exists, else false\n  virtual bool getEigenvalue(const Eigen::Vector3f& pos, Eigen::Vector3f* eigen) const = 0;\n\n  /// @brief get the intensity of a grid specified by a position\n  ///\n  /// @param[in] pos the point which the querying grid contains\n  /// @param[out] cov stores the intensity got\n  ///\n  /// @return true if the querying grid exists, else false\n  virtual bool getIntensity(const Eigen::Vector3f& pos, float* intensity) const = 0;\n};\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/ndt3interface.h"
		}
	}
]
I0403 14:09:10.137145  2509 json_parser.cpp:18] 
[
	23,
	{
		"bufnr" : 15,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/ndt3interface.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include \"common/math/eigen_types.h\"\n#include \"tile_data_storage.h\"\n\nnamespace allride {\nnamespace mapping {\n\n/// @brief Define the interface to utilize the Ndt3Data(s).\nclass Ndt3Interface {\n public:\n  typedef std::vector<TileDataStorage::MapMatrix,\n                      Eigen::aligned_allocator<TileDataStorage::MapMatrix>>\n      MapMatrixArray;\n\n  /// @brief get the means of all existing grids in the Ndt3Data(s)\n  ///\n  /// @return an array of the means stored in an Eigen::map\n  virtual std::shared_ptr<MapMatrixArray> getMeans() const = 0;\n\n  /// @brief get the covariances of all existing grids in the Ndt3Data(s)\n  ///\n  /// @return an array of the covariances stored in an Eigen::map\n  virtual std::shared_ptr<MapMatrixArray> getCovariances() const = 0;\n\n  /// @brief get the counts of all existing grids in the Ndt3Data(s)\n  ///\n  /// @return an array of the counts stored in an Eigen::map\n  virtual std::shared_ptr<MapMatrixArray> getCounts() const = 0;\n\n  /// @brief get the scales of all existing grids in the Ndt3Data(s)\n  ///\n  /// @return an array of the scales stored in an Eigen::map\n  virtual std::shared_ptr<MapMatrixArray> getScales() const = 0;\n\n  /// @brief get the normals of all existing grids in the Ndt3Data(s)\n  ///\n  /// @return an array of the normals stored in an Eigen::map\n  virtual std::shared_ptr<MapMatrixArray> getNormals() const = 0;\n\n  /// @brief get the eigen values of all existing grids in the Ndt3Data(s)\n  ///\n  /// @return an array of the eigen values stored in an Eigen::map\n  virtual std::shared_ptr<MapMatrixArray> getEigenvalues() const = 0;\n\n  /// @brief get the intensities of all existing grids in the Ndt3Data(s)\n  ///\n  /// @return an array of the intensities stored in an Eigen::map\n  virtual std::shared_ptr<MapMatrixArray> getIntensities() const = 0;\n\n  /// @brief get the mean of a grid specified by a position\n  ///\n  /// @param[in] pos the point which the querying grid contains\n  /// @param[out] mean stores the mean got\n  ///\n  /// @return true if the querying grid exists, else false\n  virtual bool getMean(const Eigen::Vector3f& pos, Eigen::Vector3f* mean) const = 0;\n\n  /// @brief get the covariance of a grid specified by a position\n  ///\n  /// @param[in] pos the point which the querying grid contains\n  /// @param[out] cov stores the covariance got\n  ///\n  /// @return true if the querying grid exists, else false\n  virtual bool getCovariance(const Eigen::Vector3f& pos, Eigen::Matrix3f* cov) const = 0;\n\n  /// @brief get the covariance of a grid specified by a position\n  ///\n  /// @param[in] pos the point which the querying grid contains\n  /// @param[out] cov stores the covariance got\n  ///\n  /// @return true if the querying grid exists, else false\n  virtual bool getCount(const Eigen::Vector3f& pos, float* count) const = 0;\n\n  /// @brief get the covariance of a grid specified by a position\n  ///\n  /// @param[in] pos the point which the querying grid contains\n  /// @param[out] cov stores the covariance got\n  ///\n  /// @return true if the querying grid exists, else false\n  virtual bool getScale(const Eigen::Vector3f& pos, float* scale) const = 0;\n\n  /// @brief get the normal of a grid specified by a position\n  ///\n  /// @param[in] pos the point which the querying grid contains\n  /// @param[out] cov stores the normal got\n  ///\n  /// @return true if the querying grid exists, else false\n  virtual bool getNormal(const Eigen::Vector3f& pos, Eigen::Vector3f* normal) const = 0;\n\n  /// @brief get the eigen value of a grid specified by a position\n  ///\n  /// @param[in] pos the point which the querying grid contains\n  /// @param[out] cov stores the eigen value got\n  ///\n  /// @return true if the querying grid exists, else false\n  virtual bool getEigenvalue(const Eigen::Vector3f& pos, Eigen::Vector3f* eigen) const = 0;\n\n  /// @brief get the intensity of a grid specified by a position\n  ///\n  /// @param[in] pos the point which the querying grid contains\n  /// @param[out] cov stores the intensity got\n  ///\n  /// @return true if the querying grid exists, else false\n  virtual bool getIntensity(const Eigen::Vector3f& pos, float* intensity) const = 0;\n};\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/ndt3interface.h"
		}
	}
]
