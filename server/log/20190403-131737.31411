Log file created at: 2019/04/03 13:17:37
Running on machine: mr-pc
Log line format: [IWEF]mmdd hh:mm:ss.uuuuuu threadid file:line] msg
I0403 13:17:37.663317 31411 json_parser.cpp:18] 
[
	1,
	{
		"bufnr" : 1,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/ndt3tile.h",
		"flags" : 
		[
			"-x",
			"c++",
			"-std=c++14",
			"-DvtkIOGeometry_AUTOINIT=\"1(vtkIOMPIParallel)\"",
			"-DvtkRenderingLIC_AUTOINIT=\"1(vtkRenderingParallelLIC)\"",
			"-DROS_PACKAGE_NAME=\\\"gnss_localizer\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-Dloc_io_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/libxml2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/openni2",
			"-I/usr/include/freetype2",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/local/include",
			"-I/usr/include/pcl-1.7",
			"-DROS_PACKAGE_NAME=\\\"gnss\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dlocalization_EXPORTS",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\"rideware_connector\\\"",
			"-I/usr/include/ni",
			"-I/usr/include/x86_64-linux-gnu",
			"-Dv2_mapping_EXPORTS",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-DQT_NO_DEBUG",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DDISABLE_PNG",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DvtkIOSQL_AUTOINIT=\"2(vtkIOMySQL,vtkIOPostgreSQL)\"",
			"-DQT_CORE_LIB",
			"-Dndt_tku_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"localization\\\"",
			"-I/usr/include/eigen3",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/usr/include/python2.7",
			"-I/usr/lib/openmpi/include",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_GUI_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DQT_WIDGETS_LIB",
			"-DvtkRenderingFreeType_AUTOINIT=\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\"",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/tcl",
			"-DvtkIOExodus_AUTOINIT=\"1(vtkIOParallelExodus)\"",
			"-I/usr/include/jsoncpp",
			"-Dpcl_omp_registration_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\"1(vtkIOMPIImage)\"",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DDISABLE_PCAP",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-Dgnss_EXPORTS",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/lib/openmpi/include/openmpi",
			"-DvtkRenderingCore_AUTOINIT=\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingVolume_AUTOINIT=\"1(vtkRenderingVolumeOpenGL)\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-DvtkRenderingContext2D_AUTOINIT=\"1(vtkRenderingContextOpenGL)\"",
			"-Dinertial_nav_EXPORTS",
			"-DUSE_PCL_OPENMP",
			"-DvtkFiltersFlowPaths_AUTOINIT=\"1(vtkFiltersParallelFlowPaths)\"",
			"-Dndt_cpu_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\"lidar_localizer\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include <unordered_map>\n#include <unordered_set>\n\n#include \"common/geometry/se3.h\"\n#include \"common/geometry/so3.h\"\n#include \"common/math/eigen_types.h\"\n#include \"common/math/point_types.h\"\n#include \"sensor_msgs/PointCloud2.h\"\n\n#include \"ndt3interface.h\"\n#include \"tile_data_storage.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass Ndt3TileMulti;\n\nclass Ndt3Tile : public Ndt3Interface {\n public:\n  enum NormalType { Plane = 0, Line };\n\n  friend class Ndt3TileMulti;\n\n  /// @brief construct a Ndt3Tile given grid_size\n  Ndt3Tile(float grid_size);\n\n  /// @brief construct a Ndt3Tile given grid_size and storage\n  Ndt3Tile(float grid_size, std::shared_ptr<TileDataStorage> storage);\n\n  /// @brief implemention of the Ndt3Interface::getMeans\n  std::shared_ptr<MapMatrixArray> getMeans() const override;\n\n  /// @brief implemention of the Ndt3Interface::getCovariances\n  std::shared_ptr<MapMatrixArray> getCovariances() const override;\n\n  /// @brief implemention of the Ndt3Interface::getCounts\n  std::shared_ptr<MapMatrixArray> getCounts() const override;\n\n  /// @brief implemention of the Ndt3Interface::getScales\n  std::shared_ptr<MapMatrixArray> getScales() const override;\n\n  /// @brief implemention of the Ndt3Interface::getNormals\n  std::shared_ptr<MapMatrixArray> getNormals() const override;\n\n  /// @brief implemention of the Ndt3Interface::getEigenvalues\n  std::shared_ptr<MapMatrixArray> getEigenvalues() const override;\n\n  /// @brief implemention of the Ndt3Interface::getIntensities\n  std::shared_ptr<MapMatrixArray> getIntensities() const override;\n\n  /// @brief implemention of the Ndt3Interface::getMean\n  bool getMean(const Eigen::Vector3f& pos, Eigen::Vector3f* mean) const override;\n\n  /// @brief implemention of the Ndt3Interface::getCovariance\n  bool getCovariance(const Eigen::Vector3f& pos, Eigen::Matrix3f* cov) const override;\n\n  /// @brief implemention of the Ndt3Interface::getCount\n  bool getCount(const Eigen::Vector3f& pos, float* count) const override;\n\n  /// @brief implemention of the Ndt3Interface::getScale\n  bool getScale(const Eigen::Vector3f& pos, float* scale) const override;\n\n  /// @brief implemention of the Ndt3Interface::getNormal\n  bool getNormal(const Eigen::Vector3f& pos, Eigen::Vector3f* normal) const override;\n\n  /// @brief implemention of the Ndt3Interface::getEigenvalue\n  bool getEigenvalue(const Eigen::Vector3f& pos, Eigen::Vector3f* eigen) const override;\n\n  /// @brief implemention of the Ndt3Interface::getIntensity\n  bool getIntensity(const Eigen::Vector3f& pos, float* intensity) const override;\n\n  /// @brief add a sample\n  ///\n  /// @param sample[in] sample contains x,y,z,intensity\n  void addSample(const common::PointXYZI& sample);\n\n  /// @brief add(merge) a already exist gaussian distribution\n  ///\n  /// @param mean[in] position mean\n  /// @param covariance[in] position covariance\n  /// @param count[in] number of sample\n  /// @param intensity[in] average intensity\n  void addGaussian(const Eigen::Vector3f& mean, const Eigen::Matrix3f& covariance, int count,\n                   float intensity);\n\n  /// @brief Deserialize from protobuf string\n  ///\n  /// @param packeded_string[in] store the serialized string\n  ///\n  /// @return true on succeed, else false\n  bool unpackFromString(const std::string& packeded_string);\n\n  /// @brief Serialize to protobuf string\n  ///\n  /// @param packed_string[out] store the serialized string\n  ///\n  /// @return true on succeed, else false\n  bool packToString(std::string* packed_string) const;\n\n  /// @brief build the grid_id to index mapping\n  ///\n  /// @return true on succeed, else false\n  // bool buildGridIndexMapping();\n\n  /// @brief\n  ///\n  /// @param sensor_noise_var\n  void computeAllNormalsAndEigenvalues(double sensor_noise_var);\n\n  /// @brief\n  ///\n  /// @param sensor_noise_var\n  void computeAllPrincipalAxisAndEigenvalues(double sensor_noise_var);\n\n  /// @brief\n  ///\n  /// @param Tx_MP_V\n  /// @param radius\n  void resetRegion(const common::geometry::SE3& Tx_MP_V, double radius);\n\n  /// @brief get the internal storage\n  ///\n  /// @return the internal storage got\n  std::shared_ptr<const TileDataStorage> getStorage() { return storage_; }\n\n  /// @brief copy from other Ndt3Tile\n  ///\n  /// @param copy_data[in] the other Ndt3Tile\n  void copy(Ndt3Tile* copy_data) const;\n\n  /// @brief copy from other Ndt3Tile in specific region\n  ///\n  /// @param Tx[in] specify the region center\n  /// @param radius[in] specify the region range\n  /// @param copy_data[in] the other Ndt3Tile\n  void copyAndTransform(const common::geometry::SE3& Tx, double radius, Ndt3Tile* copy_data) const;\n\n  /* temporary comment out for compilation\n  bool toRosMsgPointCloud2(const std::string& frame, const Time& time,\n                           sensor_msgs::PointCloud2* point_cloud,\n                           const geometry::SE3& Tx = geometry::SE3()) const;\n                           */\n\n private:\n  TileDataStorage::GridID getGridID(const Eigen::Vector3f& pos) const;\n\n  TileDataStorage::GridID getGridID(const Eigen::Vector3f& pos, float scale) const;\n\n  bool getIndex(const Eigen::Vector3f& pos, int* index) const;\n\n  TileDataStorage::MapMatrix getMeansInner() const;\n\n  TileDataStorage::MapMatrix getCovariancesInner() const;\n\n  TileDataStorage::MapMatrix getCountsInner() const;\n\n  TileDataStorage::MapMatrix getScalesInner() const;\n\n  TileDataStorage::MapMatrix getNormalsInner() const;\n\n  TileDataStorage::MapMatrix getEigenvaluesInner() const;\n\n  TileDataStorage::MapMatrix getIntensitiesInner() const;\n\n  Eigen::Vector3f getMean(int index) const;\n\n  Eigen::Matrix3f getCovariance(int index) const;\n\n  float getCount(int index) const;\n\n  float getScale(int index) const;\n\n  Eigen::Vector3f getNormal(int index) const;\n\n  Eigen::Vector3f getEigenvalue(int index) const;\n\n  float getIntensity(int index) const;\n\n  bool setMean(int index, const Eigen::Vector3f& mean);\n\n  bool setCovariance(int index, const Eigen::Matrix3f& covariance);\n\n  bool setCount(int index, float count);\n\n  bool setScale(int index, float scale);\n\n  bool setNormal(int index, const Eigen::Vector3f& normal);\n\n  bool setEigenvalue(int index, const Eigen::Vector3f& eigenvalue);\n\n  bool setIntensity(int index, float intensity);\n\n  void initializeGaussian(const Eigen::Vector3f& mean, const Eigen::Matrix3f& covariance, int count,\n                          float scale);\n\n  void computeNormalAndEigenvalues(int index, double sensor_noise_var,\n                                   NormalType normal_type = Plane);\n\n  static const std::vector<TileDataStorage::NameSizePair> kChannelNameAndSize;\n\n  static const int kTotalNumberOfRows;\n\n  std::unordered_set<int> indices_to_compute_normal_;\n\n  std::shared_ptr<TileDataStorage> storage_;\n\n  float grid_size_;\n};\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/map/ndt3tile.h"
		}
	}
]
