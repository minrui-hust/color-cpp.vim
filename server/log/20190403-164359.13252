Log file created at: 2019/04/03 16:43:59
Running on machine: mr-pc
Log line format: [IWEF]mmdd hh:mm:ss.uuuuuu threadid file:line] msg
I0403 16:43:59.123646 13252 json_parser.cpp:18] 
[
	1,
	{
		"bufnr" : 3,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/local_database.h",
		"flags" : 
		[
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/include/hdf5/openmpi",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-Dndt_tku_EXPORTS",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-DUSE_PCL_OPENMP",
			"-Dsensor_fusion_EXPORTS",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-I/home/mr/Workspace/loc/src/v2",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/usr/include/pcl-1.7",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-DDISABLE_PCAP",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-Dinertial_nav_EXPORTS",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-DDISABLE_PNG",
			"-DQT_WIDGETS_LIB",
			"-I/usr/include/jsoncpp",
			"-DQT_GUI_LIB",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-I/opt/ros/kinetic/include",
			"-DQT_NO_DEBUG",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-I/usr/include/vtk-6.2",
			"-I/usr/include/eigen3",
			"-Dv2_mapping_EXPORTS",
			"-Dloc_io_EXPORTS",
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/usr/local/include",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-Dgnss_EXPORTS",
			"-Dloc_geometry_EXPORTS",
			"-I/usr/include/python2.7",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/libxml2",
			"-I/usr/include/openni2",
			"-I/usr/include/ni",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-Dndt_cpu_EXPORTS",
			"-I/usr/include/tcl",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-Dlocalization_EXPORTS",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-DQT_CORE_LIB",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-I/usr/include/freetype2",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include <string>\n\nnamespace allride {\nnamespace mapping {\n\nclass LocalDatabase {\n public:\n  enum MODE { READ, WRITE, NEW };\n\n  /// @brief open the database\n  /// @param[in] the file path of the database file\n  /// @param[in] open mode\n  /// @return true on succeed, else false\n  virtual bool open(const std::string& path, MODE mode) = 0;\n\n  /// @brief check whether database is opened\n  /// @return true on opened, else false\n  virtual bool isOpen() = 0;\n\n  /// @brief close the database\n  /// @return true on succeed, else false\n  virtual bool close() = 0;\n\n  /// @brief get value from database\n  /// @param[in] key the key of the value to be got\n  /// @param[out] value stores the value got\n  /// @return true on succeed, else false\n  virtual bool get(const std::string& key, std::string* value) = 0;\n\n  /// @brief put key-value pair into database\n  /// @param[in] key the key of key-value pair\n  /// @param[out] value the value of key-value pair\n  /// @return true on succeed, else false\n  virtual bool put(const std::string& key, const std::string& value) = 0;\n\n  /// @brief check whether a key exist in database\n  /// @param[in] key the key to check\n  /// @return true on exist, else false\n  virtual bool exist(const std::string& key) = 0;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/local_database.h"
		}
	}
]
