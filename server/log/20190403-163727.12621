Log file created at: 2019/04/03 16:37:27
Running on machine: mr-pc
Log line format: [IWEF]mmdd hh:mm:ss.uuuuuu threadid file:line] msg
I0403 16:37:27.532742 12621 json_parser.cpp:18] 
[
	1,
	{
		"bufnr" : 1,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/lmdb_database.h",
		"flags" : 
		[
			"-I/usr/local/include",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/include/pcl-1.7",
			"-I/opt/ros/kinetic/include",
			"-Dloc_geometry_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-Dv2_mapping_EXPORTS",
			"-DDISABLE_PNG",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-Dloc_io_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-DUSE_PCL_OPENMP",
			"-DQT_CORE_LIB",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-I/usr/include/libxml2",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/usr/include/ni",
			"-DDISABLE_PCAP",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-I/usr/include/jsoncpp",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dinertial_nav_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-Dndt_tku_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_NO_DEBUG",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/python2.7",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-I/usr/include/eigen3",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dndt_cpu_EXPORTS",
			"-Dgnss_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-I/home/mr/Workspace/loc/src/v2",
			"-Dlocalization_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/usr/include/freetype2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-DQT_WIDGETS_LIB",
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/usr/include/openni2",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include <string>\n\n#include \"local_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass LmdbDatabase : public LocalDatabase {\n public:\n  /// @brief implemention of LocalDatabase::open\n  /// @see LocalDatabase for more infomation\n  bool open(const std::string& path, LocalDatabase::MODE mode) override;\n\n  /// @brief implemention of LocalDatabase::isOpen\n  /// @see LocalDatabase for more infomation\n  bool isOpen() override;\n\n  /// @brief implemention of LocalDatabase::close\n  /// @see LocalDatabase for more infomation\n  bool close() override;\n\n  /// @brief implemention of LocalDatabase::get\n  /// @see LocalDatabase for more infomation\n  bool get(const std::string& key, std::string* value) override;\n\n  /// @brief implemention of LocalDatabase::put\n  /// @see LocalDatabase for more infomation\n  bool put(const std::string& key, const std::string& value) override;\n\n  /// @brief implemention of LocalDatabase::exist\n  /// @see LocalDatabase for more infomation\n  bool exist(const std::string& key) override;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/lmdb_database.h"
		}
	}
]
I0403 16:37:41.961225 12621 json_parser.cpp:18] 
[
	2,
	{
		"bufnr" : 1,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/lmdb_database.h",
		"flags" : 
		[
			"-I/usr/local/include",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/include/pcl-1.7",
			"-I/opt/ros/kinetic/include",
			"-Dloc_geometry_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-Dv2_mapping_EXPORTS",
			"-DDISABLE_PNG",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-Dloc_io_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-DUSE_PCL_OPENMP",
			"-DQT_CORE_LIB",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-I/usr/include/libxml2",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/usr/include/ni",
			"-DDISABLE_PCAP",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-I/usr/include/jsoncpp",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dinertial_nav_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-Dndt_tku_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_NO_DEBUG",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/python2.7",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-I/usr/include/eigen3",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dndt_cpu_EXPORTS",
			"-Dgnss_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-I/home/mr/Workspace/loc/src/v2",
			"-Dlocalization_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/usr/include/freetype2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-DQT_WIDGETS_LIB",
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/usr/include/openni2",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include <string>\n\n#include \"local_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass LmdbDatabase : public LocalDatabase {\n public:\n  /// @brief implemention of LocalDatabase::open\n  /// @see LocalDatabase for more infomation\n  bool open(const std::string& path, LocalDatabase::MODE mode) override;\n\n  /// @brief implemention of LocalDatabase::isOpen\n  /// @see LocalDatabase for more infomation\n  bool isOpen() override;\n\n  /// @brief implemention of LocalDatabase::close\n  /// @see LocalDatabase for more infomation\n  bool close() override;\n\n  /// @brief implemention of LocalDatabase::get\n  /// @see LocalDatabase for more infomation\n  bool get(const std::string& key, std::string* value) override;\n\n  /// @brief implemention of LocalDatabase::put\n  /// @see LocalDatabase for more infomation\n  bool put(const std::string& key, const std::string& value) override;\n\n  /// @brief implemention of LocalDatabase::exist\n  /// @see LocalDatabase for more infomation\n  bool exist(const std::string& key) override;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/lmdb_database.h"
		}
	}
]
I0403 16:37:48.291435 12621 json_parser.cpp:18] 
[
	3,
	{
		"bufnr" : 1,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/lmdb_database.h",
		"flags" : 
		[
			"-I/usr/local/include",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/include/pcl-1.7",
			"-I/opt/ros/kinetic/include",
			"-Dloc_geometry_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-Dv2_mapping_EXPORTS",
			"-DDISABLE_PNG",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-Dloc_io_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-DUSE_PCL_OPENMP",
			"-DQT_CORE_LIB",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-I/usr/include/libxml2",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/usr/include/ni",
			"-DDISABLE_PCAP",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-I/usr/include/jsoncpp",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dinertial_nav_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-Dndt_tku_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_NO_DEBUG",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/python2.7",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-I/usr/include/eigen3",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dndt_cpu_EXPORTS",
			"-Dgnss_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-I/home/mr/Workspace/loc/src/v2",
			"-Dlocalization_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/usr/include/freetype2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-DQT_WIDGETS_LIB",
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/usr/include/openni2",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include <string>\n\n#include \"local_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass LmdbDatabase : public LocalDatabase {\n public:\n  /// @brief implemention of LocalDatabase::open\n  /// @see LocalDatabase for more infomation\n  bool open(const std::string& path, LocalDatabase::MODE mode) override;\n\n  /// @brief implemention of LocalDatabase::isOpen\n  /// @see LocalDatabase for more infomation\n  bool isOpen() override;\n\n  /// @brief implemention of LocalDatabase::close\n  /// @see LocalDatabase for more infomation\n  bool close() override;\n\n  /// @brief implemention of LocalDatabase::get\n  /// @see LocalDatabase for more infomation\n  bool get(const std::string& key, std::string* value) override;\n\n  /// @brief implemention of LocalDatabase::put\n  /// @see LocalDatabase for more infomation\n  bool put(const std::string& key, const std::string& value) override;\n\n  /// @brief implemention of LocalDatabase::exist\n  /// @see LocalDatabase for more infomation\n  bool exist(const std::string& key) override;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/lmdb_database.h"
		}
	}
]
I0403 16:37:49.982431 12621 json_parser.cpp:18] 
[
	4,
	{
		"bufnr" : 1,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/lmdb_database.h",
		"flags" : 
		[
			"-I/usr/local/include",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/include/pcl-1.7",
			"-I/opt/ros/kinetic/include",
			"-Dloc_geometry_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-Dv2_mapping_EXPORTS",
			"-DDISABLE_PNG",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-Dloc_io_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-DUSE_PCL_OPENMP",
			"-DQT_CORE_LIB",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-I/usr/include/libxml2",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/usr/include/ni",
			"-DDISABLE_PCAP",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-I/usr/include/jsoncpp",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dinertial_nav_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-Dndt_tku_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_NO_DEBUG",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/python2.7",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-I/usr/include/eigen3",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dndt_cpu_EXPORTS",
			"-Dgnss_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-I/home/mr/Workspace/loc/src/v2",
			"-Dlocalization_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/usr/include/freetype2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-DQT_WIDGETS_LIB",
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/usr/include/openni2",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include <string>\n\n#include \"local_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass LmdbDatabase : public LocalDatabase {\n public:\n  /// @brief implemention of LocalDatabase::open\n  /// @see LocalDatabase for more infomation\n  bool open(const std::string& path, LocalDatabase::MODE mode) override;\n\n  /// @brief implemention of LocalDatabase::isOpen\n  /// @see LocalDatabase for more infomation\n  bool isOpen() override;\n\n  /// @brief implemention of LocalDatabase::close\n  /// @see LocalDatabase for more infomation\n  bool close() override;\n\n  /// @brief implemention of LocalDatabase::get\n  /// @see LocalDatabase for more infomation\n  bool get(const std::string& key, std::string* value) override;\n\n  /// @brief implemention of LocalDatabase::put\n  /// @see LocalDatabase for more infomation\n  bool put(const std::string& key, const std::string& value) override;\n\n  /// @brief implemention of LocalDatabase::exist\n  /// @see LocalDatabase for more infomation\n  bool exist(const std::string& key) override;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/lmdb_database.h"
		}
	}
]
I0403 16:37:52.762244 12621 json_parser.cpp:18] 
[
	5,
	{
		"bufnr" : 1,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/lmdb_database.h",
		"flags" : 
		[
			"-I/usr/local/include",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/include/pcl-1.7",
			"-I/opt/ros/kinetic/include",
			"-Dloc_geometry_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-Dv2_mapping_EXPORTS",
			"-DDISABLE_PNG",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-Dloc_io_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-DUSE_PCL_OPENMP",
			"-DQT_CORE_LIB",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-I/usr/include/libxml2",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/usr/include/ni",
			"-DDISABLE_PCAP",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-I/usr/include/jsoncpp",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dinertial_nav_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-Dndt_tku_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_NO_DEBUG",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/python2.7",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-I/usr/include/eigen3",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dndt_cpu_EXPORTS",
			"-Dgnss_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-I/home/mr/Workspace/loc/src/v2",
			"-Dlocalization_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/usr/include/freetype2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-DQT_WIDGETS_LIB",
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/usr/include/openni2",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include <string>\n\n#include \"local_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass LmdbDatabase : public LocalDatabase {\n public:\n  /// @brief implemention of LocalDatabase::open\n  /// @see LocalDatabase for more infomation\n  bool open(const std::string& path, LocalDatabase::MODE mode) override;\n\n  /// @brief implemention of LocalDatabase::isOpen\n  /// @see LocalDatabase for more infomation\n  bool isOpen() override;\n\n  /// @brief implemention of LocalDatabase::close\n  /// @see LocalDatabase for more infomation\n  bool close() override;\n\n  /// @brief implemention of LocalDatabase::get\n  /// @see LocalDatabase for more infomation\n  bool get(const std::string& key, std::string* value) override;\n\n  /// @brief implemention of LocalDatabase::put\n  /// @see LocalDatabase for more infomation\n  bool put(const std::string& key, const std::string& value) override;\n\n  /// @brief implemention of LocalDatabase::exist\n  /// @see LocalDatabase for more infomation\n  bool exist(const std::string& key) override;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/lmdb_database.h"
		}
	}
]
I0403 16:37:54.566402 12621 json_parser.cpp:18] 
[
	6,
	{
		"bufnr" : 1,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/lmdb_database.h",
		"flags" : 
		[
			"-I/usr/local/include",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/include/pcl-1.7",
			"-I/opt/ros/kinetic/include",
			"-Dloc_geometry_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-Dv2_mapping_EXPORTS",
			"-DDISABLE_PNG",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-Dloc_io_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-DUSE_PCL_OPENMP",
			"-DQT_CORE_LIB",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-I/usr/include/libxml2",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/usr/include/ni",
			"-DDISABLE_PCAP",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-I/usr/include/jsoncpp",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dinertial_nav_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-Dndt_tku_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_NO_DEBUG",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/python2.7",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-I/usr/include/eigen3",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dndt_cpu_EXPORTS",
			"-Dgnss_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-I/home/mr/Workspace/loc/src/v2",
			"-Dlocalization_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/usr/include/freetype2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-DQT_WIDGETS_LIB",
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/usr/include/openni2",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include <string>\n\n#include \"local_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass LmdbDatabase : public LocalDatabase {\n public:\n  /// @brief implemention of LocalDatabase::open\n  /// @see LocalDatabase for more infomation\n  bool open(const std::string& path, LocalDatabase::MODE mode) override;\n\n  /// @brief implemention of LocalDatabase::isOpen\n  /// @see LocalDatabase for more infomation\n  bool isOpen() override;\n\n  /// @brief implemention of LocalDatabase::close\n  /// @see LocalDatabase for more infomation\n  bool close() override;\n\n  /// @brief implemention of LocalDatabase::get\n  /// @see LocalDatabase for more infomation\n  bool get(const std::string& key, std::string* value) override;\n\n  /// @brief implemention of LocalDatabase::put\n  /// @see LocalDatabase for more infomation\n  bool put(const std::string& key, const std::string& value) override;\n\n  /// @brief implemention of LocalDatabase::exist\n  /// @see LocalDatabase for more infomation\n  bool exist(const std::string& key) override;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/lmdb_database.h"
		}
	}
]
I0403 16:38:01.512485 12621 json_parser.cpp:18] 
[
	7,
	{
		"bufnr" : 1,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/lmdb_database.h",
		"flags" : 
		[
			"-I/usr/local/include",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/include/pcl-1.7",
			"-I/opt/ros/kinetic/include",
			"-Dloc_geometry_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-Dv2_mapping_EXPORTS",
			"-DDISABLE_PNG",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-Dloc_io_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-DUSE_PCL_OPENMP",
			"-DQT_CORE_LIB",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-I/usr/include/libxml2",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/usr/include/ni",
			"-DDISABLE_PCAP",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-I/usr/include/jsoncpp",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dinertial_nav_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-Dndt_tku_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_NO_DEBUG",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/python2.7",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-I/usr/include/eigen3",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dndt_cpu_EXPORTS",
			"-Dgnss_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-I/home/mr/Workspace/loc/src/v2",
			"-Dlocalization_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/usr/include/freetype2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-DQT_WIDGETS_LIB",
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/usr/include/openni2",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include <string>\n\n#include \"local_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass LmdbDatabase : public LocalDatabase {\n public:\n  /// @brief implemention of LocalDatabase::open\n  /// @see LocalDatabase for more infomation\n  bool open(const std::string& path, LocalDatabase::MODE mode) override;\n\n  /// @brief implemention of LocalDatabase::isOpen\n  /// @see LocalDatabase for more infomation\n  bool isOpen() override;\n\n  /// @brief implemention of LocalDatabase::close\n  /// @see LocalDatabase for more infomation\n  bool close() override;\n\n  /// @brief implemention of LocalDatabase::get\n  /// @see LocalDatabase for more infomation\n  bool get(const std::string& key, std::string* value) override;\n\n  /// @brief implemention of LocalDatabase::put\n  /// @see LocalDatabase for more infomation\n  bool put(const std::string& key, const std::string& value) override;\n\n  /// @brief implemention of LocalDatabase::exist\n  /// @see LocalDatabase for more infomation\n  bool exist(const std::string& key) override;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/lmdb_database.h"
		}
	}
]
I0403 16:38:01.649166 12621 json_parser.cpp:18] 
[
	8,
	{
		"bufnr" : 4,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/local_database.h",
		"flags" : 
		[
			"-I/usr/local/include",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/include/pcl-1.7",
			"-I/opt/ros/kinetic/include",
			"-Dloc_geometry_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-Dv2_mapping_EXPORTS",
			"-DDISABLE_PNG",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-Dloc_io_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-DUSE_PCL_OPENMP",
			"-DQT_CORE_LIB",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-I/usr/include/libxml2",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/usr/include/ni",
			"-DDISABLE_PCAP",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-I/usr/include/jsoncpp",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dinertial_nav_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-Dndt_tku_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_NO_DEBUG",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/python2.7",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-I/usr/include/eigen3",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dndt_cpu_EXPORTS",
			"-Dgnss_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-I/home/mr/Workspace/loc/src/v2",
			"-Dlocalization_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/usr/include/freetype2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-DQT_WIDGETS_LIB",
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/usr/include/openni2",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include <string>\n\nnamespace allride {\nnamespace mapping {\n\nclass LocalDatabase {\n public:\n  enum MODE { READ, WRITE, NEW };\n\n  /// @brief open the database\n  /// @param[in] the file path of the database file\n  /// @param[in] open mode\n  /// @return true on succeed, else false\n  virtual bool open(const std::string& path, MODE mode) = 0;\n\n  /// @brief check whether database is opened\n  /// @return true on opened, else false\n  virtual bool isOpen() = 0;\n\n  /// @brief close the database\n  /// @return true on succeed, else false\n  virtual bool close() = 0;\n\n  /// @brief get value from database\n  /// @param[in] key the key of the value to be got\n  /// @param[out] value stores the value got\n  /// @return true on succeed, else false\n  virtual bool get(const std::string& key, std::string* value) = 0;\n\n  /// @brief put key-value pair into database\n  /// @param[in] key the key of key-value pair\n  /// @param[out] value the value of key-value pair\n  /// @return true on succeed, else false\n  virtual bool put(const std::string& key, const std::string& value) = 0;\n\n  /// @brief check whether a key exist in database\n  /// @param[in] key the key to check\n  /// @return true on exist, else false\n  virtual bool exist(const std::string& key) = 0;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/local_database.h"
		}
	}
]
I0403 16:38:06.650055 12621 json_parser.cpp:18] 
[
	9,
	{
		"bufnr" : 4,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/local_database.h",
		"flags" : 
		[
			"-I/usr/local/include",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/include/pcl-1.7",
			"-I/opt/ros/kinetic/include",
			"-Dloc_geometry_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-Dv2_mapping_EXPORTS",
			"-DDISABLE_PNG",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-Dloc_io_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-DUSE_PCL_OPENMP",
			"-DQT_CORE_LIB",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-I/usr/include/libxml2",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/usr/include/ni",
			"-DDISABLE_PCAP",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-I/usr/include/jsoncpp",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dinertial_nav_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-Dndt_tku_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_NO_DEBUG",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/python2.7",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-I/usr/include/eigen3",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dndt_cpu_EXPORTS",
			"-Dgnss_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-I/home/mr/Workspace/loc/src/v2",
			"-Dlocalization_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/usr/include/freetype2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-DQT_WIDGETS_LIB",
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/usr/include/openni2",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include <string>\n\nnamespace allride {\nnamespace mapping {\n\nclass LocalDatabase {\n public:\n  enum MODE { READ, WRITE, NEW };\n\n  /// @brief open the database\n  /// @param[in] the file path of the database file\n  /// @param[in] open mode\n  /// @return true on succeed, else false\n  virtual bool open(const std::string& path, MODE mode) = 0;\n\n  /// @brief check whether database is opened\n  /// @return true on opened, else false\n  virtual bool isOpen() = 0;\n\n  /// @brief close the database\n  /// @return true on succeed, else false\n  virtual bool close() = 0;\n\n  /// @brief get value from database\n  /// @param[in] key the key of the value to be got\n  /// @param[out] value stores the value got\n  /// @return true on succeed, else false\n  virtual bool get(const std::string& key, std::string* value) = 0;\n\n  /// @brief put key-value pair into database\n  /// @param[in] key the key of key-value pair\n  /// @param[out] value the value of key-value pair\n  /// @return true on succeed, else false\n  virtual bool put(const std::string& key, const std::string& value) = 0;\n\n  /// @brief check whether a key exist in database\n  /// @param[in] key the key to check\n  /// @return true on exist, else false\n  virtual bool exist(const std::string& key) = 0;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/local_database.h"
		}
	}
]
I0403 16:38:06.704607 12621 json_parser.cpp:18] 
[
	10,
	{
		"bufnr" : 1,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/lmdb_database.h",
		"flags" : 
		[
			"-I/usr/local/include",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/include/pcl-1.7",
			"-I/opt/ros/kinetic/include",
			"-Dloc_geometry_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-Dv2_mapping_EXPORTS",
			"-DDISABLE_PNG",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-Dloc_io_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-DUSE_PCL_OPENMP",
			"-DQT_CORE_LIB",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-I/usr/include/libxml2",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/usr/include/ni",
			"-DDISABLE_PCAP",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-I/usr/include/jsoncpp",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dinertial_nav_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-Dndt_tku_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_NO_DEBUG",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/python2.7",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-I/usr/include/eigen3",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dndt_cpu_EXPORTS",
			"-Dgnss_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-I/home/mr/Workspace/loc/src/v2",
			"-Dlocalization_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/usr/include/freetype2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-DQT_WIDGETS_LIB",
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/usr/include/openni2",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include <string>\n\n#include \"local_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass LmdbDatabase : public LocalDatabase {\n public:\n  /// @brief implemention of LocalDatabase::open\n  /// @see LocalDatabase for more infomation\n  bool open(const std::string& path, LocalDatabase::MODE mode) override;\n\n  /// @brief implemention of LocalDatabase::isOpen\n  /// @see LocalDatabase for more infomation\n  bool isOpen() override;\n\n  /// @brief implemention of LocalDatabase::close\n  /// @see LocalDatabase for more infomation\n  bool close() override;\n\n  /// @brief implemention of LocalDatabase::get\n  /// @see LocalDatabase for more infomation\n  bool get(const std::string& key, std::string* value) override;\n\n  /// @brief implemention of LocalDatabase::put\n  /// @see LocalDatabase for more infomation\n  bool put(const std::string& key, const std::string& value) override;\n\n  /// @brief implemention of LocalDatabase::exist\n  /// @see LocalDatabase for more infomation\n  bool exist(const std::string& key) override;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/lmdb_database.h"
		}
	}
]
I0403 16:38:14.669464 12621 json_parser.cpp:18] 
[
	11,
	{
		"bufnr" : 1,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/lmdb_database.h",
		"flags" : 
		[
			"-I/usr/local/include",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/include/pcl-1.7",
			"-I/opt/ros/kinetic/include",
			"-Dloc_geometry_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-Dv2_mapping_EXPORTS",
			"-DDISABLE_PNG",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-Dloc_io_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-DUSE_PCL_OPENMP",
			"-DQT_CORE_LIB",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-I/usr/include/libxml2",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/usr/include/ni",
			"-DDISABLE_PCAP",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-I/usr/include/jsoncpp",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dinertial_nav_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-Dndt_tku_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_NO_DEBUG",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/python2.7",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-I/usr/include/eigen3",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dndt_cpu_EXPORTS",
			"-Dgnss_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-I/home/mr/Workspace/loc/src/v2",
			"-Dlocalization_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/usr/include/freetype2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-DQT_WIDGETS_LIB",
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/usr/include/openni2",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include <string>\n\n#include \"local_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass LmdbDatabase : public LocalDatabase {\n public:\n  /// @brief implemention of LocalDatabase::open\n  /// @see LocalDatabase for more infomation\n  bool open(const std::string& path, LocalDatabase::MODE mode) override;\n\n  /// @brief implemention of LocalDatabase::isOpen\n  /// @see LocalDatabase for more infomation\n  bool isOpen() override;\n\n  /// @brief implemention of LocalDatabase::close\n  /// @see LocalDatabase for more infomation\n  bool close() override;\n\n  /// @brief implemention of LocalDatabase::get\n  /// @see LocalDatabase for more infomation\n  bool get(const std::string& key, std::string* value) override;\n\n  /// @brief implemention of LocalDatabase::put\n  /// @see LocalDatabase for more infomation\n  bool put(const std::string& key, const std::string& value) override;\n\n  /// @brief implemention of LocalDatabase::exist\n  /// @see LocalDatabase for more infomation\n  bool exist(const std::string& key) override;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/lmdb_database.h"
		}
	}
]
I0403 16:38:16.386121 12621 json_parser.cpp:18] 
[
	12,
	{
		"bufnr" : 1,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/lmdb_database.h",
		"flags" : 
		[
			"-I/usr/local/include",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/include/pcl-1.7",
			"-I/opt/ros/kinetic/include",
			"-Dloc_geometry_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-Dv2_mapping_EXPORTS",
			"-DDISABLE_PNG",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-Dloc_io_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-DUSE_PCL_OPENMP",
			"-DQT_CORE_LIB",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-I/usr/include/libxml2",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/usr/include/ni",
			"-DDISABLE_PCAP",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-I/usr/include/jsoncpp",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dinertial_nav_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-Dndt_tku_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_NO_DEBUG",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/python2.7",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-I/usr/include/eigen3",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dndt_cpu_EXPORTS",
			"-Dgnss_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-I/home/mr/Workspace/loc/src/v2",
			"-Dlocalization_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/usr/include/freetype2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-DQT_WIDGETS_LIB",
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/usr/include/openni2",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include <string>\n\n#include \"local_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass LmdbDatabase : public LocalDatabase {\n public:\n  /// @brief implemention of LocalDatabase::open\n  /// @see LocalDatabase for more infomation\n  bool open(const std::string& path, LocalDatabase::MODE mode) override;\n\n  /// @brief implemention of LocalDatabase::isOpen\n  /// @see LocalDatabase for more infomation\n  bool isOpen() override;\n\n  /// @brief implemention of LocalDatabase::close\n  /// @see LocalDatabase for more infomation\n  bool close() override;\n\n  /// @brief implemention of LocalDatabase::get\n  /// @see LocalDatabase for more infomation\n  bool get(const std::string& key, std::string* value) override;\n\n  /// @brief implemention of LocalDatabase::put\n  /// @see LocalDatabase for more infomation\n  bool put(const std::string& key, const std::string& value) override;\n\n  /// @brief implemention of LocalDatabase::exist\n  /// @see LocalDatabase for more infomation\n  bool exist(const std::string& key) override;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/lmdb_database.h"
		}
	}
]
I0403 16:38:19.157431 12621 json_parser.cpp:18] 
[
	13,
	{
		"bufnr" : 1,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/lmdb_database.h",
		"flags" : 
		[
			"-I/usr/local/include",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/include/pcl-1.7",
			"-I/opt/ros/kinetic/include",
			"-Dloc_geometry_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-Dv2_mapping_EXPORTS",
			"-DDISABLE_PNG",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-Dloc_io_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-DUSE_PCL_OPENMP",
			"-DQT_CORE_LIB",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-I/usr/include/libxml2",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/usr/include/ni",
			"-DDISABLE_PCAP",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-I/usr/include/jsoncpp",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dinertial_nav_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-Dndt_tku_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_NO_DEBUG",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/python2.7",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-I/usr/include/eigen3",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dndt_cpu_EXPORTS",
			"-Dgnss_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-I/home/mr/Workspace/loc/src/v2",
			"-Dlocalization_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/usr/include/freetype2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-DQT_WIDGETS_LIB",
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/usr/include/openni2",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include <string>\n\n#include \"local_database.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass LmdbDatabase : public LocalDatabase {\n public:\n  /// @brief implemention of LocalDatabase::open\n  /// @see LocalDatabase for more infomation\n  bool open(const std::string& path, LocalDatabase::MODE mode) override;\n\n  /// @brief implemention of LocalDatabase::isOpen\n  /// @see LocalDatabase for more infomation\n  bool isOpen() override;\n\n  /// @brief implemention of LocalDatabase::close\n  /// @see LocalDatabase for more infomation\n  bool close() override;\n\n  /// @brief implemention of LocalDatabase::get\n  /// @see LocalDatabase for more infomation\n  bool get(const std::string& key, std::string* value) override;\n\n  /// @brief implemention of LocalDatabase::put\n  /// @see LocalDatabase for more infomation\n  bool put(const std::string& key, const std::string& value) override;\n\n  /// @brief implemention of LocalDatabase::exist\n  /// @see LocalDatabase for more infomation\n  bool exist(const std::string& key) override;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/lmdb_database.h"
		}
	}
]
I0403 16:38:25.708639 12621 json_parser.cpp:18] 
[
	14,
	{
		"bufnr" : 7,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/intensity_map_builder.cpp",
		"flags" : 
		[
			"-I/usr/local/include",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/include/pcl-1.7",
			"-I/opt/ros/kinetic/include",
			"-Dloc_geometry_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-Dv2_mapping_EXPORTS",
			"-DDISABLE_PNG",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-Dloc_io_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-DUSE_PCL_OPENMP",
			"-DQT_CORE_LIB",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-I/usr/include/libxml2",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/usr/include/ni",
			"-DDISABLE_PCAP",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-I/usr/include/jsoncpp",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dinertial_nav_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-Dndt_tku_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_NO_DEBUG",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/python2.7",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-I/usr/include/eigen3",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dndt_cpu_EXPORTS",
			"-Dgnss_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-I/home/mr/Workspace/loc/src/v2",
			"-Dlocalization_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/usr/include/freetype2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-DQT_WIDGETS_LIB",
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/usr/include/openni2",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All rights reserved.\n// Authors: Yongjian Zhao (yongjian.zhao@allride.ai)\n\n#include <priority_queue>\n#include <set>\n\n#include \"intensity_map_builder.h\"\n\nvoid ClusterSample::ClusterSample(const ClusterSmaple& other) {\n  this->point_num += other.point_num;\n\n  float other_weight = static_cast<float>(other.point_num) / this->point_num;\n  float this_weight = 1.0f - other_weight;\n\n  this->height = this_weight * this->height + other_weight * other.height;\n  this->intensity = this_weigh * this->intensity + other_weight * other.intensity;\n}\n\nvoid IntensityMapBuilder::buildIntensityMap(const std::string& output_folder) {\n  // To initialize grid2_samples_, each ndt3 grid is one ClusterSample\n  // for each grid2 sample, there are several Cluster\n\n  // height cluster for each grid2_sample\n  for (auto& grid2_smaple : grid2_samples_) {\n    heightCluster(&grid2_smaple.second);\n  }\n\n  // create image acoording to grid2_samples_\n  cv::Mat intensity_image;\n  createImage(&intensity_image);\n\n  // create intensity_map_info according to grid2_samples_\n  /* protoBufType intensity_map_info */\n  createHeightInfo(/*&intensity_map_info*/);\n\n  // save image and intensity_map_info\n  saveIntensityMap(output_folder, intensity_image /*, intensity_map_info*/);\n}\n\nvoid IntensityMapBuilder::heightCluster(std::vector<ClusterSample>* samples) {\n  size_t sample_num = samples->size();\n\n  // make existing_sample_id\n  std::set<size_t> existing_sample_id;\n  for (size_t i = 0; i < sample_num; i++) {\n    existing_sample_id.insert(i);\n  }\n\n  // make distance_queue\n  std::priority_queue<QueueElement, std::vector<QueueElement>, QueueElementCompare> distance_queue;\n  for (size_t i = 0; i < sample_num; i++) {\n    for (size_t j = i + 1; j < sample_num; j++) {\n      float distance = fabs(samples->at(i).height - samples->at(j).height);\n      distance_queue.emplace(distance, i, j);\n    }\n  }\n\n  // cluster\n  const float distance_th = 4.0f;\n  while (true) {\n    // find min_distance between each ClusterSample\n    QueueElement element = distance_queue.top() distance_queue.pop();\n    if (element.distance > distance_th) {\n      break;\n    }\n\n    if (existing_sample_id.count(element.small_id) == 0) {\n      continue;\n    }\n\n    if (existing_sample_id.count(element.big_id) == 0) {\n      continue;\n    }\n\n    // merge two nearest samples\n    samples->at(element.small_id).merge(samples->at(element.big_id));\n    existing_sample_id.erase(element.big_id);\n    sample_num--;\n  }\n\n  if (existing_sample_id.size() != sample_num) {\n    std::cout << \"error: existing_sample_id.size() does not equal to sample_num!\" << std::endl;\n  }\n\n  // save cluster result\n  // need test\n  size_t i = 0;\n  for (size_t id& existing_sample_id) {\n    samples->at<i> = samples->at(id);\n  }\n  samples->resize(sample_num);\n}\n\nvoid IntensityMapBuilder::createImage(cv::Mat* image) {\n  // get necessary information from ndt_map_data_\n  int min_tile_id_x = 0, max_tile_id_x = 10;\n  int min_tile_id_y = 0, max_tile_id_y = 10;\n  float min_height = 0, max_height = 10;\n  float min_intensity = 0, max_intensity = 255;\n\n  int image_width =\n      static_cast<int>((max_tile_id_x - min_tile_id_x + 1) * param_.tile_size / param_.grid_size);\n  int image_height =\n      static_cast<int>((max_tile_id_y - min_tile_id_y + 1) * param_.tile_size / param_.grid_size);\n\n  // make image\n  cv::Mat blank_image = cv::Mat::zeros(image_height, image_width, CV_U8C3);\n  blank_image.copyTo(*image);\n  for (auto grid2_sample : grid2_samples_) {\n    // set pixel value\n  }\n}\n\nvoid IntensityMapBuilder::createHeightInfo(/* protoBufType *intensity_map_info */) {}\n\nbool IntensityMapBuilder::saveIntensityMap(const std::string& output_folder, const cv::Mat& image\n                                           /*const protoBufType *intensity_map_info */) {\n  // check or make output folder\n\n  // save image\n  std::string image_name = output_folder + \"/intensity_image.png\";\n  cv::imwrite(image_name, image);\n\n  // save intensity_map_info\n\n  return true;\n}\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/intensity_map_builder.cpp"
		}
	}
]
I0403 16:38:27.951777 12621 json_parser.cpp:18] 
[
	15,
	{
		"bufnr" : 7,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/intensity_map_builder.cpp",
		"flags" : 
		[
			"-I/usr/local/include",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/include/pcl-1.7",
			"-I/opt/ros/kinetic/include",
			"-Dloc_geometry_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-Dv2_mapping_EXPORTS",
			"-DDISABLE_PNG",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-Dloc_io_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-DUSE_PCL_OPENMP",
			"-DQT_CORE_LIB",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-I/usr/include/libxml2",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/usr/include/ni",
			"-DDISABLE_PCAP",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-I/usr/include/jsoncpp",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dinertial_nav_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-Dndt_tku_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_NO_DEBUG",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/python2.7",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-I/usr/include/eigen3",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dndt_cpu_EXPORTS",
			"-Dgnss_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-I/home/mr/Workspace/loc/src/v2",
			"-Dlocalization_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/usr/include/freetype2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-DQT_WIDGETS_LIB",
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/usr/include/openni2",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All rights reserved.\n// Authors: Yongjian Zhao (yongjian.zhao@allride.ai)\n\n#include <priority_queue>\n#include <set>\n\n#include \"intensity_map_builder.h\"\n\nvoid ClusterSample::ClusterSample(const ClusterSmaple& other) {\n  this->point_num += other.point_num;\n\n  float other_weight = static_cast<float>(other.point_num) / this->point_num;\n  float this_weight = 1.0f - other_weight;\n\n  this->height = this_weight * this->height + other_weight * other.height;\n  this->intensity = this_weigh * this->intensity + other_weight * other.intensity;\n}\n\nvoid IntensityMapBuilder::buildIntensityMap(const std::string& output_folder) {\n  // To initialize grid2_samples_, each ndt3 grid is one ClusterSample\n  // for each grid2 sample, there are several Cluster\n\n  // height cluster for each grid2_sample\n  for (auto& grid2_smaple : grid2_samples_) {\n    heightCluster(&grid2_smaple.second);\n  }\n\n  // create image acoording to grid2_samples_\n  cv::Mat intensity_image;\n  createImage(&intensity_image);\n\n  // create intensity_map_info according to grid2_samples_\n  /* protoBufType intensity_map_info */\n  createHeightInfo(/*&intensity_map_info*/);\n\n  // save image and intensity_map_info\n  saveIntensityMap(output_folder, intensity_image /*, intensity_map_info*/);\n}\n\nvoid IntensityMapBuilder::heightCluster(std::vector<ClusterSample>* samples) {\n  size_t sample_num = samples->size();\n\n  // make existing_sample_id\n  std::set<size_t> existing_sample_id;\n  for (size_t i = 0; i < sample_num; i++) {\n    existing_sample_id.insert(i);\n  }\n\n  // make distance_queue\n  std::priority_queue<QueueElement, std::vector<QueueElement>, QueueElementCompare> distance_queue;\n  for (size_t i = 0; i < sample_num; i++) {\n    for (size_t j = i + 1; j < sample_num; j++) {\n      float distance = fabs(samples->at(i).height - samples->at(j).height);\n      distance_queue.emplace(distance, i, j);\n    }\n  }\n\n  // cluster\n  const float distance_th = 4.0f;\n  while (true) {\n    // find min_distance between each ClusterSample\n    QueueElement element = distance_queue.top() distance_queue.pop();\n    if (element.distance > distance_th) {\n      break;\n    }\n\n    if (existing_sample_id.count(element.small_id) == 0) {\n      continue;\n    }\n\n    if (existing_sample_id.count(element.big_id) == 0) {\n      continue;\n    }\n\n    // merge two nearest samples\n    samples->at(element.small_id).merge(samples->at(element.big_id));\n    existing_sample_id.erase(element.big_id);\n    sample_num--;\n  }\n\n  if (existing_sample_id.size() != sample_num) {\n    std::cout << \"error: existing_sample_id.size() does not equal to sample_num!\" << std::endl;\n  }\n\n  // save cluster result\n  // need test\n  size_t i = 0;\n  for (size_t id& existing_sample_id) {\n    samples->at<i> = samples->at(id);\n  }\n  samples->resize(sample_num);\n}\n\nvoid IntensityMapBuilder::createImage(cv::Mat* image) {\n  // get necessary information from ndt_map_data_\n  int min_tile_id_x = 0, max_tile_id_x = 10;\n  int min_tile_id_y = 0, max_tile_id_y = 10;\n  float min_height = 0, max_height = 10;\n  float min_intensity = 0, max_intensity = 255;\n\n  int image_width =\n      static_cast<int>((max_tile_id_x - min_tile_id_x + 1) * param_.tile_size / param_.grid_size);\n  int image_height =\n      static_cast<int>((max_tile_id_y - min_tile_id_y + 1) * param_.tile_size / param_.grid_size);\n\n  // make image\n  cv::Mat blank_image = cv::Mat::zeros(image_height, image_width, CV_U8C3);\n  blank_image.copyTo(*image);\n  for (auto grid2_sample : grid2_samples_) {\n    // set pixel value\n  }\n}\n\nvoid IntensityMapBuilder::createHeightInfo(/* protoBufType *intensity_map_info */) {}\n\nbool IntensityMapBuilder::saveIntensityMap(const std::string& output_folder, const cv::Mat& image\n                                           /*const protoBufType *intensity_map_info */) {\n  // check or make output folder\n\n  // save image\n  std::string image_name = output_folder + \"/intensity_image.png\";\n  cv::imwrite(image_name, image);\n\n  // save intensity_map_info\n\n  return true;\n}\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/intensity_map_builder.cpp"
		}
	}
]
I0403 16:38:29.835721 12621 json_parser.cpp:18] 
[
	16,
	{
		"bufnr" : 7,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/intensity_map_builder.cpp",
		"flags" : 
		[
			"-I/usr/local/include",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/include/pcl-1.7",
			"-I/opt/ros/kinetic/include",
			"-Dloc_geometry_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-Dv2_mapping_EXPORTS",
			"-DDISABLE_PNG",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-Dloc_io_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-DUSE_PCL_OPENMP",
			"-DQT_CORE_LIB",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-I/usr/include/libxml2",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/usr/include/ni",
			"-DDISABLE_PCAP",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-I/usr/include/jsoncpp",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dinertial_nav_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-Dndt_tku_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_NO_DEBUG",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/python2.7",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-I/usr/include/eigen3",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dndt_cpu_EXPORTS",
			"-Dgnss_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-I/home/mr/Workspace/loc/src/v2",
			"-Dlocalization_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/usr/include/freetype2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-DQT_WIDGETS_LIB",
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/usr/include/openni2",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All rights reserved.\n// Authors: Yongjian Zhao (yongjian.zhao@allride.ai)\n\n#include <priority_queue>\n#include <set>\n\n#include \"intensity_map_builder.h\"\n\nvoid ClusterSample::ClusterSample(const ClusterSmaple& other) {\n  this->point_num += other.point_num;\n\n  float other_weight = static_cast<float>(other.point_num) / this->point_num;\n  float this_weight = 1.0f - other_weight;\n\n  this->height = this_weight * this->height + other_weight * other.height;\n  this->intensity = this_weigh * this->intensity + other_weight * other.intensity;\n}\n\nvoid IntensityMapBuilder::buildIntensityMap(const std::string& output_folder) {\n  // To initialize grid2_samples_, each ndt3 grid is one ClusterSample\n  // for each grid2 sample, there are several Cluster\n\n  // height cluster for each grid2_sample\n  for (auto& grid2_smaple : grid2_samples_) {\n    heightCluster(&grid2_smaple.second);\n  }\n\n  // create image acoording to grid2_samples_\n  cv::Mat intensity_image;\n  createImage(&intensity_image);\n\n  // create intensity_map_info according to grid2_samples_\n  /* protoBufType intensity_map_info */\n  createHeightInfo(/*&intensity_map_info*/);\n\n  // save image and intensity_map_info\n  saveIntensityMap(output_folder, intensity_image /*, intensity_map_info*/);\n}\n\nvoid IntensityMapBuilder::heightCluster(std::vector<ClusterSample>* samples) {\n  size_t sample_num = samples->size();\n\n  // make existing_sample_id\n  std::set<size_t> existing_sample_id;\n  for (size_t i = 0; i < sample_num; i++) {\n    existing_sample_id.insert(i);\n  }\n\n  // make distance_queue\n  std::priority_queue<QueueElement, std::vector<QueueElement>, QueueElementCompare> distance_queue;\n  for (size_t i = 0; i < sample_num; i++) {\n    for (size_t j = i + 1; j < sample_num; j++) {\n      float distance = fabs(samples->at(i).height - samples->at(j).height);\n      distance_queue.emplace(distance, i, j);\n    }\n  }\n\n  // cluster\n  const float distance_th = 4.0f;\n  while (true) {\n    // find min_distance between each ClusterSample\n    QueueElement element = distance_queue.top() distance_queue.pop();\n    if (element.distance > distance_th) {\n      break;\n    }\n\n    if (existing_sample_id.count(element.small_id) == 0) {\n      continue;\n    }\n\n    if (existing_sample_id.count(element.big_id) == 0) {\n      continue;\n    }\n\n    // merge two nearest samples\n    samples->at(element.small_id).merge(samples->at(element.big_id));\n    existing_sample_id.erase(element.big_id);\n    sample_num--;\n  }\n\n  if (existing_sample_id.size() != sample_num) {\n    std::cout << \"error: existing_sample_id.size() does not equal to sample_num!\" << std::endl;\n  }\n\n  // save cluster result\n  // need test\n  size_t i = 0;\n  for (size_t id& existing_sample_id) {\n    samples->at<i> = samples->at(id);\n  }\n  samples->resize(sample_num);\n}\n\nvoid IntensityMapBuilder::createImage(cv::Mat* image) {\n  // get necessary information from ndt_map_data_\n  int min_tile_id_x = 0, max_tile_id_x = 10;\n  int min_tile_id_y = 0, max_tile_id_y = 10;\n  float min_height = 0, max_height = 10;\n  float min_intensity = 0, max_intensity = 255;\n\n  int image_width =\n      static_cast<int>((max_tile_id_x - min_tile_id_x + 1) * param_.tile_size / param_.grid_size);\n  int image_height =\n      static_cast<int>((max_tile_id_y - min_tile_id_y + 1) * param_.tile_size / param_.grid_size);\n\n  // make image\n  cv::Mat blank_image = cv::Mat::zeros(image_height, image_width, CV_U8C3);\n  blank_image.copyTo(*image);\n  for (auto grid2_sample : grid2_samples_) {\n    // set pixel value\n  }\n}\n\nvoid IntensityMapBuilder::createHeightInfo(/* protoBufType *intensity_map_info */) {}\n\nbool IntensityMapBuilder::saveIntensityMap(const std::string& output_folder, const cv::Mat& image\n                                           /*const protoBufType *intensity_map_info */) {\n  // check or make output folder\n\n  // save image\n  std::string image_name = output_folder + \"/intensity_image.png\";\n  cv::imwrite(image_name, image);\n\n  // save intensity_map_info\n\n  return true;\n}\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/intensity_map_builder.cpp"
		}
	}
]
I0403 16:38:29.924867 12621 json_parser.cpp:18] 
[
	17,
	{
		"bufnr" : 8,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_client.cpp",
		"flags" : 
		[
			"/usr/bin/c++",
			"-x",
			"c++",
			"-DDISABLE_PCAP",
			"-DDISABLE_PNG",
			"-DQT_CORE_LIB",
			"-DQT_GUI_LIB",
			"-DQT_NO_DEBUG",
			"-DQT_WIDGETS_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\"localization\"",
			"-Dv2_mapping_EXPORTS",
			"-DvtkFiltersFlowPaths_AUTOINIT=1(vtkFiltersParallelFlowPaths)",
			"-DvtkIOExodus_AUTOINIT=1(vtkIOParallelExodus)",
			"-DvtkIOGeometry_AUTOINIT=1(vtkIOMPIParallel)",
			"-DvtkIOImage_AUTOINIT=1(vtkIOMPIImage)",
			"-DvtkIOSQL_AUTOINIT=2(vtkIOMySQL,vtkIOPostgreSQL)",
			"-DvtkRenderingContext2D_AUTOINIT=1(vtkRenderingContextOpenGL)",
			"-DvtkRenderingCore_AUTOINIT=4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)",
			"-DvtkRenderingFreeType_AUTOINIT=2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)",
			"-DvtkRenderingLIC_AUTOINIT=1(vtkRenderingParallelLIC)",
			"-DvtkRenderingVolume_AUTOINIT=1(vtkRenderingVolumeOpenGL)",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/include/vtk-6.2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/lib/openmpi/include",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/usr/include/python2.7",
			"-I/usr/include/freetype2",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/hdf5/openmpi",
			"-I/usr/include/libxml2",
			"-I/usr/include/tcl",
			"-I/usr/include/pcl-1.7",
			"-I/usr/include/eigen3",
			"-I/usr/include/ni",
			"-I/usr/include/openni2",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/devel/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-std=c++14",
			"-march=native",
			"-pipe",
			"-O2",
			"-Wall",
			"-Wextra",
			"-fopenmp",
			"-fPIC",
			"-pthread",
			"-fPIC",
			"-fPIC",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#include \"tile_client.h\"\n\nnamespace allride {\nnamespace mapping {\n\nTileClient::TileClient(int layer_id, std::shared_ptr<LocalDatabase> database) {\n  layer_id_ = layer_id;\n  database_ = database;\n}\n\nbool TileClient::get(Tiler::TileID tile_id, std::shared_ptr<TileDataStorage>* tile) {\n  if (!tile || !database_) {\n    return false;\n  }\n\n  std::string data;\n  if (!database_->get(getKey(tile_id), &data)) {\n    return false;\n  }\n\n  *tile = std::shared_ptr<TileDataStorage>(new TileDataStorage);\n\n  return (*tile)->unpackFromString(data);\n}\n\nbool TileClient::put(Tiler::TileID tile_id,\n                     const std::shared_ptr<const TileDataStorage>& tile) const {\n  if (!database_) {\n    return false;\n  }\n\n  std::string data;\n  tile->packToString(&data);\n  return database_->put(getKey(tile_id), data);\n}\n\nbool TileClient::exist(Tiler::TileID tile_id) const {\n  if (!database_) {\n    return false;\n  }\n\n  return database_->exist(getKey(tile_id));\n}\n\nstd::string TileClient::getKey(Tiler::TileID) const { return \"keytest\"; }\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_client.cpp"
		}
	}
]
I0403 16:38:32.869464 12621 json_parser.cpp:18] 
[
	18,
	{
		"bufnr" : 8,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_client.cpp",
		"flags" : 
		[
			"/usr/bin/c++",
			"-x",
			"c++",
			"-DDISABLE_PCAP",
			"-DDISABLE_PNG",
			"-DQT_CORE_LIB",
			"-DQT_GUI_LIB",
			"-DQT_NO_DEBUG",
			"-DQT_WIDGETS_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\"localization\"",
			"-Dv2_mapping_EXPORTS",
			"-DvtkFiltersFlowPaths_AUTOINIT=1(vtkFiltersParallelFlowPaths)",
			"-DvtkIOExodus_AUTOINIT=1(vtkIOParallelExodus)",
			"-DvtkIOGeometry_AUTOINIT=1(vtkIOMPIParallel)",
			"-DvtkIOImage_AUTOINIT=1(vtkIOMPIImage)",
			"-DvtkIOSQL_AUTOINIT=2(vtkIOMySQL,vtkIOPostgreSQL)",
			"-DvtkRenderingContext2D_AUTOINIT=1(vtkRenderingContextOpenGL)",
			"-DvtkRenderingCore_AUTOINIT=4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)",
			"-DvtkRenderingFreeType_AUTOINIT=2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)",
			"-DvtkRenderingLIC_AUTOINIT=1(vtkRenderingParallelLIC)",
			"-DvtkRenderingVolume_AUTOINIT=1(vtkRenderingVolumeOpenGL)",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/include/vtk-6.2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/lib/openmpi/include",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/usr/include/python2.7",
			"-I/usr/include/freetype2",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/hdf5/openmpi",
			"-I/usr/include/libxml2",
			"-I/usr/include/tcl",
			"-I/usr/include/pcl-1.7",
			"-I/usr/include/eigen3",
			"-I/usr/include/ni",
			"-I/usr/include/openni2",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/devel/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-std=c++14",
			"-march=native",
			"-pipe",
			"-O2",
			"-Wall",
			"-Wextra",
			"-fopenmp",
			"-fPIC",
			"-pthread",
			"-fPIC",
			"-fPIC",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#include \"tile_client.h\"\n\nnamespace allride {\nnamespace mapping {\n\nTileClient::TileClient(int layer_id, std::shared_ptr<LocalDatabase> database) {\n  layer_id_ = layer_id;\n  database_ = database;\n}\n\nbool TileClient::get(Tiler::TileID tile_id, std::shared_ptr<TileDataStorage>* tile) {\n  if (!tile || !database_) {\n    return false;\n  }\n\n  std::string data;\n  if (!database_->get(getKey(tile_id), &data)) {\n    return false;\n  }\n\n  *tile = std::shared_ptr<TileDataStorage>(new TileDataStorage);\n\n  return (*tile)->unpackFromString(data);\n}\n\nbool TileClient::put(Tiler::TileID tile_id,\n                     const std::shared_ptr<const TileDataStorage>& tile) const {\n  if (!database_) {\n    return false;\n  }\n\n  std::string data;\n  tile->packToString(&data);\n  return database_->put(getKey(tile_id), data);\n}\n\nbool TileClient::exist(Tiler::TileID tile_id) const {\n  if (!database_) {\n    return false;\n  }\n\n  return database_->exist(getKey(tile_id));\n}\n\nstd::string TileClient::getKey(Tiler::TileID) const { return \"keytest\"; }\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_client.cpp"
		}
	}
]
I0403 16:40:08.709719 12621 json_parser.cpp:18] 
[
	19,
	{
		"bufnr" : 8,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_client.cpp",
		"flags" : 
		[
			"/usr/bin/c++",
			"-x",
			"c++",
			"-DDISABLE_PCAP",
			"-DDISABLE_PNG",
			"-DQT_CORE_LIB",
			"-DQT_GUI_LIB",
			"-DQT_NO_DEBUG",
			"-DQT_WIDGETS_LIB",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\"localization\"",
			"-Dv2_mapping_EXPORTS",
			"-DvtkFiltersFlowPaths_AUTOINIT=1(vtkFiltersParallelFlowPaths)",
			"-DvtkIOExodus_AUTOINIT=1(vtkIOParallelExodus)",
			"-DvtkIOGeometry_AUTOINIT=1(vtkIOMPIParallel)",
			"-DvtkIOImage_AUTOINIT=1(vtkIOMPIImage)",
			"-DvtkIOSQL_AUTOINIT=2(vtkIOMySQL,vtkIOPostgreSQL)",
			"-DvtkRenderingContext2D_AUTOINIT=1(vtkRenderingContextOpenGL)",
			"-DvtkRenderingCore_AUTOINIT=4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)",
			"-DvtkRenderingFreeType_AUTOINIT=2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)",
			"-DvtkRenderingLIC_AUTOINIT=1(vtkRenderingParallelLIC)",
			"-DvtkRenderingVolume_AUTOINIT=1(vtkRenderingVolumeOpenGL)",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-isystem",
			"/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/usr/include/vtk-6.2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-I/usr/lib/openmpi/include",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/usr/include/python2.7",
			"-I/usr/include/freetype2",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/include/jsoncpp",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/hdf5/openmpi",
			"-I/usr/include/libxml2",
			"-I/usr/include/tcl",
			"-I/usr/include/pcl-1.7",
			"-I/usr/include/eigen3",
			"-I/usr/include/ni",
			"-I/usr/include/openni2",
			"-I/usr/local/include",
			"-I/home/mr/Workspace/loc/devel/include",
			"-I/opt/ros/kinetic/include",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/home/mr/Workspace/loc/src/v2",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-isystem",
			"/usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-isystem",
			"/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-std=c++14",
			"-march=native",
			"-pipe",
			"-O2",
			"-Wall",
			"-Wextra",
			"-fopenmp",
			"-fPIC",
			"-pthread",
			"-fPIC",
			"-fPIC",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#include \"tile_client.h\"\n\nnamespace allride {\nnamespace mapping {\n\nTileClient::TileClient(int layer_id, std::shared_ptr<LocalDatabase> database) {\n  layer_id_ = layer_id;\n  database_ = database;\n}\n\nbool TileClient::get(Tiler::TileID tile_id, std::shared_ptr<TileDataStorage>* tile) {\n  if (!tile || !database_) {\n    return false;\n  }\n\n  std::string data;\n  if (!database_->get(getKey(tile_id), &data)) {\n    return false;\n  }\n\n  *tile = std::shared_ptr<TileDataStorage>(new TileDataStorage);\n\n  return (*tile)->unpackFromString(data);\n}\n\nbool TileClient::put(Tiler::TileID tile_id,\n                     const std::shared_ptr<const TileDataStorage>& tile) const {\n  if (!database_) {\n    return false;\n  }\n\n  std::string data;\n  tile->packToString(&data);\n  return database_->put(getKey(tile_id), data);\n}\n\nbool TileClient::exist(Tiler::TileID tile_id) const {\n  if (!database_) {\n    return false;\n  }\n\n  return database_->exist(getKey(tile_id));\n}\n\nstd::string TileClient::getKey(Tiler::TileID) const { return \"keytest\"; }\n\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_client.cpp"
		}
	}
]
I0403 16:40:08.760447 12621 json_parser.cpp:18] 
[
	20,
	{
		"bufnr" : 9,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_client.h",
		"flags" : 
		[
			"-I/usr/local/include",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/include/pcl-1.7",
			"-I/opt/ros/kinetic/include",
			"-Dloc_geometry_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-Dv2_mapping_EXPORTS",
			"-DDISABLE_PNG",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-Dloc_io_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-DUSE_PCL_OPENMP",
			"-DQT_CORE_LIB",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-I/usr/include/libxml2",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/usr/include/ni",
			"-DDISABLE_PCAP",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-I/usr/include/jsoncpp",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dinertial_nav_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-Dndt_tku_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_NO_DEBUG",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/python2.7",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-I/usr/include/eigen3",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dndt_cpu_EXPORTS",
			"-Dgnss_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-I/home/mr/Workspace/loc/src/v2",
			"-Dlocalization_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/usr/include/freetype2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-DQT_WIDGETS_LIB",
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/usr/include/openni2",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include \"local_database.h\"\n#include \"tile_data_storage.h\"\n#include \"tiler.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass TileClient {\n public:\n  /// @brief construct a tile client with layer name and database\n  /// @param[in] layer_id spccify the layer that this tile client manages\n  /// @param[in] database is a reference to a database shared by many layers\n  TileClient(int layer_id, std::shared_ptr<LocalDatabase> database);\n\n  /// @brief get the tile data specific by tile id;\n  /// @param[in] tile_id specifies which tile to get\n  /// @param[out] tile stores the tile data got\n  /// @return true on succeed, else false\n  bool get(Tiler::TileID tile_id, std::shared_ptr<TileDataStorage>* tile);\n\n  /// @brief put the specific tile data into database;\n  /// @param[in] tile_id specifies the tile id of the tile to put\n  /// @param[in] tile stores the tile data to put\n  /// @return true on succeed, else false\n  bool put(Tiler::TileID tile_id, const std::shared_ptr<const TileDataStorage>& tile) const;\n\n  /// @brief check if a tile exist in database\n  /// @param[in] the tile id to check\n  /// @return true on exist, else false\n  bool exist(Tiler::TileID tile_id) const;\n\n private:\n  std::string getKey(Tiler::TileID) const;\n\n  int layer_id_;\n  std::shared_ptr<LocalDatabase> database_;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_client.h"
		}
	}
]
I0403 16:41:56.351538 12621 json_parser.cpp:18] 
[
	21,
	{
		"bufnr" : 9,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_client.h",
		"flags" : 
		[
			"-I/usr/local/include",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/include/pcl-1.7",
			"-I/opt/ros/kinetic/include",
			"-Dloc_geometry_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-Dv2_mapping_EXPORTS",
			"-DDISABLE_PNG",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-Dloc_io_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-DUSE_PCL_OPENMP",
			"-DQT_CORE_LIB",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-I/usr/include/libxml2",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/usr/include/ni",
			"-DDISABLE_PCAP",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-I/usr/include/jsoncpp",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dinertial_nav_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-Dndt_tku_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_NO_DEBUG",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/python2.7",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-I/usr/include/eigen3",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dndt_cpu_EXPORTS",
			"-Dgnss_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-I/home/mr/Workspace/loc/src/v2",
			"-Dlocalization_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/usr/include/freetype2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-DQT_WIDGETS_LIB",
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/usr/include/openni2",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All Rights Reserved.\n// Author: Rui Min (rui.min@allride.ai).\n#pragma once\n\n#include \"local_database.h\"\n#include \"tile_data_storage.h\"\n#include \"tiler.h\"\n\nnamespace allride {\nnamespace mapping {\n\nclass TileClient {\n public:\n  /// @brief construct a tile client with layer name and database\n  /// @param[in] layer_id spccify the layer that this tile client manages\n  /// @param[in] database is a reference to a database shared by many layers\n  TileClient(int layer_id, std::shared_ptr<LocalDatabase> database);\n\n  /// @brief get the tile data specific by tile id;\n  /// @param[in] tile_id specifies which tile to get\n  /// @param[out] tile stores the tile data got\n  /// @return true on succeed, else false\n  bool get(Tiler::TileID tile_id, std::shared_ptr<TileDataStorage>* tile);\n\n  /// @brief put the specific tile data into database;\n  /// @param[in] tile_id specifies the tile id of the tile to put\n  /// @param[in] tile stores the tile data to put\n  /// @return true on succeed, else false\n  bool put(Tiler::TileID tile_id, const std::shared_ptr<const TileDataStorage>& tile) const;\n\n  /// @brief check if a tile exist in database\n  /// @param[in] the tile id to check\n  /// @return true on exist, else false\n  bool exist(Tiler::TileID tile_id) const;\n\n private:\n  std::string getKey(Tiler::TileID) const;\n\n  int layer_id_;\n  std::shared_ptr<LocalDatabase> database_;\n};\n}  // namespace mapping\n}  // namespace allride\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/tile_client.h"
		}
	}
]
I0403 16:41:56.394170 12621 json_parser.cpp:18] 
[
	22,
	{
		"bufnr" : 7,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/intensity_map_builder.cpp",
		"flags" : 
		[
			"-I/usr/local/include",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/include/pcl-1.7",
			"-I/opt/ros/kinetic/include",
			"-Dloc_geometry_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-Dv2_mapping_EXPORTS",
			"-DDISABLE_PNG",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-Dloc_io_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-DUSE_PCL_OPENMP",
			"-DQT_CORE_LIB",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-I/usr/include/libxml2",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/usr/include/ni",
			"-DDISABLE_PCAP",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-I/usr/include/jsoncpp",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dinertial_nav_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-Dndt_tku_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_NO_DEBUG",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/python2.7",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-I/usr/include/eigen3",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dndt_cpu_EXPORTS",
			"-Dgnss_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-I/home/mr/Workspace/loc/src/v2",
			"-Dlocalization_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/usr/include/freetype2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-DQT_WIDGETS_LIB",
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/usr/include/openni2",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All rights reserved.\n// Authors: Yongjian Zhao (yongjian.zhao@allride.ai)\n\n#include <priority_queue>\n#include <set>\n\n#include \"intensity_map_builder.h\"\n\nvoid ClusterSample::ClusterSample(const ClusterSmaple& other) {\n  this->point_num += other.point_num;\n\n  float other_weight = static_cast<float>(other.point_num) / this->point_num;\n  float this_weight = 1.0f - other_weight;\n\n  this->height = this_weight * this->height + other_weight * other.height;\n  this->intensity = this_weigh * this->intensity + other_weight * other.intensity;\n}\n\nvoid IntensityMapBuilder::buildIntensityMap(const std::string& output_folder) {\n  // To initialize grid2_samples_, each ndt3 grid is one ClusterSample\n  // for each grid2 sample, there are several Cluster\n\n  // height cluster for each grid2_sample\n  for (auto& grid2_smaple : grid2_samples_) {\n    heightCluster(&grid2_smaple.second);\n  }\n\n  // create image acoording to grid2_samples_\n  cv::Mat intensity_image;\n  createImage(&intensity_image);\n\n  // create intensity_map_info according to grid2_samples_\n  /* protoBufType intensity_map_info */\n  createHeightInfo(/*&intensity_map_info*/);\n\n  // save image and intensity_map_info\n  saveIntensityMap(output_folder, intensity_image /*, intensity_map_info*/);\n}\n\nvoid IntensityMapBuilder::heightCluster(std::vector<ClusterSample>* samples) {\n  size_t sample_num = samples->size();\n\n  // make existing_sample_id\n  std::set<size_t> existing_sample_id;\n  for (size_t i = 0; i < sample_num; i++) {\n    existing_sample_id.insert(i);\n  }\n\n  // make distance_queue\n  std::priority_queue<QueueElement, std::vector<QueueElement>, QueueElementCompare> distance_queue;\n  for (size_t i = 0; i < sample_num; i++) {\n    for (size_t j = i + 1; j < sample_num; j++) {\n      float distance = fabs(samples->at(i).height - samples->at(j).height);\n      distance_queue.emplace(distance, i, j);\n    }\n  }\n\n  // cluster\n  const float distance_th = 4.0f;\n  while (true) {\n    // find min_distance between each ClusterSample\n    QueueElement element = distance_queue.top() distance_queue.pop();\n    if (element.distance > distance_th) {\n      break;\n    }\n\n    if (existing_sample_id.count(element.small_id) == 0) {\n      continue;\n    }\n\n    if (existing_sample_id.count(element.big_id) == 0) {\n      continue;\n    }\n\n    // merge two nearest samples\n    samples->at(element.small_id).merge(samples->at(element.big_id));\n    existing_sample_id.erase(element.big_id);\n    sample_num--;\n  }\n\n  if (existing_sample_id.size() != sample_num) {\n    std::cout << \"error: existing_sample_id.size() does not equal to sample_num!\" << std::endl;\n  }\n\n  // save cluster result\n  // need test\n  size_t i = 0;\n  for (size_t id& existing_sample_id) {\n    samples->at<i> = samples->at(id);\n  }\n  samples->resize(sample_num);\n}\n\nvoid IntensityMapBuilder::createImage(cv::Mat* image) {\n  // get necessary information from ndt_map_data_\n  int min_tile_id_x = 0, max_tile_id_x = 10;\n  int min_tile_id_y = 0, max_tile_id_y = 10;\n  float min_height = 0, max_height = 10;\n  float min_intensity = 0, max_intensity = 255;\n\n  int image_width =\n      static_cast<int>((max_tile_id_x - min_tile_id_x + 1) * param_.tile_size / param_.grid_size);\n  int image_height =\n      static_cast<int>((max_tile_id_y - min_tile_id_y + 1) * param_.tile_size / param_.grid_size);\n\n  // make image\n  cv::Mat blank_image = cv::Mat::zeros(image_height, image_width, CV_U8C3);\n  blank_image.copyTo(*image);\n  for (auto grid2_sample : grid2_samples_) {\n    // set pixel value\n  }\n}\n\nvoid IntensityMapBuilder::createHeightInfo(/* protoBufType *intensity_map_info */) {}\n\nbool IntensityMapBuilder::saveIntensityMap(const std::string& output_folder, const cv::Mat& image\n                                           /*const protoBufType *intensity_map_info */) {\n  // check or make output folder\n\n  // save image\n  std::string image_name = output_folder + \"/intensity_image.png\";\n  cv::imwrite(image_name, image);\n\n  // save intensity_map_info\n\n  return true;\n}\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/intensity_map_builder.cpp"
		}
	}
]
I0403 16:42:08.630231 12621 json_parser.cpp:18] 
[
	23,
	{
		"bufnr" : 7,
		"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/intensity_map_builder.cpp",
		"flags" : 
		[
			"-I/usr/local/include",
			"-I/opt/ros/kinetic/include/xmlrpcpp",
			"-I/usr/include/x86_64-linux-gnu/freetype2",
			"-I/usr/include/pcl-1.7",
			"-I/opt/ros/kinetic/include",
			"-Dloc_geometry_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-I/home/mr/Workspace/loc/src/lib/pcl_omp_registration/include",
			"-Dv2_mapping_EXPORTS",
			"-DDISABLE_PNG",
			"-DvtkRenderingLIC_AUTOINIT=\\\"1(vtkRenderingParallelLIC)\\\"",
			"-I/home/mr/Workspace/loc/src/gnss_localizer/nodes/nmea2tfpose",
			"-Dloc_io_EXPORTS",
			"-DROS_PACKAGE_NAME=\\\\\\\"rideware_connector\\\\\\\"",
			"-DUSE_PCL_OPENMP",
			"-DQT_CORE_LIB",
			"-DvtkIOGeometry_AUTOINIT=\\\"1(vtkIOMPIParallel)\\\"",
			"-DROS_PACKAGE_NAME=\\\\\\\"lidar_localizer\\\\\\\"",
			"-I/usr/include/hdf5/openmpi",
			"-I/usr/include/libxml2",
			"-DvtkIOExodus_AUTOINIT=\\\"1(vtkIOParallelExodus)\\\"",
			"-I/home/mr/Workspace/loc/src/lib/ndt_tku/include",
			"-I/usr/include/ni",
			"-DDISABLE_PCAP",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtCore",
			"-DvtkRenderingCore_AUTOINIT=\\\"4(vtkInteractionStyle,vtkRenderingFreeType,vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)\\\"",
			"-DvtkRenderingVolume_AUTOINIT=\\\"1(vtkRenderingVolumeOpenGL)\\\"",
			"-I/usr/include/jsoncpp",
			"-I/usr/lib/openmpi/include",
			"-I/home/mr/Workspace/loc/src/lidar_localizer/include",
			"-Dinertial_nav_EXPORTS",
			"-I/usr/include/vtk-6.2",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent",
			"-Dndt_tku_EXPORTS",
			"-DvtkIOImage_AUTOINIT=\\\"1(vtkIOMPIImage)\\\"",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtWidgets",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss\\\\\\\"",
			"-I/home/mr/Workspace/loc/src/lib/gnss/include",
			"-DROS_PACKAGE_NAME=\\\\\\\"localization\\\\\\\"",
			"-Dndt_matching_monitor_lib_EXPORTS",
			"-DQT_NO_DEBUG",
			"-I/home/mr/Workspace/loc/src/lib/ndt_cpu/include",
			"-Dsensor_fusion_EXPORTS",
			"-I/usr/include/x86_64-linux-gnu",
			"-I/usr/include/python2.7",
			"-DROS_BUILD_SHARED_LIBS=1",
			"-DROS_PACKAGE_NAME=\\\\\\\"gnss_localizer\\\\\\\"",
			"-I/usr/include/eigen3",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev/opencv",
			"-DQT_GUI_LIB",
			"-I/usr/include/tcl",
			"-Dndt_cpu_EXPORTS",
			"-Dgnss_EXPORTS",
			"-I/opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/home/mr/Workspace/loc/src/v2/mapping/src",
			"-I/home/mr/Workspace/loc/src/v2",
			"-Dlocalization_EXPORTS",
			"-isystem/home/mr/Workspace/loc/ /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64",
			"-Dpcl_omp_registration_EXPORTS",
			"-I/usr/include/freetype2",
			"-isystem/home/mr/Workspace/loc/ /usr/include/x86_64-linux-gnu/qt5/QtGui",
			"-I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include",
			"-DvtkIOSQL_AUTOINIT=\\\"2(vtkIOMySQL,vtkIOPostgreSQL)\\\"",
			"-DROSCONSOLE_BACKEND_LOG4CXX",
			"-isystem/home/mr/Workspace/loc/ /opt/ros/kinetic/include/opencv-3.3.1-dev",
			"-I/usr/lib/openmpi/include/openmpi",
			"-I/home/mr/Workspace/loc/src/v2/mapping/map",
			"-DQT_WIDGETS_LIB",
			"-DvtkFiltersFlowPaths_AUTOINIT=\\\"1(vtkFiltersParallelFlowPaths)\\\"",
			"-I/home/mr/Workspace/loc/devel/include",
			"-DvtkRenderingContext2D_AUTOINIT=\\\"1(vtkRenderingContextOpenGL)\\\"",
			"-I/usr/include/openni2",
			"-DvtkRenderingFreeType_AUTOINIT=\\\"2(vtkRenderingFreeTypeFontConfig,vtkRenderingMatplotlib)\\\"",
			"-x",
			"c++",
			"-std=c++14",
			"-I/usr/include/c++/5",
			"-I/usr/include",
			"-resource-dir=/home/mr/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0",
			"-fspell-checking"
		],
		"unsaved" : 
		{
			"content" : "// Copyright 2019 Allride.ai. All rights reserved.\n// Authors: Yongjian Zhao (yongjian.zhao@allride.ai)\n\n#include <priority_queue>\n#include <set>\n\n#include \"intensity_map_builder.h\"\n\nvoid ClusterSample::ClusterSample(const ClusterSmaple& other) {\n  this->point_num += other.point_num;\n\n  float other_weight = static_cast<float>(other.point_num) / this->point_num;\n  float this_weight = 1.0f - other_weight;\n\n  this->height = this_weight * this->height + other_weight * other.height;\n  this->intensity = this_weigh * this->intensity + other_weight * other.intensity;\n}\n\nvoid IntensityMapBuilder::buildIntensityMap(const std::string& output_folder) {\n  // To initialize grid2_samples_, each ndt3 grid is one ClusterSample\n  // for each grid2 sample, there are several Cluster\n\n  // height cluster for each grid2_sample\n  for (auto& grid2_smaple : grid2_samples_) {\n    heightCluster(&grid2_smaple.second);\n  }\n\n  // create image acoording to grid2_samples_\n  cv::Mat intensity_image;\n  createImage(&intensity_image);\n\n  // create intensity_map_info according to grid2_samples_\n  /* protoBufType intensity_map_info */\n  createHeightInfo(/*&intensity_map_info*/);\n\n  // save image and intensity_map_info\n  saveIntensityMap(output_folder, intensity_image /*, intensity_map_info*/);\n}\n\nvoid IntensityMapBuilder::heightCluster(std::vector<ClusterSample>* samples) {\n  size_t sample_num = samples->size();\n\n  // make existing_sample_id\n  std::set<size_t> existing_sample_id;\n  for (size_t i = 0; i < sample_num; i++) {\n    existing_sample_id.insert(i);\n  }\n\n  // make distance_queue\n  std::priority_queue<QueueElement, std::vector<QueueElement>, QueueElementCompare> distance_queue;\n  for (size_t i = 0; i < sample_num; i++) {\n    for (size_t j = i + 1; j < sample_num; j++) {\n      float distance = fabs(samples->at(i).height - samples->at(j).height);\n      distance_queue.emplace(distance, i, j);\n    }\n  }\n\n  // cluster\n  const float distance_th = 4.0f;\n  while (true) {\n    // find min_distance between each ClusterSample\n    QueueElement element = distance_queue.top() distance_queue.pop();\n    if (element.distance > distance_th) {\n      break;\n    }\n\n    if (existing_sample_id.count(element.small_id) == 0) {\n      continue;\n    }\n\n    if (existing_sample_id.count(element.big_id) == 0) {\n      continue;\n    }\n\n    // merge two nearest samples\n    samples->at(element.small_id).merge(samples->at(element.big_id));\n    existing_sample_id.erase(element.big_id);\n    sample_num--;\n  }\n\n  if (existing_sample_id.size() != sample_num) {\n    std::cout << \"error: existing_sample_id.size() does not equal to sample_num!\" << std::endl;\n  }\n\n  // save cluster result\n  // need test\n  size_t i = 0;\n  for (size_t id& existing_sample_id) {\n    samples->at<i> = samples->at(id);\n  }\n  samples->resize(sample_num);\n}\n\nvoid IntensityMapBuilder::createImage(cv::Mat* image) {\n  // get necessary information from ndt_map_data_\n  int min_tile_id_x = 0, max_tile_id_x = 10;\n  int min_tile_id_y = 0, max_tile_id_y = 10;\n  float min_height = 0, max_height = 10;\n  float min_intensity = 0, max_intensity = 255;\n\n  int image_width =\n      static_cast<int>((max_tile_id_x - min_tile_id_x + 1) * param_.tile_size / param_.grid_size);\n  int image_height =\n      static_cast<int>((max_tile_id_y - min_tile_id_y + 1) * param_.tile_size / param_.grid_size);\n\n  // make image\n  cv::Mat blank_image = cv::Mat::zeros(image_height, image_width, CV_U8C3);\n  blank_image.copyTo(*image);\n  for (auto grid2_sample : grid2_samples_) {\n    // set pixel value\n  }\n}\n\nvoid IntensityMapBuilder::createHeightInfo(/* protoBufType *intensity_map_info */) {}\n\nbool IntensityMapBuilder::saveIntensityMap(const std::string& output_folder, const cv::Mat& image\n                                           /*const protoBufType *intensity_map_info */) {\n  // check or make output folder\n\n  // save image\n  std::string image_name = output_folder + \"/intensity_image.png\";\n  cv::imwrite(image_name, image);\n\n  // save intensity_map_info\n\n  return true;\n}\n",
			"filename" : "/home/mr/Workspace/loc/src/v2/mapping/src/intensity_map_builder.cpp"
		}
	}
]
I0403 16:42:08.6